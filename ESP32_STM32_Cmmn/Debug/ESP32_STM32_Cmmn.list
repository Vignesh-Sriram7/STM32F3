
ESP32_STM32_Cmmn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003780  08003780  00004780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c0  080037c0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080037c0  080037c0  000047c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037c8  080037c8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c8  080037c8  000047c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037cc  080037cc  000047cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037d0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000130  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a631  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a78  00000000  00000000  0000f66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  000110e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b6  00000000  00000000  00011860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f95f  00000000  00000000  00011e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae42  00000000  00000000  00031775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf94a  00000000  00000000  0003c5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fbf01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d1c  00000000  00000000  000fbf44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000fdc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003768 	.word	0x08003768

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003768 	.word	0x08003768

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fa2f 	bl	800064c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f825 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f8d7 	bl	80003a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f6:	f000 f875 	bl	80002e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80001fa:	f000 f8a3 	bl	8000344 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  char msg[] = "Hello\n";
 80001fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000234 <main+0x50>)
 8000200:	463b      	mov	r3, r7
 8000202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000206:	6018      	str	r0, [r3, #0]
 8000208:	3304      	adds	r3, #4
 800020a:	8019      	strh	r1, [r3, #0]
 800020c:	3302      	adds	r3, #2
 800020e:	0c0a      	lsrs	r2, r1, #16
 8000210:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8000212:	463b      	mov	r3, r7
 8000214:	4618      	mov	r0, r3
 8000216:	f7ff ffdd 	bl	80001d4 <strlen>
 800021a:	4603      	mov	r3, r0
 800021c:	b29a      	uxth	r2, r3
 800021e:	4639      	mov	r1, r7
 8000220:	2364      	movs	r3, #100	@ 0x64
 8000222:	4805      	ldr	r0, [pc, #20]	@ (8000238 <main+0x54>)
 8000224:	f002 faaa 	bl	800277c <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8000228:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800022c:	f000 fa74 	bl	8000718 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8000230:	bf00      	nop
 8000232:	e7ee      	b.n	8000212 <main+0x2e>
 8000234:	08003780 	.word	0x08003780
 8000238:	200000b0 	.word	0x200000b0

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b0a6      	sub	sp, #152	@ 0x98
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f003 fa5f 	bl	800370e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2258      	movs	r2, #88	@ 0x58
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f003 fa51 	bl	800370e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000274:	2310      	movs	r3, #16
 8000276:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027a:	2300      	movs	r3, #0
 800027c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fd83 	bl	8000d90 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000290:	f000 f8ac 	bl	80003ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000298:	2300      	movs	r3, #0
 800029a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fd92 	bl	8001dd8 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ba:	f000 f897 	bl	80003ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80002be:	2306      	movs	r3, #6
 80002c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 ff95 	bl	80021fc <HAL_RCCEx_PeriphCLKConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002d8:	f000 f888 	bl	80003ec <Error_Handler>
  }
}
 80002dc:	bf00      	nop
 80002de:	3798      	adds	r7, #152	@ 0x98
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e8:	4b14      	ldr	r3, [pc, #80]	@ (800033c <MX_USART2_UART_Init+0x58>)
 80002ea:	4a15      	ldr	r2, [pc, #84]	@ (8000340 <MX_USART2_UART_Init+0x5c>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002ee:	4b13      	ldr	r3, [pc, #76]	@ (800033c <MX_USART2_UART_Init+0x58>)
 80002f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_USART2_UART_Init+0x58>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_USART2_UART_Init+0x58>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <MX_USART2_UART_Init+0x58>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_USART2_UART_Init+0x58>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <MX_USART2_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_USART2_UART_Init+0x58>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800031a:	4b08      	ldr	r3, [pc, #32]	@ (800033c <MX_USART2_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_USART2_UART_Init+0x58>)
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_USART2_UART_Init+0x58>)
 8000328:	f002 f984 	bl	8002634 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000332:	f000 f85b 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000028 	.word	0x20000028
 8000340:	40004400 	.word	0x40004400

08000344 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000348:	4b14      	ldr	r3, [pc, #80]	@ (800039c <MX_USART3_UART_Init+0x58>)
 800034a:	4a15      	ldr	r2, [pc, #84]	@ (80003a0 <MX_USART3_UART_Init+0x5c>)
 800034c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800034e:	4b13      	ldr	r3, [pc, #76]	@ (800039c <MX_USART3_UART_Init+0x58>)
 8000350:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000354:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_USART3_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_USART3_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_USART3_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <MX_USART3_UART_Init+0x58>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <MX_USART3_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <MX_USART3_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	@ (800039c <MX_USART3_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <MX_USART3_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_USART3_UART_Init+0x58>)
 8000388:	f002 f9a2 	bl	80026d0 <HAL_HalfDuplex_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000392:	f000 f82b 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200000b0 	.word	0x200000b0
 80003a0:	40004800 	.word	0x40004800

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a08      	ldr	r2, [pc, #32]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <Error_Handler+0x8>

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <HAL_MspInit+0x44>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a0e      	ldr	r2, [pc, #56]	@ (800043c <HAL_MspInit+0x44>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <HAL_MspInit+0x44>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b09      	ldr	r3, [pc, #36]	@ (800043c <HAL_MspInit+0x44>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a08      	ldr	r2, [pc, #32]	@ (800043c <HAL_MspInit+0x44>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <HAL_MspInit+0x44>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08c      	sub	sp, #48	@ 0x30
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a37      	ldr	r2, [pc, #220]	@ (800053c <HAL_UART_MspInit+0xfc>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d131      	bne.n	80004c6 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000462:	4b37      	ldr	r3, [pc, #220]	@ (8000540 <HAL_UART_MspInit+0x100>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a36      	ldr	r2, [pc, #216]	@ (8000540 <HAL_UART_MspInit+0x100>)
 8000468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800046c:	61d3      	str	r3, [r2, #28]
 800046e:	4b34      	ldr	r3, [pc, #208]	@ (8000540 <HAL_UART_MspInit+0x100>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000476:	61bb      	str	r3, [r7, #24]
 8000478:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b31      	ldr	r3, [pc, #196]	@ (8000540 <HAL_UART_MspInit+0x100>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a30      	ldr	r2, [pc, #192]	@ (8000540 <HAL_UART_MspInit+0x100>)
 8000480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b2e      	ldr	r3, [pc, #184]	@ (8000540 <HAL_UART_MspInit+0x100>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000492:	230c      	movs	r3, #12
 8000494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000496:	2302      	movs	r3, #2
 8000498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049e:	2303      	movs	r3, #3
 80004a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004a2:	2307      	movs	r3, #7
 80004a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	f107 031c 	add.w	r3, r7, #28
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b0:	f000 fae4 	bl	8000a7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	2026      	movs	r0, #38	@ 0x26
 80004ba:	f000 fa2c 	bl	8000916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004be:	2026      	movs	r0, #38	@ 0x26
 80004c0:	f000 fa45 	bl	800094e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80004c4:	e035      	b.n	8000532 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000544 <HAL_UART_MspInit+0x104>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d130      	bne.n	8000532 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <HAL_UART_MspInit+0x100>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000540 <HAL_UART_MspInit+0x100>)
 80004d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004da:	61d3      	str	r3, [r2, #28]
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <HAL_UART_MspInit+0x100>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e8:	4b15      	ldr	r3, [pc, #84]	@ (8000540 <HAL_UART_MspInit+0x100>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a14      	ldr	r2, [pc, #80]	@ (8000540 <HAL_UART_MspInit+0x100>)
 80004ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004f2:	6153      	str	r3, [r2, #20]
 80004f4:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <HAL_UART_MspInit+0x100>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000506:	2312      	movs	r3, #18
 8000508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050e:	2303      	movs	r3, #3
 8000510:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000512:	2307      	movs	r3, #7
 8000514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	4619      	mov	r1, r3
 800051c:	480a      	ldr	r0, [pc, #40]	@ (8000548 <HAL_UART_MspInit+0x108>)
 800051e:	f000 faad 	bl	8000a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	2027      	movs	r0, #39	@ 0x27
 8000528:	f000 f9f5 	bl	8000916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800052c:	2027      	movs	r0, #39	@ 0x27
 800052e:	f000 fa0e 	bl	800094e <HAL_NVIC_EnableIRQ>
}
 8000532:	bf00      	nop
 8000534:	3730      	adds	r7, #48	@ 0x30
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40004400 	.word	0x40004400
 8000540:	40021000 	.word	0x40021000
 8000544:	40004800 	.word	0x40004800
 8000548:	48000400 	.word	0x48000400

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <NMI_Handler+0x4>

08000554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <MemManage_Handler+0x4>

08000564 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <UsageFault_Handler+0x4>

08000574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a2:	f000 f899 	bl	80006d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <USART2_IRQHandler+0x10>)
 80005b2:	f002 f96d 	bl	8002890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000028 	.word	0x20000028

080005c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <USART3_IRQHandler+0x10>)
 80005c6:	f002 f963 	bl	8002890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000b0 	.word	0x200000b0

080005d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <SystemInit+0x20>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005de:	4a05      	ldr	r2, [pc, #20]	@ (80005f4 <SystemInit+0x20>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000630 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005fc:	f7ff ffea 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 8000602:	490d      	ldr	r1, [pc, #52]	@ (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000604:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <LoopForever+0xe>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000618:	4c0a      	ldr	r4, [pc, #40]	@ (8000644 <LoopForever+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000626:	f003 f87b 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800062a:	f7ff fddb 	bl	80001e4 <main>

0800062e <LoopForever>:

LoopForever:
    b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000630:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800063c:	080037d0 	.word	0x080037d0
  ldr r2, =_sbss
 8000640:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000644:	2000013c 	.word	0x2000013c

08000648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_2_IRQHandler>
	...

0800064c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <HAL_Init+0x28>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a07      	ldr	r2, [pc, #28]	@ (8000674 <HAL_Init+0x28>)
 8000656:	f043 0310 	orr.w	r3, r3, #16
 800065a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f94f 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	200f      	movs	r0, #15
 8000664:	f000 f808 	bl	8000678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000668:	f7ff fec6 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40022000 	.word	0x40022000

08000678 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <HAL_InitTick+0x54>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <HAL_InitTick+0x58>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000692:	fbb2 f3f3 	udiv	r3, r2, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f967 	bl	800096a <HAL_SYSTICK_Config>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e00e      	b.n	80006c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b0f      	cmp	r3, #15
 80006aa:	d80a      	bhi.n	80006c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ac:	2200      	movs	r2, #0
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	f04f 30ff 	mov.w	r0, #4294967295
 80006b4:	f000 f92f 	bl	8000916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b8:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <HAL_InitTick+0x5c>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006be:	2300      	movs	r3, #0
 80006c0:	e000      	b.n	80006c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000004 	.word	0x20000004

080006d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <HAL_IncTick+0x20>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_IncTick+0x24>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	4a04      	ldr	r2, [pc, #16]	@ (80006fc <HAL_IncTick+0x24>)
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000138 	.word	0x20000138

08000700 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;  
 8000704:	4b03      	ldr	r3, [pc, #12]	@ (8000714 <HAL_GetTick+0x14>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000138 	.word	0x20000138

08000718 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000720:	f7ff ffee 	bl	8000700 <HAL_GetTick>
 8000724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000730:	d005      	beq.n	800073e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000732:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <HAL_Delay+0x44>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800073e:	bf00      	nop
 8000740:	f7ff ffde 	bl	8000700 <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	d8f7      	bhi.n	8000740 <HAL_Delay+0x28>
  {
  }
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000008 	.word	0x20000008

08000760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800078c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000792:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	60d3      	str	r3, [r2, #12]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	f003 0307 	and.w	r3, r3, #7
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db0b      	blt.n	80007ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f003 021f 	and.w	r2, r3, #31
 80007dc:	4907      	ldr	r1, [pc, #28]	@ (80007fc <__NVIC_EnableIRQ+0x38>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	2001      	movs	r0, #1
 80007e6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e100 	.word	0xe000e100

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	@ (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	@ (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	@ 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	@ 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008cc:	d301      	bcc.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <SysTick_Config+0x40>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	210f      	movs	r1, #15
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f7ff ff8e 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <SysTick_Config+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <SysTick_Config+0x40>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000e010 	.word	0xe000e010

08000900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff29 	bl	8000760 <__NVIC_SetPriorityGrouping>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff3e 	bl	80007a8 <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff8e 	bl	8000854 <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5d 	bl	8000800 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff31 	bl	80007c4 <__NVIC_EnableIRQ>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffa2 	bl	80008bc <SysTick_Config>
 8000978:	4603      	mov	r3, r0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e02e      	b.n	80009f2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800099a:	2b02      	cmp	r3, #2
 800099c:	d008      	beq.n	80009b0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2204      	movs	r2, #4
 80009a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e020      	b.n	80009f2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 020e 	bic.w	r2, r2, #14
 80009be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 0201 	bic.w	r2, r2, #1
 80009ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2201      	movs	r2, #1
 80009e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d005      	beq.n	8000a20 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2204      	movs	r2, #4
 8000a18:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	e027      	b.n	8000a70 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 020e 	bic.w	r2, r2, #14
 8000a2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f022 0201 	bic.w	r2, r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a48:	2101      	movs	r1, #1
 8000a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2201      	movs	r2, #1
 8000a54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	4798      	blx	r3
    }
  }
  return status;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b087      	sub	sp, #28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8a:	e160      	b.n	8000d4e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	2101      	movs	r1, #1
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f000 8152 	beq.w	8000d48 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d005      	beq.n	8000abc <HAL_GPIO_Init+0x40>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d130      	bne.n	8000b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000af2:	2201      	movs	r2, #1
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	091b      	lsrs	r3, r3, #4
 8000b08:	f003 0201 	and.w	r2, r3, #1
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d017      	beq.n	8000b5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	2203      	movs	r2, #3
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d123      	bne.n	8000bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	08da      	lsrs	r2, r3, #3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3208      	adds	r2, #8
 8000b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	691a      	ldr	r2, [r3, #16]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	08da      	lsrs	r2, r3, #3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3208      	adds	r2, #8
 8000ba8:	6939      	ldr	r1, [r7, #16]
 8000baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0203 	and.w	r2, r3, #3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 80ac 	beq.w	8000d48 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf0:	4b5e      	ldr	r3, [pc, #376]	@ (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a5d      	ldr	r2, [pc, #372]	@ (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c08:	4a59      	ldr	r2, [pc, #356]	@ (8000d70 <HAL_GPIO_Init+0x2f4>)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	089b      	lsrs	r3, r3, #2
 8000c0e:	3302      	adds	r3, #2
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	220f      	movs	r2, #15
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c32:	d025      	beq.n	8000c80 <HAL_GPIO_Init+0x204>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a4f      	ldr	r2, [pc, #316]	@ (8000d74 <HAL_GPIO_Init+0x2f8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d01f      	beq.n	8000c7c <HAL_GPIO_Init+0x200>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8000d78 <HAL_GPIO_Init+0x2fc>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d019      	beq.n	8000c78 <HAL_GPIO_Init+0x1fc>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a4d      	ldr	r2, [pc, #308]	@ (8000d7c <HAL_GPIO_Init+0x300>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d013      	beq.n	8000c74 <HAL_GPIO_Init+0x1f8>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000d80 <HAL_GPIO_Init+0x304>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1f4>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a4b      	ldr	r2, [pc, #300]	@ (8000d84 <HAL_GPIO_Init+0x308>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1f0>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8000d88 <HAL_GPIO_Init+0x30c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1ec>
 8000c64:	2306      	movs	r3, #6
 8000c66:	e00c      	b.n	8000c82 <HAL_GPIO_Init+0x206>
 8000c68:	2307      	movs	r3, #7
 8000c6a:	e00a      	b.n	8000c82 <HAL_GPIO_Init+0x206>
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	e008      	b.n	8000c82 <HAL_GPIO_Init+0x206>
 8000c70:	2304      	movs	r3, #4
 8000c72:	e006      	b.n	8000c82 <HAL_GPIO_Init+0x206>
 8000c74:	2303      	movs	r3, #3
 8000c76:	e004      	b.n	8000c82 <HAL_GPIO_Init+0x206>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e002      	b.n	8000c82 <HAL_GPIO_Init+0x206>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <HAL_GPIO_Init+0x206>
 8000c80:	2300      	movs	r3, #0
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	f002 0203 	and.w	r2, r2, #3
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	4093      	lsls	r3, r2
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c92:	4937      	ldr	r1, [pc, #220]	@ (8000d70 <HAL_GPIO_Init+0x2f4>)
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3302      	adds	r3, #2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d8c <HAL_GPIO_Init+0x310>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cc4:	4a31      	ldr	r2, [pc, #196]	@ (8000d8c <HAL_GPIO_Init+0x310>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cca:	4b30      	ldr	r3, [pc, #192]	@ (8000d8c <HAL_GPIO_Init+0x310>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cee:	4a27      	ldr	r2, [pc, #156]	@ (8000d8c <HAL_GPIO_Init+0x310>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cf4:	4b25      	ldr	r3, [pc, #148]	@ (8000d8c <HAL_GPIO_Init+0x310>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d18:	4a1c      	ldr	r2, [pc, #112]	@ (8000d8c <HAL_GPIO_Init+0x310>)
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <HAL_GPIO_Init+0x310>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <HAL_GPIO_Init+0x310>)
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa22 f303 	lsr.w	r3, r2, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f47f ae97 	bne.w	8000a8c <HAL_GPIO_Init+0x10>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	371c      	adds	r7, #28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	48000400 	.word	0x48000400
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	48000c00 	.word	0x48000c00
 8000d80:	48001000 	.word	0x48001000
 8000d84:	48001400 	.word	0x48001400
 8000d88:	48001800 	.word	0x48001800
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000da0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000da6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f001 b80a 	b.w	8001dca <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8161 	beq.w	800108e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dcc:	4bae      	ldr	r3, [pc, #696]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d00c      	beq.n	8000df2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dd8:	4bab      	ldr	r3, [pc, #684]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d157      	bne.n	8000e94 <HAL_RCC_OscConfig+0x104>
 8000de4:	4ba8      	ldr	r3, [pc, #672]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000df0:	d150      	bne.n	8000e94 <HAL_RCC_OscConfig+0x104>
 8000df2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000df6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e12:	d802      	bhi.n	8000e1a <HAL_RCC_OscConfig+0x8a>
 8000e14:	4b9c      	ldr	r3, [pc, #624]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	e015      	b.n	8000e46 <HAL_RCC_OscConfig+0xb6>
 8000e1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e1e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000e2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e32:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e36:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000e3a:	fa93 f3a3 	rbit	r3, r3
 8000e3e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e42:	4b91      	ldr	r3, [pc, #580]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e4a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e4e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000e52:	fa92 f2a2 	rbit	r2, r2
 8000e56:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000e5a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e5e:	fab2 f282 	clz	r2, r2
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	f042 0220 	orr.w	r2, r2, #32
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	f002 021f 	and.w	r2, r2, #31
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 8108 	beq.w	800108c <HAL_RCC_OscConfig+0x2fc>
 8000e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f040 80ff 	bne.w	800108c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f000 bf9b 	b.w	8001dca <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ea4:	d106      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x124>
 8000ea6:	4b78      	ldr	r3, [pc, #480]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a77      	ldr	r2, [pc, #476]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e036      	b.n	8000f22 <HAL_RCC_OscConfig+0x192>
 8000eb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10c      	bne.n	8000ede <HAL_RCC_OscConfig+0x14e>
 8000ec4:	4b70      	ldr	r3, [pc, #448]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a6f      	ldr	r2, [pc, #444]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b6d      	ldr	r3, [pc, #436]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a6c      	ldr	r2, [pc, #432]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	e021      	b.n	8000f22 <HAL_RCC_OscConfig+0x192>
 8000ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ee2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eee:	d10c      	bne.n	8000f0a <HAL_RCC_OscConfig+0x17a>
 8000ef0:	4b65      	ldr	r3, [pc, #404]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a64      	ldr	r2, [pc, #400]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000ef6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b62      	ldr	r3, [pc, #392]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a61      	ldr	r2, [pc, #388]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e00b      	b.n	8000f22 <HAL_RCC_OscConfig+0x192>
 8000f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b5c      	ldr	r3, [pc, #368]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000f1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d054      	beq.n	8000fdc <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fbe5 	bl	8000700 <HAL_GetTick>
 8000f36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3a:	e00a      	b.n	8000f52 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fbe0 	bl	8000700 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b64      	cmp	r3, #100	@ 0x64
 8000f4a:	d902      	bls.n	8000f52 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f000 bf3c 	b.w	8001dca <HAL_RCC_OscConfig+0x103a>
 8000f52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f56:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000f66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f72:	d802      	bhi.n	8000f7a <HAL_RCC_OscConfig+0x1ea>
 8000f74:	4b44      	ldr	r3, [pc, #272]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	e015      	b.n	8000fa6 <HAL_RCC_OscConfig+0x216>
 8000f7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f7e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000f8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f92:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f96:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000fa2:	4b39      	ldr	r3, [pc, #228]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000faa:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000fae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000fb2:	fa92 f2a2 	rbit	r2, r2
 8000fb6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000fba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000fbe:	fab2 f282 	clz	r2, r2
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	f042 0220 	orr.w	r2, r2, #32
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	f002 021f 	and.w	r2, r2, #31
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0b0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x1ac>
 8000fda:	e058      	b.n	800108e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fb90 	bl	8000700 <HAL_GetTick>
 8000fe0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fb8b 	bl	8000700 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	@ 0x64
 8000ff4:	d902      	bls.n	8000ffc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	f000 bee7 	b.w	8001dca <HAL_RCC_OscConfig+0x103a>
 8000ffc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001000:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001010:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b3f      	cmp	r3, #63	@ 0x3f
 800101c:	d802      	bhi.n	8001024 <HAL_RCC_OscConfig+0x294>
 800101e:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	e015      	b.n	8001050 <HAL_RCC_OscConfig+0x2c0>
 8001024:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001028:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001038:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800103c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001040:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_RCC_OscConfig+0x2f8>)
 800104e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001050:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001054:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001058:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800105c:	fa92 f2a2 	rbit	r2, r2
 8001060:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001064:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001068:	fab2 f282 	clz	r2, r2
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	f042 0220 	orr.w	r2, r2, #32
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f002 021f 	and.w	r2, r2, #31
 8001078:	2101      	movs	r1, #1
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1b0      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x256>
 8001084:	e003      	b.n	800108e <HAL_RCC_OscConfig+0x2fe>
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001092:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 816d 	beq.w	800137e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010a4:	4bcd      	ldr	r3, [pc, #820]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00c      	beq.n	80010ca <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010b0:	4bca      	ldr	r3, [pc, #808]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d16e      	bne.n	800119a <HAL_RCC_OscConfig+0x40a>
 80010bc:	4bc7      	ldr	r3, [pc, #796]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80010c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010c8:	d167      	bne.n	800119a <HAL_RCC_OscConfig+0x40a>
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80010dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e0:	fab3 f383 	clz	r3, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e8:	d802      	bhi.n	80010f0 <HAL_RCC_OscConfig+0x360>
 80010ea:	4bbc      	ldr	r3, [pc, #752]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	e013      	b.n	8001118 <HAL_RCC_OscConfig+0x388>
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001102:	2302      	movs	r3, #2
 8001104:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001108:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800110c:	fa93 f3a3 	rbit	r3, r3
 8001110:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001114:	4bb1      	ldr	r3, [pc, #708]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 8001116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001118:	2202      	movs	r2, #2
 800111a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800111e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001122:	fa92 f2a2 	rbit	r2, r2
 8001126:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800112a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800112e:	fab2 f282 	clz	r2, r2
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	f042 0220 	orr.w	r2, r2, #32
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	f002 021f 	and.w	r2, r2, #31
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	4013      	ands	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_RCC_OscConfig+0x3d0>
 800114a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800114e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d002      	beq.n	8001160 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	f000 be35 	b.w	8001dca <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b9e      	ldr	r3, [pc, #632]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800116c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	21f8      	movs	r1, #248	@ 0xf8
 8001176:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800117e:	fa91 f1a1 	rbit	r1, r1
 8001182:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001186:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800118a:	fab1 f181 	clz	r1, r1
 800118e:	b2c9      	uxtb	r1, r1
 8001190:	408b      	lsls	r3, r1
 8001192:	4992      	ldr	r1, [pc, #584]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001198:	e0f1      	b.n	800137e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800119e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8083 	beq.w	80012b2 <HAL_RCC_OscConfig+0x522>
 80011ac:	2301      	movs	r3, #1
 80011ae:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80011be:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	461a      	mov	r2, r3
 80011d4:	2301      	movs	r3, #1
 80011d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fa92 	bl	8000700 <HAL_GetTick>
 80011dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fa8d 	bl	8000700 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d902      	bls.n	80011f8 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f000 bde9 	b.w	8001dca <HAL_RCC_OscConfig+0x103a>
 80011f8:	2302      	movs	r3, #2
 80011fa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800120a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120e:	fab3 f383 	clz	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b3f      	cmp	r3, #63	@ 0x3f
 8001216:	d802      	bhi.n	800121e <HAL_RCC_OscConfig+0x48e>
 8001218:	4b70      	ldr	r3, [pc, #448]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	e013      	b.n	8001246 <HAL_RCC_OscConfig+0x4b6>
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001236:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001242:	4b66      	ldr	r3, [pc, #408]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001246:	2202      	movs	r2, #2
 8001248:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800124c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001250:	fa92 f2a2 	rbit	r2, r2
 8001254:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001258:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f042 0220 	orr.w	r2, r2, #32
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	f002 021f 	and.w	r2, r2, #31
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0b4      	beq.n	80011e2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001278:	4b58      	ldr	r3, [pc, #352]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001284:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	21f8      	movs	r1, #248	@ 0xf8
 800128e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001296:	fa91 f1a1 	rbit	r1, r1
 800129a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800129e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80012a2:	fab1 f181 	clz	r1, r1
 80012a6:	b2c9      	uxtb	r1, r1
 80012a8:	408b      	lsls	r3, r1
 80012aa:	494c      	ldr	r1, [pc, #304]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	e065      	b.n	800137e <HAL_RCC_OscConfig+0x5ee>
 80012b2:	2301      	movs	r3, #1
 80012b4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80012c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c8:	fab3 f383 	clz	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	461a      	mov	r2, r3
 80012da:	2300      	movs	r3, #0
 80012dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fa0f 	bl	8000700 <HAL_GetTick>
 80012e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fa0a 	bl	8000700 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d902      	bls.n	80012fe <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f000 bd66 	b.w	8001dca <HAL_RCC_OscConfig+0x103a>
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001304:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001310:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b3f      	cmp	r3, #63	@ 0x3f
 800131c:	d802      	bhi.n	8001324 <HAL_RCC_OscConfig+0x594>
 800131e:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	e013      	b.n	800134c <HAL_RCC_OscConfig+0x5bc>
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800133c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001348:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <HAL_RCC_OscConfig+0x64c>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134c:	2202      	movs	r2, #2
 800134e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001352:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001356:	fa92 f2a2 	rbit	r2, r2
 800135a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800135e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001362:	fab2 f282 	clz	r2, r2
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	f042 0220 	orr.w	r2, r2, #32
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	f002 021f 	and.w	r2, r2, #31
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f202 	lsl.w	r2, r1, r2
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1b4      	bne.n	80012e8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001382:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8119 	beq.w	80015c6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001398:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8082 	beq.w	80014aa <HAL_RCC_OscConfig+0x71a>
 80013a6:	2301      	movs	r3, #1
 80013a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80013b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013bc:	fab3 f383 	clz	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_RCC_OscConfig+0x650>)
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	461a      	mov	r2, r3
 80013cc:	2301      	movs	r3, #1
 80013ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff f996 	bl	8000700 <HAL_GetTick>
 80013d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d8:	e00f      	b.n	80013fa <HAL_RCC_OscConfig+0x66a>
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff f98c 	bl	8000700 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d902      	bls.n	80013fa <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f000 bce8 	b.w	8001dca <HAL_RCC_OscConfig+0x103a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001404:	fa93 f2a3 	rbit	r2, r3
 8001408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800140c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800141a:	2202      	movs	r2, #2
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fa93 f2a3 	rbit	r2, r3
 800142c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800143e:	2202      	movs	r2, #2
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001446:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	fa93 f2a3 	rbit	r2, r3
 8001450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001454:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001458:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	4bb0      	ldr	r3, [pc, #704]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 800145c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800145e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001462:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001466:	2102      	movs	r1, #2
 8001468:	6019      	str	r1, [r3, #0]
 800146a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800146e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	fa93 f1a3 	rbit	r1, r3
 8001478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001480:	6019      	str	r1, [r3, #0]
  return result;
 8001482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001486:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	2101      	movs	r1, #1
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d09d      	beq.n	80013e4 <HAL_RCC_OscConfig+0x654>
 80014a8:	e08d      	b.n	80015c6 <HAL_RCC_OscConfig+0x836>
 80014aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	fa93 f2a3 	rbit	r2, r3
 80014c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014cc:	601a      	str	r2, [r3, #0]
  return result;
 80014ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	fab3 f383 	clz	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001720 <HAL_RCC_OscConfig+0x990>)
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	461a      	mov	r2, r3
 80014e8:	2300      	movs	r3, #0
 80014ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff f908 	bl	8000700 <HAL_GetTick>
 80014f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff f903 	bl	8000700 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d902      	bls.n	800150c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	f000 bc5f 	b.w	8001dca <HAL_RCC_OscConfig+0x103a>
 800150c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001510:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001514:	2202      	movs	r2, #2
 8001516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fa93 f2a3 	rbit	r2, r3
 8001526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001534:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001538:	2202      	movs	r2, #2
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001540:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001558:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800155c:	2202      	movs	r2, #2
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001564:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fa93 f2a3 	rbit	r2, r3
 800156e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001572:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001576:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	4b68      	ldr	r3, [pc, #416]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 800157a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800157c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001580:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001584:	2102      	movs	r1, #2
 8001586:	6019      	str	r1, [r3, #0]
 8001588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	fa93 f1a3 	rbit	r1, r3
 8001596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800159a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800159e:	6019      	str	r1, [r3, #0]
  return result;
 80015a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fab3 f383 	clz	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d197      	bne.n	80014f6 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 819c 	beq.w	8001914 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e2:	4b4e      	ldr	r3, [pc, #312]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b4b      	ldr	r3, [pc, #300]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a4a      	ldr	r2, [pc, #296]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b48      	ldr	r3, [pc, #288]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001614:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <HAL_RCC_OscConfig+0x994>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d11a      	bne.n	800165e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001628:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <HAL_RCC_OscConfig+0x994>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a3d      	ldr	r2, [pc, #244]	@ (8001724 <HAL_RCC_OscConfig+0x994>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001632:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001634:	f7ff f864 	bl	8000700 <HAL_GetTick>
 8001638:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	e009      	b.n	8001652 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff f85f 	bl	8000700 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	@ 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e3bb      	b.n	8001dca <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	4b34      	ldr	r3, [pc, #208]	@ (8001724 <HAL_RCC_OscConfig+0x994>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0ef      	beq.n	800163e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001662:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d106      	bne.n	800167c <HAL_RCC_OscConfig+0x8ec>
 800166e:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a2a      	ldr	r2, [pc, #168]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	e035      	b.n	80016e8 <HAL_RCC_OscConfig+0x958>
 800167c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001680:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x916>
 800168c:	4b23      	ldr	r3, [pc, #140]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a22      	ldr	r2, [pc, #136]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	4b20      	ldr	r3, [pc, #128]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 800169e:	f023 0304 	bic.w	r3, r3, #4
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	e020      	b.n	80016e8 <HAL_RCC_OscConfig+0x958>
 80016a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x940>
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a18      	ldr	r2, [pc, #96]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a15      	ldr	r2, [pc, #84]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0x958>
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a11      	ldr	r2, [pc, #68]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <HAL_RCC_OscConfig+0x98c>)
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8085 	beq.w	8001804 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff f801 	bl	8000700 <HAL_GetTick>
 80016fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	e011      	b.n	8001728 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7fe fffc 	bl	8000700 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d907      	bls.n	8001728 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e356      	b.n	8001dca <HAL_RCC_OscConfig+0x103a>
 800171c:	40021000 	.word	0x40021000
 8001720:	10908120 	.word	0x10908120
 8001724:	40007000 	.word	0x40007000
 8001728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001730:	2202      	movs	r2, #2
 8001732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001738:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001746:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001750:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001754:	2202      	movs	r2, #2
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	fa93 f2a3 	rbit	r2, r3
 8001766:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800176e:	601a      	str	r2, [r3, #0]
  return result;
 8001770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001774:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001778:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <HAL_RCC_OscConfig+0xa00>
 800178a:	4b98      	ldr	r3, [pc, #608]	@ (80019ec <HAL_RCC_OscConfig+0xc5c>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	e013      	b.n	80017b8 <HAL_RCC_OscConfig+0xa28>
 8001790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001794:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ae:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	4b8d      	ldr	r3, [pc, #564]	@ (80019ec <HAL_RCC_OscConfig+0xc5c>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017bc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017c0:	2102      	movs	r1, #2
 80017c2:	6011      	str	r1, [r2, #0]
 80017c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017c8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	fa92 f1a2 	rbit	r1, r2
 80017d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017d6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017da:	6011      	str	r1, [r2, #0]
  return result;
 80017dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017e0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	fab2 f282 	clz	r2, r2
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	f002 021f 	and.w	r2, r2, #31
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d080      	beq.n	8001704 <HAL_RCC_OscConfig+0x974>
 8001802:	e07d      	b.n	8001900 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7fe ff7c 	bl	8000700 <HAL_GetTick>
 8001808:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	e00b      	b.n	8001826 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7fe ff77 	bl	8000700 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e2d1      	b.n	8001dca <HAL_RCC_OscConfig+0x103a>
 8001826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800182a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800182e:	2202      	movs	r2, #2
 8001830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001836:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001844:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800185a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001868:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800186c:	601a      	str	r2, [r3, #0]
  return result;
 800186e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001872:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001876:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <HAL_RCC_OscConfig+0xafe>
 8001888:	4b58      	ldr	r3, [pc, #352]	@ (80019ec <HAL_RCC_OscConfig+0xc5c>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	e013      	b.n	80018b6 <HAL_RCC_OscConfig+0xb26>
 800188e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001892:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001896:	2202      	movs	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fa93 f2a3 	rbit	r2, r3
 80018a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ac:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	4b4e      	ldr	r3, [pc, #312]	@ (80019ec <HAL_RCC_OscConfig+0xc5c>)
 80018b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018be:	2102      	movs	r1, #2
 80018c0:	6011      	str	r1, [r2, #0]
 80018c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	fa92 f1a2 	rbit	r1, r2
 80018d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018d4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018d8:	6011      	str	r1, [r2, #0]
  return result;
 80018da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018de:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	fab2 f282 	clz	r2, r2
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	f002 021f 	and.w	r2, r2, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d186      	bne.n	800180e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001900:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b38      	ldr	r3, [pc, #224]	@ (80019ec <HAL_RCC_OscConfig+0xc5c>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4a37      	ldr	r2, [pc, #220]	@ (80019ec <HAL_RCC_OscConfig+0xc5c>)
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001912:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001914:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001918:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 8251 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001926:	4b31      	ldr	r3, [pc, #196]	@ (80019ec <HAL_RCC_OscConfig+0xc5c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b08      	cmp	r3, #8
 8001930:	f000 820f 	beq.w	8001d52 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001938:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b02      	cmp	r3, #2
 8001942:	f040 8165 	bne.w	8001c10 <HAL_RCC_OscConfig+0xe80>
 8001946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800194e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001958:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001966:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800196a:	601a      	str	r2, [r3, #0]
  return result;
 800196c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001970:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001974:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001980:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2300      	movs	r3, #0
 800198a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe feb8 	bl	8000700 <HAL_GetTick>
 8001990:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001994:	e009      	b.n	80019aa <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001996:	f7fe feb3 	bl	8000700 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e20f      	b.n	8001dca <HAL_RCC_OscConfig+0x103a>
 80019aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019ce:	601a      	str	r2, [r3, #0]
  return result;
 80019d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80019e2:	d805      	bhi.n	80019f0 <HAL_RCC_OscConfig+0xc60>
 80019e4:	4b01      	ldr	r3, [pc, #4]	@ (80019ec <HAL_RCC_OscConfig+0xc5c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e02a      	b.n	8001a40 <HAL_RCC_OscConfig+0xcb0>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a02:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a10:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a28:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a36:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	4bca      	ldr	r3, [pc, #808]	@ (8001d68 <HAL_RCC_OscConfig+0xfd8>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a44:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a48:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a4c:	6011      	str	r1, [r2, #0]
 8001a4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a52:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	fa92 f1a2 	rbit	r1, r2
 8001a5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a60:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a64:	6011      	str	r1, [r2, #0]
  return result;
 8001a66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a6a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	fab2 f282 	clz	r2, r2
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f042 0220 	orr.w	r2, r2, #32
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f002 021f 	and.w	r2, r2, #31
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d184      	bne.n	8001996 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8c:	4bb6      	ldr	r3, [pc, #728]	@ (8001d68 <HAL_RCC_OscConfig+0xfd8>)
 8001a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a90:	f023 020f 	bic.w	r2, r3, #15
 8001a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	49b1      	ldr	r1, [pc, #708]	@ (8001d68 <HAL_RCC_OscConfig+0xfd8>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001aa6:	4bb0      	ldr	r3, [pc, #704]	@ (8001d68 <HAL_RCC_OscConfig+0xfd8>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001aae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a19      	ldr	r1, [r3, #32]
 8001aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001abe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	49a7      	ldr	r1, [pc, #668]	@ (8001d68 <HAL_RCC_OscConfig+0xfd8>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
 8001ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ad6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001af2:	601a      	str	r2, [r3, #0]
  return result;
 8001af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001afc:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2301      	movs	r3, #1
 8001b12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7fe fdf4 	bl	8000700 <HAL_GetTick>
 8001b18:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	e009      	b.n	8001b32 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7fe fdef 	bl	8000700 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e14b      	b.n	8001dca <HAL_RCC_OscConfig+0x103a>
 8001b32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b36:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b44:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fa93 f2a3 	rbit	r2, r3
 8001b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b52:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b56:	601a      	str	r2, [r3, #0]
  return result;
 8001b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b6a:	d802      	bhi.n	8001b72 <HAL_RCC_OscConfig+0xde2>
 8001b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d68 <HAL_RCC_OscConfig+0xfd8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	e027      	b.n	8001bc2 <HAL_RCC_OscConfig+0xe32>
 8001b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b76:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fa93 f2a3 	rbit	r2, r3
 8001b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b92:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001ba0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001baa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8001d68 <HAL_RCC_OscConfig+0xfd8>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bc6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bce:	6011      	str	r1, [r2, #0]
 8001bd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bd4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	fa92 f1a2 	rbit	r1, r2
 8001bde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001be2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001be6:	6011      	str	r1, [r2, #0]
  return result;
 8001be8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bec:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	fab2 f282 	clz	r2, r2
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f042 0220 	orr.w	r2, r2, #32
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f002 021f 	and.w	r2, r2, #31
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d087      	beq.n	8001b1e <HAL_RCC_OscConfig+0xd8e>
 8001c0e:	e0db      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1038>
 8001c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c22:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c30:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c34:	601a      	str	r2, [r3, #0]
  return result;
 8001c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c3e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c4a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	461a      	mov	r2, r3
 8001c52:	2300      	movs	r3, #0
 8001c54:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7fe fd53 	bl	8000700 <HAL_GetTick>
 8001c5a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5e:	e009      	b.n	8001c74 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c60:	f7fe fd4e 	bl	8000700 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0aa      	b.n	8001dca <HAL_RCC_OscConfig+0x103a>
 8001c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c86:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fa93 f2a3 	rbit	r2, r3
 8001c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c94:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c98:	601a      	str	r2, [r3, #0]
  return result;
 8001c9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ca2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cac:	d802      	bhi.n	8001cb4 <HAL_RCC_OscConfig+0xf24>
 8001cae:	4b2e      	ldr	r3, [pc, #184]	@ (8001d68 <HAL_RCC_OscConfig+0xfd8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	e027      	b.n	8001d04 <HAL_RCC_OscConfig+0xf74>
 8001cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	fa93 f2a3 	rbit	r2, r3
 8001cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cde:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ce2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f2a3 	rbit	r2, r3
 8001cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfa:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_RCC_OscConfig+0xfd8>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d08:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d10:	6011      	str	r1, [r2, #0]
 8001d12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d16:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	fa92 f1a2 	rbit	r1, r2
 8001d20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d24:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d28:	6011      	str	r1, [r2, #0]
  return result;
 8001d2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d2e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d187      	bne.n	8001c60 <HAL_RCC_OscConfig+0xed0>
 8001d50:	e03a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d104      	bne.n	8001d6c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e031      	b.n	8001dca <HAL_RCC_OscConfig+0x103a>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_RCC_OscConfig+0x1044>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d74:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <HAL_RCC_OscConfig+0x1044>)
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d80:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d117      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d98:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d10b      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b09e      	sub	sp, #120	@ 0x78
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e154      	b.n	800209a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b89      	ldr	r3, [pc, #548]	@ (8002018 <HAL_RCC_ClockConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b86      	ldr	r3, [pc, #536]	@ (8002018 <HAL_RCC_ClockConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	4984      	ldr	r1, [pc, #528]	@ (8002018 <HAL_RCC_ClockConfig+0x240>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b82      	ldr	r3, [pc, #520]	@ (8002018 <HAL_RCC_ClockConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e13c      	b.n	800209a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4b7b      	ldr	r3, [pc, #492]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4978      	ldr	r1, [pc, #480]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80cd 	beq.w	8001fe6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d137      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xec>
 8001e54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e58:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e6c:	d802      	bhi.n	8001e74 <HAL_RCC_ClockConfig+0x9c>
 8001e6e:	4b6b      	ldr	r3, [pc, #428]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_ClockConfig+0xbc>
 8001e74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e86:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e90:	4b62      	ldr	r3, [pc, #392]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e9c:	fa92 f2a2 	rbit	r2, r2
 8001ea0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001ea2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ea4:	fab2 f282 	clz	r2, r2
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f002 021f 	and.w	r2, r2, #31
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d171      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0ea      	b.n	800209a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d137      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x164>
 8001ecc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ee4:	d802      	bhi.n	8001eec <HAL_RCC_ClockConfig+0x114>
 8001ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_ClockConfig+0x134>
 8001eec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001efa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001efe:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f08:	4b44      	ldr	r3, [pc, #272]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f10:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f14:	fa92 f2a2 	rbit	r2, r2
 8001f18:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f1c:	fab2 f282 	clz	r2, r2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f002 021f 	and.w	r2, r2, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d135      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0ae      	b.n	800209a <HAL_RCC_ClockConfig+0x2c2>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f52:	d802      	bhi.n	8001f5a <HAL_RCC_ClockConfig+0x182>
 8001f54:	4b31      	ldr	r3, [pc, #196]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	e00d      	b.n	8001f76 <HAL_RCC_ClockConfig+0x19e>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f66:	2302      	movs	r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	2202      	movs	r2, #2
 8001f78:	61ba      	str	r2, [r7, #24]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	fa92 f2a2 	rbit	r2, r2
 8001f80:	617a      	str	r2, [r7, #20]
  return result;
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	fab2 f282 	clz	r2, r2
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f042 0220 	orr.w	r2, r2, #32
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f002 021f 	and.w	r2, r2, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e07a      	b.n	800209a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 0203 	bic.w	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	491a      	ldr	r1, [pc, #104]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb6:	f7fe fba3 	bl	8000700 <HAL_GetTick>
 8001fba:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbe:	f7fe fb9f 	bl	8000700 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e062      	b.n	800209a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 020c 	and.w	r2, r3, #12
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d1eb      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <HAL_RCC_ClockConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d215      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff4:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <HAL_RCC_ClockConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	4906      	ldr	r1, [pc, #24]	@ (8002018 <HAL_RCC_ClockConfig+0x240>)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <HAL_RCC_ClockConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d006      	beq.n	8002020 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e041      	b.n	800209a <HAL_RCC_ClockConfig+0x2c2>
 8002016:	bf00      	nop
 8002018:	40022000 	.word	0x40022000
 800201c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_RCC_ClockConfig+0x2cc>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	491a      	ldr	r1, [pc, #104]	@ (80020a4 <HAL_RCC_ClockConfig+0x2cc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204a:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <HAL_RCC_ClockConfig+0x2cc>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4912      	ldr	r1, [pc, #72]	@ (80020a4 <HAL_RCC_ClockConfig+0x2cc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800205e:	f000 f829 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002062:	4601      	mov	r1, r0
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <HAL_RCC_ClockConfig+0x2cc>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800206c:	22f0      	movs	r2, #240	@ 0xf0
 800206e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	fa92 f2a2 	rbit	r2, r2
 8002076:	60fa      	str	r2, [r7, #12]
  return result;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	fab2 f282 	clz	r2, r2
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	40d3      	lsrs	r3, r2
 8002082:	4a09      	ldr	r2, [pc, #36]	@ (80020a8 <HAL_RCC_ClockConfig+0x2d0>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	fa21 f303 	lsr.w	r3, r1, r3
 800208a:	4a08      	ldr	r2, [pc, #32]	@ (80020ac <HAL_RCC_ClockConfig+0x2d4>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_RCC_ClockConfig+0x2d8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe faf0 	bl	8000678 <HAL_InitTick>
  
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3778      	adds	r7, #120	@ 0x78
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08003788 	.word	0x08003788
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000004 	.word	0x20000004

080020b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <HAL_RCC_GetSysClockFreq+0x98>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x30>
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x36>
 80020e2:	e029      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020e6:	613b      	str	r3, [r7, #16]
      break;
 80020e8:	e029      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	0c9b      	lsrs	r3, r3, #18
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <HAL_RCC_GetSysClockFreq+0x98>)
 80020fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	4a15      	ldr	r2, [pc, #84]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002110:	4a0f      	ldr	r2, [pc, #60]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	fbb2 f2f3 	udiv	r2, r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e007      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002122:	4a0b      	ldr	r2, [pc, #44]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	fbb2 f2f3 	udiv	r2, r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	613b      	str	r3, [r7, #16]
      break;
 8002136:	e002      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x9c>)
 800213a:	613b      	str	r3, [r7, #16]
      break;
 800213c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213e:	693b      	ldr	r3, [r7, #16]
}
 8002140:	4618      	mov	r0, r3
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40021000 	.word	0x40021000
 8002150:	007a1200 	.word	0x007a1200
 8002154:	080037a0 	.word	0x080037a0
 8002158:	080037b0 	.word	0x080037b0

0800215c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_RCC_GetHCLKFreq+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000000 	.word	0x20000000

08002174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800217a:	f7ff ffef 	bl	800215c <HAL_RCC_GetHCLKFreq>
 800217e:	4601      	mov	r1, r0
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002188:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800218c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	fa92 f2a2 	rbit	r2, r2
 8002194:	603a      	str	r2, [r7, #0]
  return result;
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	fab2 f282 	clz	r2, r2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	40d3      	lsrs	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08003798 	.word	0x08003798

080021b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021be:	f7ff ffcd 	bl	800215c <HAL_RCC_GetHCLKFreq>
 80021c2:	4601      	mov	r1, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80021cc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80021d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	fa92 f2a2 	rbit	r2, r2
 80021d8:	603a      	str	r2, [r7, #0]
  return result;
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	fab2 f282 	clz	r2, r2
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	40d3      	lsrs	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08003798 	.word	0x08003798

080021fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b092      	sub	sp, #72	@ 0x48
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80d2 	beq.w	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002220:	4b4d      	ldr	r3, [pc, #308]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10e      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	4a49      	ldr	r2, [pc, #292]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002236:	61d3      	str	r3, [r2, #28]
 8002238:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002244:	2301      	movs	r3, #1
 8002246:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	4b44      	ldr	r3, [pc, #272]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002256:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a40      	ldr	r2, [pc, #256]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002260:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002262:	f7fe fa4d 	bl	8000700 <HAL_GetTick>
 8002266:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	e008      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7fe fa49 	bl	8000700 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	@ 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1d4      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	4b37      	ldr	r3, [pc, #220]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002288:	4b33      	ldr	r3, [pc, #204]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002290:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8082 	beq.w	800239e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d07a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b25      	ldr	r3, [pc, #148]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	461a      	mov	r2, r3
 80022d2:	2301      	movs	r3, #1
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	461a      	mov	r2, r3
 80022f6:	2300      	movs	r3, #0
 80022f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022fa:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d049      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe f9f9 	bl	8000700 <HAL_GetTick>
 800230e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe f9f5 	bl	8000700 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e17e      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002328:	2302      	movs	r3, #2
 800232a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
 8002334:	2302      	movs	r3, #2
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	61fb      	str	r3, [r7, #28]
  return result;
 8002340:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d108      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002352:	4b01      	ldr	r3, [pc, #4]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	e00d      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
 8002360:	10908100 	.word	0x10908100
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	4b9a      	ldr	r3, [pc, #616]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	2202      	movs	r2, #2
 8002376:	613a      	str	r2, [r7, #16]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	fa92 f2a2 	rbit	r2, r2
 800237e:	60fa      	str	r2, [r7, #12]
  return result;
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	fab2 f282 	clz	r2, r2
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f002 021f 	and.w	r2, r2, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0b9      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800239e:	4b8f      	ldr	r3, [pc, #572]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	498c      	ldr	r1, [pc, #560]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d105      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b8:	4b88      	ldr	r3, [pc, #544]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	4a87      	ldr	r2, [pc, #540]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d0:	4b82      	ldr	r3, [pc, #520]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	f023 0203 	bic.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	497f      	ldr	r1, [pc, #508]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ee:	4b7b      	ldr	r3, [pc, #492]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4978      	ldr	r1, [pc, #480]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800240c:	4b73      	ldr	r3, [pc, #460]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002410:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4970      	ldr	r1, [pc, #448]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800242a:	4b6c      	ldr	r3, [pc, #432]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f023 0210 	bic.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4969      	ldr	r1, [pc, #420]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002438:	4313      	orrs	r3, r2
 800243a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002448:	4b64      	ldr	r3, [pc, #400]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002454:	4961      	ldr	r1, [pc, #388]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002466:	4b5d      	ldr	r3, [pc, #372]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	f023 0220 	bic.w	r2, r3, #32
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	495a      	ldr	r1, [pc, #360]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002484:	4b55      	ldr	r3, [pc, #340]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	4952      	ldr	r1, [pc, #328]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002492:	4313      	orrs	r3, r2
 8002494:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024a2:	4b4e      	ldr	r3, [pc, #312]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	494b      	ldr	r1, [pc, #300]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024c0:	4b46      	ldr	r3, [pc, #280]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4943      	ldr	r1, [pc, #268]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024de:	4b3f      	ldr	r3, [pc, #252]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	493c      	ldr	r1, [pc, #240]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024fc:	4b37      	ldr	r3, [pc, #220]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	4934      	ldr	r1, [pc, #208]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250a:	4313      	orrs	r3, r2
 800250c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800251a:	4b30      	ldr	r3, [pc, #192]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	492d      	ldr	r1, [pc, #180]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002528:	4313      	orrs	r3, r2
 800252a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002544:	4925      	ldr	r1, [pc, #148]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002546:	4313      	orrs	r3, r2
 8002548:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002556:	4b21      	ldr	r3, [pc, #132]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	491e      	ldr	r1, [pc, #120]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002574:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002578:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002580:	4916      	ldr	r1, [pc, #88]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002582:	4313      	orrs	r3, r2
 8002584:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259e:	490f      	ldr	r1, [pc, #60]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025bc:	4907      	ldr	r1, [pc, #28]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025ce:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	e002      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e2:	4913      	ldr	r1, [pc, #76]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002600:	490b      	ldr	r1, [pc, #44]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002602:	4313      	orrs	r3, r2
 8002604:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002612:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261e:	4904      	ldr	r1, [pc, #16]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002620:	4313      	orrs	r3, r2
 8002622:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3748      	adds	r7, #72	@ 0x48
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e040      	b.n	80026c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fd fef2 	bl	8000440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	@ 0x24
 8002660:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fde2 	bl	8003244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fc0b 	bl	8002e9c <UART_SetConfig>
 8002686:	4603      	mov	r3, r0
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e01b      	b.n	80026c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800269e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fe61 	bl	8003388 <UART_CheckIdleState>
 80026c6:	4603      	mov	r3, r0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e048      	b.n	8002774 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fd fea4 	bl	8000440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	@ 0x24
 80026fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fd94 	bl	8003244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fbbd 	bl	8002e9c <UART_SetConfig>
 8002722:	4603      	mov	r3, r0
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e023      	b.n	8002774 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800273a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800274a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0208 	orr.w	r2, r2, #8
 800275a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fe0b 	bl	8003388 <UART_CheckIdleState>
 8002772:	4603      	mov	r3, r0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	@ 0x28
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002790:	2b20      	cmp	r3, #32
 8002792:	d177      	bne.n	8002884 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_UART_Transmit+0x24>
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e070      	b.n	8002886 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2221      	movs	r2, #33	@ 0x21
 80027b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b2:	f7fd ffa5 	bl	8000700 <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d0:	d108      	bne.n	80027e4 <HAL_UART_Transmit+0x68>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d104      	bne.n	80027e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e003      	b.n	80027ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027ec:	e02f      	b.n	800284e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	2180      	movs	r1, #128	@ 0x80
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fe6d 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e03b      	b.n	8002886 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	b292      	uxth	r2, r2
 8002822:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	3302      	adds	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e007      	b.n	800283c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3301      	adds	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1c9      	bne.n	80027ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2140      	movs	r1, #64	@ 0x40
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fe37 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e005      	b.n	8002886 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b0ba      	sub	sp, #232	@ 0xe8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80028ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80028be:	4013      	ands	r3, r2
 80028c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80028c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d115      	bne.n	80028f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00f      	beq.n	80028f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 82ab 	beq.w	8002e44 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
      }
      return;
 80028f6:	e2a5      	b.n	8002e44 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8117 	beq.w	8002b30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800290e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002912:	4b85      	ldr	r3, [pc, #532]	@ (8002b28 <HAL_UART_IRQHandler+0x298>)
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 810a 	beq.w	8002b30 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800291c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d011      	beq.n	800294c <HAL_UART_IRQHandler+0xbc>
 8002928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800292c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800294c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d011      	beq.n	800297c <HAL_UART_IRQHandler+0xec>
 8002958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2202      	movs	r2, #2
 800296a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002972:	f043 0204 	orr.w	r2, r3, #4
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800297c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d011      	beq.n	80029ac <HAL_UART_IRQHandler+0x11c>
 8002988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2204      	movs	r2, #4
 800299a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029a2:	f043 0202 	orr.w	r2, r3, #2
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d017      	beq.n	80029e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2208      	movs	r2, #8
 80029d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029de:	f043 0208 	orr.w	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d012      	beq.n	8002a1a <HAL_UART_IRQHandler+0x18a>
 80029f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00c      	beq.n	8002a1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8211 	beq.w	8002e48 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a62:	2b40      	cmp	r3, #64	@ 0x40
 8002a64:	d005      	beq.n	8002a72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d04f      	beq.n	8002b12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fd9d 	bl	80035b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a82:	2b40      	cmp	r3, #64	@ 0x40
 8002a84:	d141      	bne.n	8002b0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3308      	adds	r3, #8
 8002aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1d9      	bne.n	8002a86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ade:	4a13      	ldr	r2, [pc, #76]	@ (8002b2c <HAL_UART_IRQHandler+0x29c>)
 8002ae0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd ff89 	bl	80009fe <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f9b4 	bl	8002e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f9b0 	bl	8002e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f9ac 	bl	8002e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002b20:	e192      	b.n	8002e48 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e190      	b.n	8002e48 <HAL_UART_IRQHandler+0x5b8>
 8002b26:	bf00      	nop
 8002b28:	04000120 	.word	0x04000120
 8002b2c:	0800367b 	.word	0x0800367b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 814b 	bne.w	8002dd0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8144 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 813d 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b68:	2b40      	cmp	r3, #64	@ 0x40
 8002b6a:	f040 80b5 	bne.w	8002cd8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8164 	beq.w	8002e4c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	f080 815c 	bcs.w	8002e4c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	f000 8086 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bb6:	e853 3f00 	ldrex	r3, [r3]
 8002bba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002bbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bd8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bdc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002be0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1da      	bne.n	8002baa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bfe:	e853 3f00 	ldrex	r3, [r3]
 8002c02:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3308      	adds	r3, #8
 8002c14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c18:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c20:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e1      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3308      	adds	r3, #8
 8002c36:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c3a:	e853 3f00 	ldrex	r3, [r3]
 8002c3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3308      	adds	r3, #8
 8002c50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c54:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c56:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c58:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c5a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c5c:	e841 2300 	strex	r3, r2, [r1]
 8002c60:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e3      	bne.n	8002c30 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c86:	f023 0310 	bic.w	r3, r3, #16
 8002c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c9a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e4      	bne.n	8002c76 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fe66 	bl	8000982 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8d7 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cd6:	e0b9      	b.n	8002e4c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80ab 	beq.w	8002e50 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80a6 	beq.w	8002e50 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d28:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e4      	bne.n	8002d04 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3308      	adds	r3, #8
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	623b      	str	r3, [r7, #32]
   return(result);
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3308      	adds	r3, #8
 8002d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d66:	e841 2300 	strex	r3, r2, [r1]
 8002d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e3      	bne.n	8002d3a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	e853 3f00 	ldrex	r3, [r3]
 8002d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0310 	bic.w	r3, r3, #16
 8002d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	69b9      	ldr	r1, [r7, #24]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	617b      	str	r3, [r7, #20]
   return(result);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e4      	bne.n	8002d86 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f85b 	bl	8002e84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dce:	e03f      	b.n	8002e50 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00e      	beq.n	8002dfa <HAL_UART_IRQHandler+0x56a>
 8002ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002df0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fc81 	bl	80036fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002df8:	e02d      	b.n	8002e56 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00e      	beq.n	8002e24 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01c      	beq.n	8002e54 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
    }
    return;
 8002e22:	e017      	b.n	8002e54 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d012      	beq.n	8002e56 <HAL_UART_IRQHandler+0x5c6>
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00c      	beq.n	8002e56 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fc32 	bl	80036a6 <UART_EndTransmit_IT>
    return;
 8002e42:	e008      	b.n	8002e56 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e44:	bf00      	nop
 8002e46:	e006      	b.n	8002e56 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e48:	bf00      	nop
 8002e4a:	e004      	b.n	8002e56 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e4c:	bf00      	nop
 8002e4e:	e002      	b.n	8002e56 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e50:	bf00      	nop
 8002e52:	e000      	b.n	8002e56 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e54:	bf00      	nop
  }

}
 8002e56:	37e8      	adds	r7, #232	@ 0xe8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b92      	ldr	r3, [pc, #584]	@ (8003110 <UART_SetConfig+0x274>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a80      	ldr	r2, [pc, #512]	@ (8003114 <UART_SetConfig+0x278>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d120      	bne.n	8002f5a <UART_SetConfig+0xbe>
 8002f18:	4b7f      	ldr	r3, [pc, #508]	@ (8003118 <UART_SetConfig+0x27c>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d817      	bhi.n	8002f54 <UART_SetConfig+0xb8>
 8002f24:	a201      	add	r2, pc, #4	@ (adr r2, 8002f2c <UART_SetConfig+0x90>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f49 	.word	0x08002f49
 8002f34:	08002f4f 	.word	0x08002f4f
 8002f38:	08002f43 	.word	0x08002f43
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e0b5      	b.n	80030ae <UART_SetConfig+0x212>
 8002f42:	2302      	movs	r3, #2
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e0b2      	b.n	80030ae <UART_SetConfig+0x212>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e0af      	b.n	80030ae <UART_SetConfig+0x212>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e0ac      	b.n	80030ae <UART_SetConfig+0x212>
 8002f54:	2310      	movs	r3, #16
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e0a9      	b.n	80030ae <UART_SetConfig+0x212>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800311c <UART_SetConfig+0x280>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d124      	bne.n	8002fae <UART_SetConfig+0x112>
 8002f64:	4b6c      	ldr	r3, [pc, #432]	@ (8003118 <UART_SetConfig+0x27c>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f70:	d011      	beq.n	8002f96 <UART_SetConfig+0xfa>
 8002f72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f76:	d817      	bhi.n	8002fa8 <UART_SetConfig+0x10c>
 8002f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f7c:	d011      	beq.n	8002fa2 <UART_SetConfig+0x106>
 8002f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f82:	d811      	bhi.n	8002fa8 <UART_SetConfig+0x10c>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <UART_SetConfig+0xf4>
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8c:	d006      	beq.n	8002f9c <UART_SetConfig+0x100>
 8002f8e:	e00b      	b.n	8002fa8 <UART_SetConfig+0x10c>
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e08b      	b.n	80030ae <UART_SetConfig+0x212>
 8002f96:	2302      	movs	r3, #2
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e088      	b.n	80030ae <UART_SetConfig+0x212>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e085      	b.n	80030ae <UART_SetConfig+0x212>
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	e082      	b.n	80030ae <UART_SetConfig+0x212>
 8002fa8:	2310      	movs	r3, #16
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e07f      	b.n	80030ae <UART_SetConfig+0x212>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003120 <UART_SetConfig+0x284>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d124      	bne.n	8003002 <UART_SetConfig+0x166>
 8002fb8:	4b57      	ldr	r3, [pc, #348]	@ (8003118 <UART_SetConfig+0x27c>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002fc0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fc4:	d011      	beq.n	8002fea <UART_SetConfig+0x14e>
 8002fc6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fca:	d817      	bhi.n	8002ffc <UART_SetConfig+0x160>
 8002fcc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fd0:	d011      	beq.n	8002ff6 <UART_SetConfig+0x15a>
 8002fd2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fd6:	d811      	bhi.n	8002ffc <UART_SetConfig+0x160>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <UART_SetConfig+0x148>
 8002fdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fe0:	d006      	beq.n	8002ff0 <UART_SetConfig+0x154>
 8002fe2:	e00b      	b.n	8002ffc <UART_SetConfig+0x160>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e061      	b.n	80030ae <UART_SetConfig+0x212>
 8002fea:	2302      	movs	r3, #2
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e05e      	b.n	80030ae <UART_SetConfig+0x212>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e05b      	b.n	80030ae <UART_SetConfig+0x212>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e058      	b.n	80030ae <UART_SetConfig+0x212>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e055      	b.n	80030ae <UART_SetConfig+0x212>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a47      	ldr	r2, [pc, #284]	@ (8003124 <UART_SetConfig+0x288>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d124      	bne.n	8003056 <UART_SetConfig+0x1ba>
 800300c:	4b42      	ldr	r3, [pc, #264]	@ (8003118 <UART_SetConfig+0x27c>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003014:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003018:	d011      	beq.n	800303e <UART_SetConfig+0x1a2>
 800301a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800301e:	d817      	bhi.n	8003050 <UART_SetConfig+0x1b4>
 8003020:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003024:	d011      	beq.n	800304a <UART_SetConfig+0x1ae>
 8003026:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800302a:	d811      	bhi.n	8003050 <UART_SetConfig+0x1b4>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <UART_SetConfig+0x19c>
 8003030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003034:	d006      	beq.n	8003044 <UART_SetConfig+0x1a8>
 8003036:	e00b      	b.n	8003050 <UART_SetConfig+0x1b4>
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e037      	b.n	80030ae <UART_SetConfig+0x212>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e034      	b.n	80030ae <UART_SetConfig+0x212>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e031      	b.n	80030ae <UART_SetConfig+0x212>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e02e      	b.n	80030ae <UART_SetConfig+0x212>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e02b      	b.n	80030ae <UART_SetConfig+0x212>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a33      	ldr	r2, [pc, #204]	@ (8003128 <UART_SetConfig+0x28c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d124      	bne.n	80030aa <UART_SetConfig+0x20e>
 8003060:	4b2d      	ldr	r3, [pc, #180]	@ (8003118 <UART_SetConfig+0x27c>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003068:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800306c:	d011      	beq.n	8003092 <UART_SetConfig+0x1f6>
 800306e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003072:	d817      	bhi.n	80030a4 <UART_SetConfig+0x208>
 8003074:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003078:	d011      	beq.n	800309e <UART_SetConfig+0x202>
 800307a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800307e:	d811      	bhi.n	80030a4 <UART_SetConfig+0x208>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <UART_SetConfig+0x1f0>
 8003084:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003088:	d006      	beq.n	8003098 <UART_SetConfig+0x1fc>
 800308a:	e00b      	b.n	80030a4 <UART_SetConfig+0x208>
 800308c:	2300      	movs	r3, #0
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e00d      	b.n	80030ae <UART_SetConfig+0x212>
 8003092:	2302      	movs	r3, #2
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e00a      	b.n	80030ae <UART_SetConfig+0x212>
 8003098:	2304      	movs	r3, #4
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e007      	b.n	80030ae <UART_SetConfig+0x212>
 800309e:	2308      	movs	r3, #8
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e004      	b.n	80030ae <UART_SetConfig+0x212>
 80030a4:	2310      	movs	r3, #16
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e001      	b.n	80030ae <UART_SetConfig+0x212>
 80030aa:	2310      	movs	r3, #16
 80030ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b6:	d16b      	bne.n	8003190 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80030b8:	7ffb      	ldrb	r3, [r7, #31]
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d838      	bhi.n	8003130 <UART_SetConfig+0x294>
 80030be:	a201      	add	r2, pc, #4	@ (adr r2, 80030c4 <UART_SetConfig+0x228>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	080030f1 	.word	0x080030f1
 80030cc:	080030f9 	.word	0x080030f9
 80030d0:	08003131 	.word	0x08003131
 80030d4:	080030ff 	.word	0x080030ff
 80030d8:	08003131 	.word	0x08003131
 80030dc:	08003131 	.word	0x08003131
 80030e0:	08003131 	.word	0x08003131
 80030e4:	08003107 	.word	0x08003107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e8:	f7ff f844 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 80030ec:	61b8      	str	r0, [r7, #24]
        break;
 80030ee:	e024      	b.n	800313a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030f0:	f7ff f862 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80030f4:	61b8      	str	r0, [r7, #24]
        break;
 80030f6:	e020      	b.n	800313a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <UART_SetConfig+0x290>)
 80030fa:	61bb      	str	r3, [r7, #24]
        break;
 80030fc:	e01d      	b.n	800313a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030fe:	f7fe ffd9 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8003102:	61b8      	str	r0, [r7, #24]
        break;
 8003104:	e019      	b.n	800313a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800310a:	61bb      	str	r3, [r7, #24]
        break;
 800310c:	e015      	b.n	800313a <UART_SetConfig+0x29e>
 800310e:	bf00      	nop
 8003110:	efff69f3 	.word	0xefff69f3
 8003114:	40013800 	.word	0x40013800
 8003118:	40021000 	.word	0x40021000
 800311c:	40004400 	.word	0x40004400
 8003120:	40004800 	.word	0x40004800
 8003124:	40004c00 	.word	0x40004c00
 8003128:	40005000 	.word	0x40005000
 800312c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	77bb      	strb	r3, [r7, #30]
        break;
 8003138:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d073      	beq.n	8003228 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	005a      	lsls	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b0f      	cmp	r3, #15
 800315a:	d916      	bls.n	800318a <UART_SetConfig+0x2ee>
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003162:	d212      	bcs.n	800318a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f023 030f 	bic.w	r3, r3, #15
 800316c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	b29b      	uxth	r3, r3
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	b29a      	uxth	r2, r3
 800317a:	89fb      	ldrh	r3, [r7, #14]
 800317c:	4313      	orrs	r3, r2
 800317e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	89fa      	ldrh	r2, [r7, #14]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	e04e      	b.n	8003228 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	77bb      	strb	r3, [r7, #30]
 800318e:	e04b      	b.n	8003228 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003190:	7ffb      	ldrb	r3, [r7, #31]
 8003192:	2b08      	cmp	r3, #8
 8003194:	d827      	bhi.n	80031e6 <UART_SetConfig+0x34a>
 8003196:	a201      	add	r2, pc, #4	@ (adr r2, 800319c <UART_SetConfig+0x300>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031e7 	.word	0x080031e7
 80031ac:	080031d7 	.word	0x080031d7
 80031b0:	080031e7 	.word	0x080031e7
 80031b4:	080031e7 	.word	0x080031e7
 80031b8:	080031e7 	.word	0x080031e7
 80031bc:	080031df 	.word	0x080031df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c0:	f7fe ffd8 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 80031c4:	61b8      	str	r0, [r7, #24]
        break;
 80031c6:	e013      	b.n	80031f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c8:	f7fe fff6 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80031cc:	61b8      	str	r0, [r7, #24]
        break;
 80031ce:	e00f      	b.n	80031f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <UART_SetConfig+0x3a4>)
 80031d2:	61bb      	str	r3, [r7, #24]
        break;
 80031d4:	e00c      	b.n	80031f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d6:	f7fe ff6d 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80031da:	61b8      	str	r0, [r7, #24]
        break;
 80031dc:	e008      	b.n	80031f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031e2:	61bb      	str	r3, [r7, #24]
        break;
 80031e4:	e004      	b.n	80031f0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	77bb      	strb	r3, [r7, #30]
        break;
 80031ee:	bf00      	nop
    }

    if (pclk != 0U)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d018      	beq.n	8003228 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	085a      	lsrs	r2, r3, #1
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	441a      	add	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d909      	bls.n	8003224 <UART_SetConfig+0x388>
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003216:	d205      	bcs.n	8003224 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	e001      	b.n	8003228 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003234:	7fbb      	ldrb	r3, [r7, #30]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	007a1200 	.word	0x007a1200

08003244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01a      	beq.n	800335a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003342:	d10a      	bne.n	800335a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b098      	sub	sp, #96	@ 0x60
 800338c:	af02      	add	r7, sp, #8
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003398:	f7fd f9b2 	bl	8000700 <HAL_GetTick>
 800339c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d12e      	bne.n	800340a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f88c 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d021      	beq.n	800340a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033da:	653b      	str	r3, [r7, #80]	@ 0x50
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e6      	bne.n	80033c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e062      	b.n	80034d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b04      	cmp	r3, #4
 8003416:	d149      	bne.n	80034ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003418:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003420:	2200      	movs	r2, #0
 8003422:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f856 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d03c      	beq.n	80034ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	623b      	str	r3, [r7, #32]
   return(result);
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003450:	633b      	str	r3, [r7, #48]	@ 0x30
 8003452:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e6      	bne.n	8003432 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3308      	adds	r3, #8
 800346a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	60fb      	str	r3, [r7, #12]
   return(result);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3308      	adds	r3, #8
 8003482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003484:	61fa      	str	r2, [r7, #28]
 8003486:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	69b9      	ldr	r1, [r7, #24]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	617b      	str	r3, [r7, #20]
   return(result);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e5      	bne.n	8003464 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e011      	b.n	80034d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3758      	adds	r7, #88	@ 0x58
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e8:	e04f      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d04b      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7fd f905 	bl	8000700 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <UART_WaitOnFlagUntilTimeout+0x30>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e04e      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d037      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b80      	cmp	r3, #128	@ 0x80
 800351e:	d034      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b40      	cmp	r3, #64	@ 0x40
 8003524:	d031      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d110      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2208      	movs	r2, #8
 800353a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f838 	bl	80035b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2208      	movs	r2, #8
 8003546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e029      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003564:	d111      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800356e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f81e 	bl	80035b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e00f      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d0a0      	beq.n	80034ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b095      	sub	sp, #84	@ 0x54
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e6      	bne.n	80035ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3308      	adds	r3, #8
 800360a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800360c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003624:	2b01      	cmp	r3, #1
 8003626:	d118      	bne.n	800365a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	60bb      	str	r3, [r7, #8]
   return(result);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 0310 	bic.w	r3, r3, #16
 800363c:	647b      	str	r3, [r7, #68]	@ 0x44
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	6979      	ldr	r1, [r7, #20]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	613b      	str	r3, [r7, #16]
   return(result);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e6      	bne.n	8003628 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800366e:	bf00      	nop
 8003670:	3754      	adds	r7, #84	@ 0x54
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff fbe9 	bl	8002e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b088      	sub	sp, #32
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6979      	ldr	r1, [r7, #20]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	613b      	str	r3, [r7, #16]
   return(result);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e6      	bne.n	80036ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff fbb5 	bl	8002e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f2:	bf00      	nop
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <memset>:
 800370e:	4402      	add	r2, r0
 8003710:	4603      	mov	r3, r0
 8003712:	4293      	cmp	r3, r2
 8003714:	d100      	bne.n	8003718 <memset+0xa>
 8003716:	4770      	bx	lr
 8003718:	f803 1b01 	strb.w	r1, [r3], #1
 800371c:	e7f9      	b.n	8003712 <memset+0x4>
	...

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4d0d      	ldr	r5, [pc, #52]	@ (8003758 <__libc_init_array+0x38>)
 8003724:	4c0d      	ldr	r4, [pc, #52]	@ (800375c <__libc_init_array+0x3c>)
 8003726:	1b64      	subs	r4, r4, r5
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	2600      	movs	r6, #0
 800372c:	42a6      	cmp	r6, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	4d0b      	ldr	r5, [pc, #44]	@ (8003760 <__libc_init_array+0x40>)
 8003732:	4c0c      	ldr	r4, [pc, #48]	@ (8003764 <__libc_init_array+0x44>)
 8003734:	f000 f818 	bl	8003768 <_init>
 8003738:	1b64      	subs	r4, r4, r5
 800373a:	10a4      	asrs	r4, r4, #2
 800373c:	2600      	movs	r6, #0
 800373e:	42a6      	cmp	r6, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	f855 3b04 	ldr.w	r3, [r5], #4
 8003748:	4798      	blx	r3
 800374a:	3601      	adds	r6, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003752:	4798      	blx	r3
 8003754:	3601      	adds	r6, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	080037c8 	.word	0x080037c8
 800375c:	080037c8 	.word	0x080037c8
 8003760:	080037c8 	.word	0x080037c8
 8003764:	080037cc 	.word	0x080037cc

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
