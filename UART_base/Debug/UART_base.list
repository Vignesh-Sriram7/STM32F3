
UART_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c24  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df0  08003df0  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003df0  08003df0  00005014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003df0  08003df0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df0  08003df0  00004df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003df4  08003df4  00004df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003df8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005014  2**0
                  CONTENTS
 10 .bss          000028f4  20000014  20000014  00005014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002908  20002908  00005014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aafa  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af7  00000000  00000000  0000fb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  00011638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c2  00000000  00000000  00011dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb37  00000000  00000000  00012382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aec0  00000000  00000000  00031eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bff8e  00000000  00000000  0003cd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fcd07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d6c  00000000  00000000  000fcd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000feab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003da0 	.word	0x08003da0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08003da0 	.word	0x08003da0

080001d4 <HAL_UART_TxHalfCpltCallback>:
volatile int countloop = 0;
uint8_t TxData[10240];
volatile int indx=49;

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<5120; i++)
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e00a      	b.n	80001f8 <HAL_UART_TxHalfCpltCallback+0x24>
		{
			TxData[i]= indx;
 80001e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000218 <HAL_UART_TxHalfCpltCallback+0x44>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	b2d9      	uxtb	r1, r3
 80001e8:	4a0c      	ldr	r2, [pc, #48]	@ (800021c <HAL_UART_TxHalfCpltCallback+0x48>)
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<5120; i++)
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	3301      	adds	r3, #1
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80001fe:	d3f0      	bcc.n	80001e2 <HAL_UART_TxHalfCpltCallback+0xe>
		}
		indx++;
 8000200:	4b05      	ldr	r3, [pc, #20]	@ (8000218 <HAL_UART_TxHalfCpltCallback+0x44>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3301      	adds	r3, #1
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <HAL_UART_TxHalfCpltCallback+0x44>)
 8000208:	6013      	str	r3, [r2, #0]
}
 800020a:	bf00      	nop
 800020c:	3714      	adds	r7, #20
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	20000004 	.word	0x20000004
 800021c:	20000104 	.word	0x20000104

08000220 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	for(uint32_t i=5120; i<10240; i++)
 8000228:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e00a      	b.n	8000246 <HAL_UART_TxCpltCallback+0x26>
	{
		TxData[i]= indx;
 8000230:	4b13      	ldr	r3, [pc, #76]	@ (8000280 <HAL_UART_TxCpltCallback+0x60>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	b2d9      	uxtb	r1, r3
 8000236:	4a13      	ldr	r2, [pc, #76]	@ (8000284 <HAL_UART_TxCpltCallback+0x64>)
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	4413      	add	r3, r2
 800023c:	460a      	mov	r2, r1
 800023e:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=5120; i<10240; i++)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	3301      	adds	r3, #1
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800024c:	d3f0      	bcc.n	8000230 <HAL_UART_TxCpltCallback+0x10>
	}
	indx++;
 800024e:	4b0c      	ldr	r3, [pc, #48]	@ (8000280 <HAL_UART_TxCpltCallback+0x60>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	3301      	adds	r3, #1
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_UART_TxCpltCallback+0x60>)
 8000256:	6013      	str	r3, [r2, #0]
	if(indx>=60)
 8000258:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <HAL_UART_TxCpltCallback+0x60>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b3b      	cmp	r3, #59	@ 0x3b
 800025e:	dd02      	ble.n	8000266 <HAL_UART_TxCpltCallback+0x46>
	{
		HAL_UART_DMAStop(&huart2);
 8000260:	4809      	ldr	r0, [pc, #36]	@ (8000288 <HAL_UART_TxCpltCallback+0x68>)
 8000262:	f002 fced 	bl	8002c40 <HAL_UART_DMAStop>
	}
	isSent = 1;
 8000266:	4b09      	ldr	r3, [pc, #36]	@ (800028c <HAL_UART_TxCpltCallback+0x6c>)
 8000268:	2201      	movs	r2, #1
 800026a:	601a      	str	r2, [r3, #0]
	countinterrupt++;
 800026c:	4b08      	ldr	r3, [pc, #32]	@ (8000290 <HAL_UART_TxCpltCallback+0x70>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	4a07      	ldr	r2, [pc, #28]	@ (8000290 <HAL_UART_TxCpltCallback+0x70>)
 8000274:	6013      	str	r3, [r2, #0]
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000004 	.word	0x20000004
 8000284:	20000104 	.word	0x20000104
 8000288:	20000030 	.word	0x20000030
 800028c:	20000000 	.word	0x20000000
 8000290:	200000fc 	.word	0x200000fc

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fa23 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f833 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f000 f8d1 	bl	8000448 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a6:	f000 f8b1 	bl	800040c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002aa:	f000 f87f 	bl	80003ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  for (uint32_t i=0; i<10240; i++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	e009      	b.n	80002c8 <main+0x34>
  {
  	  TxData[i] = i&(0xff);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	b2d9      	uxtb	r1, r3
 80002b8:	4a10      	ldr	r2, [pc, #64]	@ (80002fc <main+0x68>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4413      	add	r3, r2
 80002be:	460a      	mov	r2, r1
 80002c0:	701a      	strb	r2, [r3, #0]
  for (uint32_t i=0; i<10240; i++)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80002ce:	d3f1      	bcc.n	80002b4 <main+0x20>
    }

  HAL_UART_Transmit_DMA(&huart2, TxData, 10240);
 80002d0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80002d4:	4909      	ldr	r1, [pc, #36]	@ (80002fc <main+0x68>)
 80002d6:	480a      	ldr	r0, [pc, #40]	@ (8000300 <main+0x6c>)
 80002d8:	f002 fc36 	bl	8002b48 <HAL_UART_Transmit_DMA>
	  //HAL_UART_Transmit(&huart2, TxData, 10240, HAL_MAX_DELAY); // Data transmitted via the normal UART
	  //HAL_UART_Transmit_IT(&huart2, TxData, 10240); //Data Transmitted via the interrupt
	  		  //HAL_UART_Transmit_DMA(&huart2, TxData, 10240);// Data Transmitted via DMA normal mode
	  	  		  //isSent =0;
	  	  	  //}
	  	  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002dc:	2120      	movs	r1, #32
 80002de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e2:	f000 ff77 	bl	80011d4 <HAL_GPIO_TogglePin>
	  	  	  HAL_Delay(500);
 80002e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002ea:	f000 fa61 	bl	80007b0 <HAL_Delay>
	  	  	  countloop++;
 80002ee:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <main+0x70>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3301      	adds	r3, #1
 80002f4:	4a03      	ldr	r2, [pc, #12]	@ (8000304 <main+0x70>)
 80002f6:	6013      	str	r3, [r2, #0]
	  	  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002f8:	bf00      	nop
 80002fa:	e7ef      	b.n	80002dc <main+0x48>
 80002fc:	20000104 	.word	0x20000104
 8000300:	20000030 	.word	0x20000030
 8000304:	20000100 	.word	0x20000100

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b0a6      	sub	sp, #152	@ 0x98
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000312:	2228      	movs	r2, #40	@ 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fd16 	bl	8003d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2258      	movs	r2, #88	@ 0x58
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fd08 	bl	8003d48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000338:	2302      	movs	r3, #2
 800033a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	2301      	movs	r3, #1
 800033e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000340:	2310      	movs	r3, #16
 8000342:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000350:	4618      	mov	r0, r3
 8000352:	f000 ff59 	bl	8001208 <HAL_RCC_OscConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800035c:	f000 f8a4 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000360:	230f      	movs	r3, #15
 8000362:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000364:	2300      	movs	r3, #0
 8000366:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000374:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f001 ff68 	bl	8002250 <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000386:	f000 f88f 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800038a:	2302      	movs	r3, #2
 800038c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4618      	mov	r0, r3
 8000396:	f002 f96d 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003a0:	f000 f882 	bl	80004a8 <Error_Handler>
  }
}
 80003a4:	bf00      	nop
 80003a6:	3798      	adds	r7, #152	@ 0x98
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003b2:	4a15      	ldr	r2, [pc, #84]	@ (8000408 <MX_USART2_UART_Init+0x5c>)
 80003b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003d2:	220c      	movs	r2, #12
 80003d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003dc:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003f0:	f002 fb5c 	bl	8002aac <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003fa:	f000 f855 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000030 	.word	0x20000030
 8000408:	40004400 	.word	0x40004400

0800040c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <MX_DMA_Init+0x38>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a0b      	ldr	r2, [pc, #44]	@ (8000444 <MX_DMA_Init+0x38>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_DMA_Init+0x38>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2100      	movs	r1, #0
 800042e:	2011      	movs	r0, #17
 8000430:	f000 fabd 	bl	80009ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000434:	2011      	movs	r0, #17
 8000436:	f000 fad6 	bl	80009e6 <HAL_NVIC_EnableIRQ>

}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_GPIO_Init+0x5c>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	4a10      	ldr	r2, [pc, #64]	@ (80004a4 <MX_GPIO_Init+0x5c>)
 8000462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000466:	6153      	str	r3, [r2, #20]
 8000468:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_GPIO_Init+0x5c>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800047c:	f000 fe92 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000480:	2320      	movs	r3, #32
 8000482:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	2301      	movs	r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	4619      	mov	r1, r3
 8000494:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000498:	f000 fcfa 	bl	8000e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800049c:	bf00      	nop
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <HAL_MspInit+0x44>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a0e      	ldr	r2, [pc, #56]	@ (80004f8 <HAL_MspInit+0x44>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <HAL_MspInit+0x44>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <HAL_MspInit+0x44>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a08      	ldr	r2, [pc, #32]	@ (80004f8 <HAL_MspInit+0x44>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <HAL_MspInit+0x44>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	@ 0x28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a2e      	ldr	r2, [pc, #184]	@ (80005d4 <HAL_UART_MspInit+0xd8>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d156      	bne.n	80005cc <HAL_UART_MspInit+0xd0>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800051e:	4b2e      	ldr	r3, [pc, #184]	@ (80005d8 <HAL_UART_MspInit+0xdc>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a2d      	ldr	r2, [pc, #180]	@ (80005d8 <HAL_UART_MspInit+0xdc>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b2b      	ldr	r3, [pc, #172]	@ (80005d8 <HAL_UART_MspInit+0xdc>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b28      	ldr	r3, [pc, #160]	@ (80005d8 <HAL_UART_MspInit+0xdc>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a27      	ldr	r2, [pc, #156]	@ (80005d8 <HAL_UART_MspInit+0xdc>)
 800053c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b25      	ldr	r3, [pc, #148]	@ (80005d8 <HAL_UART_MspInit+0xdc>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800054e:	230c      	movs	r3, #12
 8000550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800055e:	2307      	movs	r3, #7
 8000560:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800056c:	f000 fc90 	bl	8000e90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000570:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 8000572:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <HAL_UART_MspInit+0xe4>)
 8000574:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000576:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 8000578:	2210      	movs	r2, #16
 800057a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800057c:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000582:	4b16      	ldr	r3, [pc, #88]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000588:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800058e:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000594:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 8000596:	2220      	movs	r2, #32
 8000598:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 800059c:	2200      	movs	r2, #0
 800059e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80005a0:	480e      	ldr	r0, [pc, #56]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 80005a2:	f000 fa3a 	bl	8000a1a <HAL_DMA_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80005ac:	f7ff ff7c 	bl	80004a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 80005b4:	671a      	str	r2, [r3, #112]	@ 0x70
 80005b6:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <HAL_UART_MspInit+0xe0>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	2026      	movs	r0, #38	@ 0x26
 80005c2:	f000 f9f4 	bl	80009ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005c6:	2026      	movs	r0, #38	@ 0x26
 80005c8:	f000 fa0d 	bl	80009e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005cc:	bf00      	nop
 80005ce:	3728      	adds	r7, #40	@ 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40004400 	.word	0x40004400
 80005d8:	40021000 	.word	0x40021000
 80005dc:	200000b8 	.word	0x200000b8
 80005e0:	40020080 	.word	0x40020080

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <NMI_Handler+0x4>

080005ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <UsageFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063a:	f000 f899 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000648:	4802      	ldr	r0, [pc, #8]	@ (8000654 <DMA1_Channel7_IRQHandler+0x10>)
 800064a:	f000 fb08 	bl	8000c5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000b8 	.word	0x200000b8

08000658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800065c:	4802      	ldr	r0, [pc, #8]	@ (8000668 <USART2_IRQHandler+0x10>)
 800065e:	f002 fb81 	bl	8002d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000030 	.word	0x20000030

0800066c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <SystemInit+0x20>)
 8000672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000676:	4a05      	ldr	r2, [pc, #20]	@ (800068c <SystemInit+0x20>)
 8000678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800067c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000694:	f7ff ffea 	bl	800066c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	@ (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	@ (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	@ (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	@ (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006be:	f003 fb4b 	bl	8003d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006c2:	f7ff fde7 	bl	8000294 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80006d4:	08003df8 	.word	0x08003df8
  ldr r2, =_sbss
 80006d8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80006dc:	20002908 	.word	0x20002908

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <HAL_Init+0x28>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a07      	ldr	r2, [pc, #28]	@ (800070c <HAL_Init+0x28>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f94f 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	200f      	movs	r0, #15
 80006fc:	f000 f808 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff fed8 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <HAL_InitTick+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_InitTick+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f967 	bl	8000a02 <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f000 f92f 	bl	80009ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <HAL_InitTick+0x5c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000008 	.word	0x20000008
 8000768:	20000010 	.word	0x20000010
 800076c:	2000000c 	.word	0x2000000c

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_IncTick+0x20>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_IncTick+0x24>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <HAL_IncTick+0x24>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000010 	.word	0x20000010
 8000794:	20002904 	.word	0x20002904

08000798 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;  
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <HAL_GetTick+0x14>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20002904 	.word	0x20002904

080007b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b8:	f7ff ffee 	bl	8000798 <HAL_GetTick>
 80007bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c8:	d005      	beq.n	80007d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <HAL_Delay+0x44>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007d6:	bf00      	nop
 80007d8:	f7ff ffde 	bl	8000798 <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d8f7      	bhi.n	80007d8 <HAL_Delay+0x28>
  {
  }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000010 	.word	0x20000010

080007f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082a:	4a04      	ldr	r2, [pc, #16]	@ (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	60d3      	str	r3, [r2, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	db0b      	blt.n	8000886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 021f 	and.w	r2, r3, #31
 8000874:	4907      	ldr	r1, [pc, #28]	@ (8000894 <__NVIC_EnableIRQ+0x38>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	2001      	movs	r0, #1
 800087e:	fa00 f202 	lsl.w	r2, r0, r2
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	@ (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	@ (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	@ 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	@ 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000964:	d301      	bcc.n	800096a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2301      	movs	r3, #1
 8000968:	e00f      	b.n	800098a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <SysTick_Config+0x40>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000972:	210f      	movs	r1, #15
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f7ff ff8e 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <SysTick_Config+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <SysTick_Config+0x40>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff29 	bl	80007f8 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff3e 	bl	8000840 <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ff8e 	bl	80008ec <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5d 	bl	8000898 <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff31 	bl	800085c <__NVIC_EnableIRQ>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffa2 	bl	8000954 <SysTick_Config>
 8000a10:	4603      	mov	r3, r0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d101      	bne.n	8000a30 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e037      	b.n	8000aa0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2202      	movs	r2, #2
 8000a34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000a46:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f9c8 	bl	8000e18 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2201      	movs	r2, #1
 8000a92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d101      	bne.n	8000ac8 <HAL_DMA_Start_IT+0x20>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e04a      	b.n	8000b5e <HAL_DMA_Start_IT+0xb6>
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d13a      	bne.n	8000b50 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2202      	movs	r2, #2
 8000ade:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0201 	bic.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f000 f95c 	bl	8000dbc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d008      	beq.n	8000b1e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 020e 	orr.w	r2, r2, #14
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e00f      	b.n	8000b3e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f042 020a 	orr.w	r2, r2, #10
 8000b2c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0204 	bic.w	r2, r2, #4
 8000b3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f042 0201 	orr.w	r2, r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e005      	b.n	8000b5c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e02e      	b.n	8000bd6 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d008      	beq.n	8000b94 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2204      	movs	r2, #4
 8000b86:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e020      	b.n	8000bd6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 020e 	bic.w	r2, r2, #14
 8000ba2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0201 	bic.w	r2, r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b084      	sub	sp, #16
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d005      	beq.n	8000c04 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e027      	b.n	8000c54 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 020e 	bic.w	r2, r2, #14
 8000c12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0201 	bic.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c32:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	4798      	blx	r3
    }
  }
  return status;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4013      	ands	r3, r2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d024      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0x72>
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d01f      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d107      	bne.n	8000cae <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 0204 	bic.w	r2, r2, #4
 8000cac:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d06a      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000cce:	e065      	b.n	8000d9c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d02c      	beq.n	8000d3a <HAL_DMA_IRQHandler+0xdc>
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d027      	beq.n	8000d3a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0320 	and.w	r3, r3, #32
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10b      	bne.n	8000d10 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 020a 	bic.w	r2, r2, #10
 8000d06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d18:	2102      	movs	r1, #2
 8000d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d035      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d38:	e030      	b.n	8000d9c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	2208      	movs	r2, #8
 8000d40:	409a      	lsls	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d028      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x13e>
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d023      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 020e 	bic.w	r2, r2, #14
 8000d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	4798      	blx	r3
    }
  }
}
 8000d9a:	e7ff      	b.n	8000d9c <HAL_DMA_IRQHandler+0x13e>
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	d108      	bne.n	8000dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000dfa:	e007      	b.n	8000e0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	60da      	str	r2, [r3, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <DMA_CalcBaseAndBitshift+0x60>)
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d80f      	bhi.n	8000e4c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <DMA_CalcBaseAndBitshift+0x64>)
 8000e34:	4413      	add	r3, r2
 8000e36:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <DMA_CalcBaseAndBitshift+0x68>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	009a      	lsls	r2, r3, #2
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <DMA_CalcBaseAndBitshift+0x6c>)
 8000e48:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000e4a:	e00e      	b.n	8000e6a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <DMA_CalcBaseAndBitshift+0x70>)
 8000e54:	4413      	add	r3, r2
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <DMA_CalcBaseAndBitshift+0x68>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	009a      	lsls	r2, r3, #2
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a09      	ldr	r2, [pc, #36]	@ (8000e8c <DMA_CalcBaseAndBitshift+0x74>)
 8000e68:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40020407 	.word	0x40020407
 8000e7c:	bffdfff8 	.word	0xbffdfff8
 8000e80:	cccccccd 	.word	0xcccccccd
 8000e84:	40020000 	.word	0x40020000
 8000e88:	bffdfbf8 	.word	0xbffdfbf8
 8000e8c:	40020400 	.word	0x40020400

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9e:	e160      	b.n	8001162 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8152 	beq.w	800115c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d005      	beq.n	8000ed0 <HAL_GPIO_Init+0x40>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d130      	bne.n	8000f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0201 	and.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d017      	beq.n	8000f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d123      	bne.n	8000fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	6939      	ldr	r1, [r7, #16]
 8000fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0203 	and.w	r2, r3, #3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80ac 	beq.w	800115c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	4b5e      	ldr	r3, [pc, #376]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a5d      	ldr	r2, [pc, #372]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b5b      	ldr	r3, [pc, #364]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101c:	4a59      	ldr	r2, [pc, #356]	@ (8001184 <HAL_GPIO_Init+0x2f4>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001046:	d025      	beq.n	8001094 <HAL_GPIO_Init+0x204>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a4f      	ldr	r2, [pc, #316]	@ (8001188 <HAL_GPIO_Init+0x2f8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d01f      	beq.n	8001090 <HAL_GPIO_Init+0x200>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a4e      	ldr	r2, [pc, #312]	@ (800118c <HAL_GPIO_Init+0x2fc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d019      	beq.n	800108c <HAL_GPIO_Init+0x1fc>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a4d      	ldr	r2, [pc, #308]	@ (8001190 <HAL_GPIO_Init+0x300>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d013      	beq.n	8001088 <HAL_GPIO_Init+0x1f8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a4c      	ldr	r2, [pc, #304]	@ (8001194 <HAL_GPIO_Init+0x304>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d00d      	beq.n	8001084 <HAL_GPIO_Init+0x1f4>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a4b      	ldr	r2, [pc, #300]	@ (8001198 <HAL_GPIO_Init+0x308>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d007      	beq.n	8001080 <HAL_GPIO_Init+0x1f0>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a4a      	ldr	r2, [pc, #296]	@ (800119c <HAL_GPIO_Init+0x30c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d101      	bne.n	800107c <HAL_GPIO_Init+0x1ec>
 8001078:	2306      	movs	r3, #6
 800107a:	e00c      	b.n	8001096 <HAL_GPIO_Init+0x206>
 800107c:	2307      	movs	r3, #7
 800107e:	e00a      	b.n	8001096 <HAL_GPIO_Init+0x206>
 8001080:	2305      	movs	r3, #5
 8001082:	e008      	b.n	8001096 <HAL_GPIO_Init+0x206>
 8001084:	2304      	movs	r3, #4
 8001086:	e006      	b.n	8001096 <HAL_GPIO_Init+0x206>
 8001088:	2303      	movs	r3, #3
 800108a:	e004      	b.n	8001096 <HAL_GPIO_Init+0x206>
 800108c:	2302      	movs	r3, #2
 800108e:	e002      	b.n	8001096 <HAL_GPIO_Init+0x206>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <HAL_GPIO_Init+0x206>
 8001094:	2300      	movs	r3, #0
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	f002 0203 	and.w	r2, r2, #3
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	4093      	lsls	r3, r2
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a6:	4937      	ldr	r1, [pc, #220]	@ (8001184 <HAL_GPIO_Init+0x2f4>)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b4:	4b3a      	ldr	r3, [pc, #232]	@ (80011a0 <HAL_GPIO_Init+0x310>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d8:	4a31      	ldr	r2, [pc, #196]	@ (80011a0 <HAL_GPIO_Init+0x310>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010de:	4b30      	ldr	r3, [pc, #192]	@ (80011a0 <HAL_GPIO_Init+0x310>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001102:	4a27      	ldr	r2, [pc, #156]	@ (80011a0 <HAL_GPIO_Init+0x310>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001108:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <HAL_GPIO_Init+0x310>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800112c:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <HAL_GPIO_Init+0x310>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001132:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_GPIO_Init+0x310>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001156:	4a12      	ldr	r2, [pc, #72]	@ (80011a0 <HAL_GPIO_Init+0x310>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	f47f ae97 	bne.w	8000ea0 <HAL_GPIO_Init+0x10>
  }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800
 8001190:	48000c00 	.word	0x48000c00
 8001194:	48001000 	.word	0x48001000
 8001198:	48001400 	.word	0x48001400
 800119c:	48001800 	.word	0x48001800
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4013      	ands	r3, r2
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43d9      	mvns	r1, r3
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	400b      	ands	r3, r1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800120e:	af00      	add	r7, sp, #0
 8001210:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001214:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001218:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800121a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800121e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	f001 b80a 	b.w	8002242 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001232:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 8161 	beq.w	8001506 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001244:	4bae      	ldr	r3, [pc, #696]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b04      	cmp	r3, #4
 800124e:	d00c      	beq.n	800126a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001250:	4bab      	ldr	r3, [pc, #684]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 030c 	and.w	r3, r3, #12
 8001258:	2b08      	cmp	r3, #8
 800125a:	d157      	bne.n	800130c <HAL_RCC_OscConfig+0x104>
 800125c:	4ba8      	ldr	r3, [pc, #672]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001268:	d150      	bne.n	800130c <HAL_RCC_OscConfig+0x104>
 800126a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800126e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800127e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b3f      	cmp	r3, #63	@ 0x3f
 800128a:	d802      	bhi.n	8001292 <HAL_RCC_OscConfig+0x8a>
 800128c:	4b9c      	ldr	r3, [pc, #624]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	e015      	b.n	80012be <HAL_RCC_OscConfig+0xb6>
 8001292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001296:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80012a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012aa:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80012ae:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80012ba:	4b91      	ldr	r3, [pc, #580]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012c2:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80012c6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80012ca:	fa92 f2a2 	rbit	r2, r2
 80012ce:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80012d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80012d6:	fab2 f282 	clz	r2, r2
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	f042 0220 	orr.w	r2, r2, #32
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	f002 021f 	and.w	r2, r2, #31
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8108 	beq.w	8001504 <HAL_RCC_OscConfig+0x2fc>
 80012f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f040 80ff 	bne.w	8001504 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f000 bf9b 	b.w	8002242 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001310:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x124>
 800131e:	4b78      	ldr	r3, [pc, #480]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a77      	ldr	r2, [pc, #476]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e036      	b.n	800139a <HAL_RCC_OscConfig+0x192>
 800132c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001330:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10c      	bne.n	8001356 <HAL_RCC_OscConfig+0x14e>
 800133c:	4b70      	ldr	r3, [pc, #448]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a6f      	ldr	r2, [pc, #444]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b6d      	ldr	r3, [pc, #436]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a6c      	ldr	r2, [pc, #432]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e021      	b.n	800139a <HAL_RCC_OscConfig+0x192>
 8001356:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x17a>
 8001368:	4b65      	ldr	r3, [pc, #404]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a64      	ldr	r2, [pc, #400]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 800136e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b62      	ldr	r3, [pc, #392]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a61      	ldr	r2, [pc, #388]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e00b      	b.n	800139a <HAL_RCC_OscConfig+0x192>
 8001382:	4b5f      	ldr	r3, [pc, #380]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a5e      	ldr	r2, [pc, #376]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b5c      	ldr	r3, [pc, #368]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a5b      	ldr	r2, [pc, #364]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001398:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800139e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d054      	beq.n	8001454 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff f9f5 	bl	8000798 <HAL_GetTick>
 80013ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff f9f0 	bl	8000798 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b64      	cmp	r3, #100	@ 0x64
 80013c2:	d902      	bls.n	80013ca <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	f000 bf3c 	b.w	8002242 <HAL_RCC_OscConfig+0x103a>
 80013ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013ce:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80013de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80013ea:	d802      	bhi.n	80013f2 <HAL_RCC_OscConfig+0x1ea>
 80013ec:	4b44      	ldr	r3, [pc, #272]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x216>
 80013f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013f6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001406:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800140a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800140e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800141a:	4b39      	ldr	r3, [pc, #228]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 800141c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001422:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001426:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800142a:	fa92 f2a2 	rbit	r2, r2
 800142e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001432:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001436:	fab2 f282 	clz	r2, r2
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	f042 0220 	orr.w	r2, r2, #32
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	f002 021f 	and.w	r2, r2, #31
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0b0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x1ac>
 8001452:	e058      	b.n	8001506 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff f9a0 	bl	8000798 <HAL_GetTick>
 8001458:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145e:	f7ff f99b 	bl	8000798 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	@ 0x64
 800146c:	d902      	bls.n	8001474 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	f000 bee7 	b.w	8002242 <HAL_RCC_OscConfig+0x103a>
 8001474:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001478:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001488:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b3f      	cmp	r3, #63	@ 0x3f
 8001494:	d802      	bhi.n	800149c <HAL_RCC_OscConfig+0x294>
 8001496:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	e015      	b.n	80014c8 <HAL_RCC_OscConfig+0x2c0>
 800149c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014a0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80014b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014b4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80014b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80014c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <HAL_RCC_OscConfig+0x2f8>)
 80014c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014cc:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80014d0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80014d4:	fa92 f2a2 	rbit	r2, r2
 80014d8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80014dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80014e0:	fab2 f282 	clz	r2, r2
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	f042 0220 	orr.w	r2, r2, #32
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	f002 021f 	and.w	r2, r2, #31
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1b0      	bne.n	800145e <HAL_RCC_OscConfig+0x256>
 80014fc:	e003      	b.n	8001506 <HAL_RCC_OscConfig+0x2fe>
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800150a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 816d 	beq.w	80017f6 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800151c:	4bcd      	ldr	r3, [pc, #820]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00c      	beq.n	8001542 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001528:	4bca      	ldr	r3, [pc, #808]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d16e      	bne.n	8001612 <HAL_RCC_OscConfig+0x40a>
 8001534:	4bc7      	ldr	r3, [pc, #796]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800153c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001540:	d167      	bne.n	8001612 <HAL_RCC_OscConfig+0x40a>
 8001542:	2302      	movs	r3, #2
 8001544:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001554:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001558:	fab3 f383 	clz	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001560:	d802      	bhi.n	8001568 <HAL_RCC_OscConfig+0x360>
 8001562:	4bbc      	ldr	r3, [pc, #752]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	e013      	b.n	8001590 <HAL_RCC_OscConfig+0x388>
 8001568:	2302      	movs	r3, #2
 800156a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001580:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800158c:	4bb1      	ldr	r3, [pc, #708]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	2202      	movs	r2, #2
 8001592:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001596:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800159a:	fa92 f2a2 	rbit	r2, r2
 800159e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80015a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80015a6:	fab2 f282 	clz	r2, r2
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	f042 0220 	orr.w	r2, r2, #32
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	f002 021f 	and.w	r2, r2, #31
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00a      	beq.n	80015d8 <HAL_RCC_OscConfig+0x3d0>
 80015c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d002      	beq.n	80015d8 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f000 be35 	b.w	8002242 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b9e      	ldr	r3, [pc, #632]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	21f8      	movs	r1, #248	@ 0xf8
 80015ee:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80015f6:	fa91 f1a1 	rbit	r1, r1
 80015fa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80015fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001602:	fab1 f181 	clz	r1, r1
 8001606:	b2c9      	uxtb	r1, r1
 8001608:	408b      	lsls	r3, r1
 800160a:	4992      	ldr	r1, [pc, #584]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001610:	e0f1      	b.n	80017f6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001612:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001616:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8083 	beq.w	800172a <HAL_RCC_OscConfig+0x522>
 8001624:	2301      	movs	r3, #1
 8001626:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001636:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001644:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	461a      	mov	r2, r3
 800164c:	2301      	movs	r3, #1
 800164e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff f8a2 	bl	8000798 <HAL_GetTick>
 8001654:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff f89d 	bl	8000798 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d902      	bls.n	8001670 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	f000 bde9 	b.w	8002242 <HAL_RCC_OscConfig+0x103a>
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001682:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b3f      	cmp	r3, #63	@ 0x3f
 800168e:	d802      	bhi.n	8001696 <HAL_RCC_OscConfig+0x48e>
 8001690:	4b70      	ldr	r3, [pc, #448]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	e013      	b.n	80016be <HAL_RCC_OscConfig+0x4b6>
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80016ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80016ba:	4b66      	ldr	r3, [pc, #408]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	2202      	movs	r2, #2
 80016c0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80016c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80016c8:	fa92 f2a2 	rbit	r2, r2
 80016cc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80016d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80016d4:	fab2 f282 	clz	r2, r2
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f042 0220 	orr.w	r2, r2, #32
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	f002 021f 	and.w	r2, r2, #31
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0b4      	beq.n	800165a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b58      	ldr	r3, [pc, #352]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	21f8      	movs	r1, #248	@ 0xf8
 8001706:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800170e:	fa91 f1a1 	rbit	r1, r1
 8001712:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001716:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800171a:	fab1 f181 	clz	r1, r1
 800171e:	b2c9      	uxtb	r1, r1
 8001720:	408b      	lsls	r3, r1
 8001722:	494c      	ldr	r1, [pc, #304]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	e065      	b.n	80017f6 <HAL_RCC_OscConfig+0x5ee>
 800172a:	2301      	movs	r3, #1
 800172c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800173c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800174a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	461a      	mov	r2, r3
 8001752:	2300      	movs	r3, #0
 8001754:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff f81f 	bl	8000798 <HAL_GetTick>
 800175a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff f81a 	bl	8000798 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d902      	bls.n	8001776 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	f000 bd66 	b.w	8002242 <HAL_RCC_OscConfig+0x103a>
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001788:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b3f      	cmp	r3, #63	@ 0x3f
 8001794:	d802      	bhi.n	800179c <HAL_RCC_OscConfig+0x594>
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	e013      	b.n	80017c4 <HAL_RCC_OscConfig+0x5bc>
 800179c:	2302      	movs	r3, #2
 800179e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80017b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80017c0:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_RCC_OscConfig+0x64c>)
 80017c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c4:	2202      	movs	r2, #2
 80017c6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80017ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80017ce:	fa92 f2a2 	rbit	r2, r2
 80017d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80017d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80017da:	fab2 f282 	clz	r2, r2
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f042 0220 	orr.w	r2, r2, #32
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	f002 021f 	and.w	r2, r2, #31
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1b4      	bne.n	8001760 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8119 	beq.w	8001a3e <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001810:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8082 	beq.w	8001922 <HAL_RCC_OscConfig+0x71a>
 800181e:	2301      	movs	r3, #1
 8001820:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001830:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_RCC_OscConfig+0x650>)
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	461a      	mov	r2, r3
 8001844:	2301      	movs	r3, #1
 8001846:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7fe ffa6 	bl	8000798 <HAL_GetTick>
 800184c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001850:	e00f      	b.n	8001872 <HAL_RCC_OscConfig+0x66a>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185c:	f7fe ff9c 	bl	8000798 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d902      	bls.n	8001872 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	f000 bce8 	b.w	8002242 <HAL_RCC_OscConfig+0x103a>
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001884:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80018d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	4bb0      	ldr	r3, [pc, #704]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 80018d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018de:	2102      	movs	r1, #2
 80018e0:	6019      	str	r1, [r3, #0]
 80018e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f1a3 	rbit	r1, r3
 80018f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80018f8:	6019      	str	r1, [r3, #0]
  return result;
 80018fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d09d      	beq.n	800185c <HAL_RCC_OscConfig+0x654>
 8001920:	e08d      	b.n	8001a3e <HAL_RCC_OscConfig+0x836>
 8001922:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001926:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001932:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001940:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001944:	601a      	str	r2, [r3, #0]
  return result;
 8001946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800194e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	4b8f      	ldr	r3, [pc, #572]	@ (8001b98 <HAL_RCC_OscConfig+0x990>)
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	461a      	mov	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7fe ff18 	bl	8000798 <HAL_GetTick>
 8001968:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196e:	f7fe ff13 	bl	8000798 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d902      	bls.n	8001984 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	f000 bc5f 	b.w	8002242 <HAL_RCC_OscConfig+0x103a>
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001994:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019d4:	2202      	movs	r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	4b68      	ldr	r3, [pc, #416]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 80019f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80019fc:	2102      	movs	r1, #2
 80019fe:	6019      	str	r1, [r3, #0]
 8001a00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f1a3 	rbit	r1, r3
 8001a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a12:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a16:	6019      	str	r1, [r3, #0]
  return result;
 8001a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d197      	bne.n	800196e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 819c 	beq.w	8001d8c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b4b      	ldr	r3, [pc, #300]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b48      	ldr	r3, [pc, #288]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <HAL_RCC_OscConfig+0x994>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d11a      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8001b9c <HAL_RCC_OscConfig+0x994>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a3d      	ldr	r2, [pc, #244]	@ (8001b9c <HAL_RCC_OscConfig+0x994>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aaa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aac:	f7fe fe74 	bl	8000798 <HAL_GetTick>
 8001ab0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7fe fe6f 	bl	8000798 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	@ 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e3bb      	b.n	8002242 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <HAL_RCC_OscConfig+0x994>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0ef      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ada:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x8ec>
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a2a      	ldr	r2, [pc, #168]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	e035      	b.n	8001b60 <HAL_RCC_OscConfig+0x958>
 8001af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x916>
 8001b04:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a22      	ldr	r2, [pc, #136]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a1f      	ldr	r2, [pc, #124]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b16:	f023 0304 	bic.w	r3, r3, #4
 8001b1a:	6213      	str	r3, [r2, #32]
 8001b1c:	e020      	b.n	8001b60 <HAL_RCC_OscConfig+0x958>
 8001b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x940>
 8001b2e:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6213      	str	r3, [r2, #32]
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a15      	ldr	r2, [pc, #84]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0x958>
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a11      	ldr	r2, [pc, #68]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a0e      	ldr	r2, [pc, #56]	@ (8001b94 <HAL_RCC_OscConfig+0x98c>)
 8001b5a:	f023 0304 	bic.w	r3, r3, #4
 8001b5e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 8085 	beq.w	8001c7c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7fe fe11 	bl	8000798 <HAL_GetTick>
 8001b76:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	e011      	b.n	8001ba0 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7fe fe0c 	bl	8000798 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d907      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e356      	b.n	8002242 <HAL_RCC_OscConfig+0x103a>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	10908120 	.word	0x10908120
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ba8:	2202      	movs	r2, #2
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bbe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001be6:	601a      	str	r2, [r3, #0]
  return result;
 8001be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001bf0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_OscConfig+0xa00>
 8001c02:	4b98      	ldr	r3, [pc, #608]	@ (8001e64 <HAL_RCC_OscConfig+0xc5c>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	e013      	b.n	8001c30 <HAL_RCC_OscConfig+0xa28>
 8001c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c10:	2202      	movs	r2, #2
 8001c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c18:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c26:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	4b8d      	ldr	r3, [pc, #564]	@ (8001e64 <HAL_RCC_OscConfig+0xc5c>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c34:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c38:	2102      	movs	r1, #2
 8001c3a:	6011      	str	r1, [r2, #0]
 8001c3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c40:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	fa92 f1a2 	rbit	r1, r2
 8001c4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c4e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001c52:	6011      	str	r1, [r2, #0]
  return result;
 8001c54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c58:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	fab2 f282 	clz	r2, r2
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f002 021f 	and.w	r2, r2, #31
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d080      	beq.n	8001b7c <HAL_RCC_OscConfig+0x974>
 8001c7a:	e07d      	b.n	8001d78 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7fe fd8c 	bl	8000798 <HAL_GetTick>
 8001c80:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	e00b      	b.n	8001c9e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7fe fd87 	bl	8000798 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e2d1      	b.n	8002242 <HAL_RCC_OscConfig+0x103a>
 8001c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cae:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001cca:	2202      	movs	r2, #2
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ce4:	601a      	str	r2, [r3, #0]
  return result;
 8001ce6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001cee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_OscConfig+0xafe>
 8001d00:	4b58      	ldr	r3, [pc, #352]	@ (8001e64 <HAL_RCC_OscConfig+0xc5c>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	e013      	b.n	8001d2e <HAL_RCC_OscConfig+0xb26>
 8001d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d16:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d24:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e64 <HAL_RCC_OscConfig+0xc5c>)
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d32:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d36:	2102      	movs	r1, #2
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d3e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	fa92 f1a2 	rbit	r1, r2
 8001d48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d4c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001d50:	6011      	str	r1, [r2, #0]
  return result;
 8001d52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d56:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d186      	bne.n	8001c86 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d78:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d80:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <HAL_RCC_OscConfig+0xc5c>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	4a37      	ldr	r2, [pc, #220]	@ (8001e64 <HAL_RCC_OscConfig+0xc5c>)
 8001d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8251 	beq.w	8002240 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9e:	4b31      	ldr	r3, [pc, #196]	@ (8001e64 <HAL_RCC_OscConfig+0xc5c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	f000 820f 	beq.w	80021ca <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	f040 8165 	bne.w	8002088 <HAL_RCC_OscConfig+0xe80>
 8001dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001dc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dde:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001de2:	601a      	str	r2, [r3, #0]
  return result;
 8001de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001dec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001df8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7fe fcc8 	bl	8000798 <HAL_GetTick>
 8001e08:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0c:	e009      	b.n	8001e22 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe fcc3 	bl	8000798 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e20f      	b.n	8002242 <HAL_RCC_OscConfig+0x103a>
 8001e22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e26:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e42:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e46:	601a      	str	r2, [r3, #0]
  return result;
 8001e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e4c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e5a:	d805      	bhi.n	8001e68 <HAL_RCC_OscConfig+0xc60>
 8001e5c:	4b01      	ldr	r3, [pc, #4]	@ (8001e64 <HAL_RCC_OscConfig+0xc5c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	e02a      	b.n	8001eb8 <HAL_RCC_OscConfig+0xcb0>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e88:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e92:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fa93 f2a3 	rbit	r2, r3
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	4bca      	ldr	r3, [pc, #808]	@ (80021e0 <HAL_RCC_OscConfig+0xfd8>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ebc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ec0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ec4:	6011      	str	r1, [r2, #0]
 8001ec6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	fa92 f1a2 	rbit	r1, r2
 8001ed4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ed8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001edc:	6011      	str	r1, [r2, #0]
  return result;
 8001ede:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ee2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	fab2 f282 	clz	r2, r2
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f042 0220 	orr.w	r2, r2, #32
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f002 021f 	and.w	r2, r2, #31
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d184      	bne.n	8001e0e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f04:	4bb6      	ldr	r3, [pc, #728]	@ (80021e0 <HAL_RCC_OscConfig+0xfd8>)
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	f023 020f 	bic.w	r2, r3, #15
 8001f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	49b1      	ldr	r1, [pc, #708]	@ (80021e0 <HAL_RCC_OscConfig+0xfd8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001f1e:	4bb0      	ldr	r3, [pc, #704]	@ (80021e0 <HAL_RCC_OscConfig+0xfd8>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a19      	ldr	r1, [r3, #32]
 8001f32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f36:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	49a7      	ldr	r1, [pc, #668]	@ (80021e0 <HAL_RCC_OscConfig+0xfd8>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
 8001f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f58:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f2a3 	rbit	r2, r3
 8001f62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f66:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f6a:	601a      	str	r2, [r3, #0]
  return result;
 8001f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f70:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f74:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	461a      	mov	r2, r3
 8001f88:	2301      	movs	r3, #1
 8001f8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fc04 	bl	8000798 <HAL_GetTick>
 8001f90:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f94:	e009      	b.n	8001faa <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f96:	f7fe fbff 	bl	8000798 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e14b      	b.n	8002242 <HAL_RCC_OscConfig+0x103a>
 8001faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001fb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fbc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001fce:	601a      	str	r2, [r3, #0]
  return result;
 8001fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001fd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fe2:	d802      	bhi.n	8001fea <HAL_RCC_OscConfig+0xde2>
 8001fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80021e0 <HAL_RCC_OscConfig+0xfd8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	e027      	b.n	800203a <HAL_RCC_OscConfig+0xe32>
 8001fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ff2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002014:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002018:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002022:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002030:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	4b6a      	ldr	r3, [pc, #424]	@ (80021e0 <HAL_RCC_OscConfig+0xfd8>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800203e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002042:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002046:	6011      	str	r1, [r2, #0]
 8002048:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800204c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	fa92 f1a2 	rbit	r1, r2
 8002056:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800205a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800205e:	6011      	str	r1, [r2, #0]
  return result;
 8002060:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002064:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d087      	beq.n	8001f96 <HAL_RCC_OscConfig+0xd8e>
 8002086:	e0db      	b.n	8002240 <HAL_RCC_OscConfig+0x1038>
 8002088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002090:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f2a3 	rbit	r2, r3
 80020a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020ac:	601a      	str	r2, [r3, #0]
  return result;
 80020ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020b6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020c2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	461a      	mov	r2, r3
 80020ca:	2300      	movs	r3, #0
 80020cc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe fb63 	bl	8000798 <HAL_GetTick>
 80020d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	e009      	b.n	80020ec <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe fb5e 	bl	8000798 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0aa      	b.n	8002242 <HAL_RCC_OscConfig+0x103a>
 80020ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002110:	601a      	str	r2, [r3, #0]
  return result;
 8002112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002116:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800211a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b3f      	cmp	r3, #63	@ 0x3f
 8002124:	d802      	bhi.n	800212c <HAL_RCC_OscConfig+0xf24>
 8002126:	4b2e      	ldr	r3, [pc, #184]	@ (80021e0 <HAL_RCC_OscConfig+0xfd8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	e027      	b.n	800217c <HAL_RCC_OscConfig+0xf74>
 800212c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002130:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002134:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f2a3 	rbit	r2, r3
 8002148:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002156:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800215a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002164:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002172:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_RCC_OscConfig+0xfd8>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002180:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002184:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002188:	6011      	str	r1, [r2, #0]
 800218a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800218e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fa92 f1a2 	rbit	r1, r2
 8002198:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800219c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80021a0:	6011      	str	r1, [r2, #0]
  return result;
 80021a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021a6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f042 0220 	orr.w	r2, r2, #32
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f002 021f 	and.w	r2, r2, #31
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d187      	bne.n	80020d8 <HAL_RCC_OscConfig+0xed0>
 80021c8:	e03a      	b.n	8002240 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d104      	bne.n	80021e4 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e031      	b.n	8002242 <HAL_RCC_OscConfig+0x103a>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_RCC_OscConfig+0x1044>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80021ec:	4b17      	ldr	r3, [pc, #92]	@ (800224c <HAL_RCC_OscConfig+0x1044>)
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80021f8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80021fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002200:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	429a      	cmp	r2, r3
 800220a:	d117      	bne.n	800223c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800220c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002210:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002214:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002218:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002220:	429a      	cmp	r2, r3
 8002222:	d10b      	bne.n	800223c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002228:	f003 020f 	and.w	r2, r3, #15
 800222c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002230:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000

08002250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b09e      	sub	sp, #120	@ 0x78
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e154      	b.n	8002512 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002268:	4b89      	ldr	r3, [pc, #548]	@ (8002490 <HAL_RCC_ClockConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d910      	bls.n	8002298 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b86      	ldr	r3, [pc, #536]	@ (8002490 <HAL_RCC_ClockConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4984      	ldr	r1, [pc, #528]	@ (8002490 <HAL_RCC_ClockConfig+0x240>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b82      	ldr	r3, [pc, #520]	@ (8002490 <HAL_RCC_ClockConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e13c      	b.n	8002512 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4978      	ldr	r1, [pc, #480]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80cd 	beq.w	800245e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d137      	bne.n	800233c <HAL_RCC_ClockConfig+0xec>
 80022cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80022da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80022e4:	d802      	bhi.n	80022ec <HAL_RCC_ClockConfig+0x9c>
 80022e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	e00f      	b.n	800230c <HAL_RCC_ClockConfig+0xbc>
 80022ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80022fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002300:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002308:	4b62      	ldr	r3, [pc, #392]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002310:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002312:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002314:	fa92 f2a2 	rbit	r2, r2
 8002318:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800231a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800231c:	fab2 f282 	clz	r2, r2
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f042 0220 	orr.w	r2, r2, #32
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	f002 021f 	and.w	r2, r2, #31
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d171      	bne.n	800241c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0ea      	b.n	8002512 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d137      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x164>
 8002344:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002348:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b3f      	cmp	r3, #63	@ 0x3f
 800235c:	d802      	bhi.n	8002364 <HAL_RCC_ClockConfig+0x114>
 800235e:	4b4d      	ldr	r3, [pc, #308]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	e00f      	b.n	8002384 <HAL_RCC_ClockConfig+0x134>
 8002364:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002368:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	647b      	str	r3, [r7, #68]	@ 0x44
 8002372:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002376:	643b      	str	r3, [r7, #64]	@ 0x40
 8002378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002380:	4b44      	ldr	r3, [pc, #272]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002388:	63ba      	str	r2, [r7, #56]	@ 0x38
 800238a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800238c:	fa92 f2a2 	rbit	r2, r2
 8002390:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f002 021f 	and.w	r2, r2, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d135      	bne.n	800241c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0ae      	b.n	8002512 <HAL_RCC_ClockConfig+0x2c2>
 80023b4:	2302      	movs	r3, #2
 80023b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80023ca:	d802      	bhi.n	80023d2 <HAL_RCC_ClockConfig+0x182>
 80023cc:	4b31      	ldr	r3, [pc, #196]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	e00d      	b.n	80023ee <HAL_RCC_ClockConfig+0x19e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023de:	2302      	movs	r3, #2
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	2202      	movs	r2, #2
 80023f0:	61ba      	str	r2, [r7, #24]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	fa92 f2a2 	rbit	r2, r2
 80023f8:	617a      	str	r2, [r7, #20]
  return result;
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f042 0220 	orr.w	r2, r2, #32
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f002 021f 	and.w	r2, r2, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e07a      	b.n	8002512 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241c:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 0203 	bic.w	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	491a      	ldr	r1, [pc, #104]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242e:	f7fe f9b3 	bl	8000798 <HAL_GetTick>
 8002432:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002434:	e00a      	b.n	800244c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002436:	f7fe f9af 	bl	8000798 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e062      	b.n	8002512 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <HAL_RCC_ClockConfig+0x244>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 020c 	and.w	r2, r3, #12
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	429a      	cmp	r2, r3
 800245c:	d1eb      	bne.n	8002436 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800245e:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <HAL_RCC_ClockConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d215      	bcs.n	8002498 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_RCC_ClockConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 0207 	bic.w	r2, r3, #7
 8002474:	4906      	ldr	r1, [pc, #24]	@ (8002490 <HAL_RCC_ClockConfig+0x240>)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247c:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <HAL_RCC_ClockConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d006      	beq.n	8002498 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e041      	b.n	8002512 <HAL_RCC_ClockConfig+0x2c2>
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000
 8002494:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <HAL_RCC_ClockConfig+0x2cc>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	491a      	ldr	r1, [pc, #104]	@ (800251c <HAL_RCC_ClockConfig+0x2cc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <HAL_RCC_ClockConfig+0x2cc>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4912      	ldr	r1, [pc, #72]	@ (800251c <HAL_RCC_ClockConfig+0x2cc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024d6:	f000 f829 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024da:	4601      	mov	r1, r0
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HAL_RCC_ClockConfig+0x2cc>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e4:	22f0      	movs	r2, #240	@ 0xf0
 80024e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	fa92 f2a2 	rbit	r2, r2
 80024ee:	60fa      	str	r2, [r7, #12]
  return result;
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	fab2 f282 	clz	r2, r2
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	40d3      	lsrs	r3, r2
 80024fa:	4a09      	ldr	r2, [pc, #36]	@ (8002520 <HAL_RCC_ClockConfig+0x2d0>)
 80024fc:	5cd3      	ldrb	r3, [r2, r3]
 80024fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002502:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <HAL_RCC_ClockConfig+0x2d4>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002506:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <HAL_RCC_ClockConfig+0x2d8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f900 	bl	8000710 <HAL_InitTick>
  
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3778      	adds	r7, #120	@ 0x78
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	08003db8 	.word	0x08003db8
 8002524:	20000008 	.word	0x20000008
 8002528:	2000000c 	.word	0x2000000c

0800252c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002546:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d002      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x30>
 8002556:	2b08      	cmp	r3, #8
 8002558:	d003      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0x36>
 800255a:	e029      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800255c:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800255e:	613b      	str	r3, [r7, #16]
      break;
 8002560:	e029      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	0c9b      	lsrs	r3, r3, #18
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	4a18      	ldr	r2, [pc, #96]	@ (80025cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800256c:	5cd3      	ldrb	r3, [r2, r3]
 800256e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002570:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	4a15      	ldr	r2, [pc, #84]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002588:	4a0f      	ldr	r2, [pc, #60]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e007      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800259a:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	613b      	str	r3, [r7, #16]
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025b2:	613b      	str	r3, [r7, #16]
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	693b      	ldr	r3, [r7, #16]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08003dd0 	.word	0x08003dd0
 80025d0:	08003de0 	.word	0x08003de0

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b03      	ldr	r3, [pc, #12]	@ (80025e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000008 	.word	0x20000008

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025f2:	f7ff ffef 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002600:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002604:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	fa92 f2a2 	rbit	r2, r2
 800260c:	603a      	str	r2, [r7, #0]
  return result;
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	40d3      	lsrs	r3, r2
 8002618:	4a04      	ldr	r2, [pc, #16]	@ (800262c <HAL_RCC_GetPCLK1Freq+0x40>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	08003dc8 	.word	0x08003dc8

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002636:	f7ff ffcd 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 800263a:	4601      	mov	r1, r0
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002644:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002648:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	fa92 f2a2 	rbit	r2, r2
 8002650:	603a      	str	r2, [r7, #0]
  return result;
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	40d3      	lsrs	r3, r2
 800265c:	4a04      	ldr	r2, [pc, #16]	@ (8002670 <HAL_RCC_GetPCLK2Freq+0x40>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	08003dc8 	.word	0x08003dc8

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b092      	sub	sp, #72	@ 0x48
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80d2 	beq.w	800283c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002698:	4b4d      	ldr	r3, [pc, #308]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10e      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	4b4a      	ldr	r3, [pc, #296]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4a49      	ldr	r2, [pc, #292]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	61d3      	str	r3, [r2, #28]
 80026b0:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026bc:	2301      	movs	r3, #1
 80026be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b44      	ldr	r3, [pc, #272]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d118      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a40      	ldr	r2, [pc, #256]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe f85d 	bl	8000798 <HAL_GetTick>
 80026de:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e008      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e2:	f7fe f859 	bl	8000798 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b64      	cmp	r3, #100	@ 0x64
 80026ee:	d901      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1d4      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002700:	4b33      	ldr	r3, [pc, #204]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002708:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800270a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8082 	beq.w	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800271a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800271c:	429a      	cmp	r2, r3
 800271e:	d07a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002720:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800272a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800272e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	461a      	mov	r2, r3
 800274a:	2301      	movs	r3, #1
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002752:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800275c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4b1c      	ldr	r3, [pc, #112]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	461a      	mov	r2, r3
 800276e:	2300      	movs	r3, #0
 8002770:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002772:	4a17      	ldr	r2, [pc, #92]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002776:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d049      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe f809 	bl	8000798 <HAL_GetTick>
 8002786:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe f805 	bl	8000798 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e17e      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80027a0:	2302      	movs	r3, #2
 80027a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	61fb      	str	r3, [r7, #28]
  return result;
 80027b8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80027ca:	4b01      	ldr	r3, [pc, #4]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	e00d      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x178>
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40007000 	.word	0x40007000
 80027d8:	10908100 	.word	0x10908100
 80027dc:	2302      	movs	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	2202      	movs	r2, #2
 80027ee:	613a      	str	r2, [r7, #16]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	fa92 f2a2 	rbit	r2, r2
 80027f6:	60fa      	str	r2, [r7, #12]
  return result;
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	fab2 f282 	clz	r2, r2
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	f002 021f 	and.w	r2, r2, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f202 	lsl.w	r2, r1, r2
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0b9      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002816:	4b8f      	ldr	r3, [pc, #572]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	498c      	ldr	r1, [pc, #560]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002828:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	4b88      	ldr	r3, [pc, #544]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	4a87      	ldr	r2, [pc, #540]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002848:	4b82      	ldr	r3, [pc, #520]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	f023 0203 	bic.w	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	497f      	ldr	r1, [pc, #508]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002866:	4b7b      	ldr	r3, [pc, #492]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	4978      	ldr	r1, [pc, #480]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002884:	4b73      	ldr	r3, [pc, #460]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	4970      	ldr	r1, [pc, #448]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f023 0210 	bic.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4969      	ldr	r1, [pc, #420]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028c0:	4b64      	ldr	r3, [pc, #400]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	4961      	ldr	r1, [pc, #388]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028de:	4b5d      	ldr	r3, [pc, #372]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f023 0220 	bic.w	r2, r3, #32
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	495a      	ldr	r1, [pc, #360]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028fc:	4b55      	ldr	r3, [pc, #340]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	4952      	ldr	r1, [pc, #328]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800291a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	494b      	ldr	r1, [pc, #300]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002928:	4313      	orrs	r3, r2
 800292a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002938:	4b46      	ldr	r3, [pc, #280]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4943      	ldr	r1, [pc, #268]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002956:	4b3f      	ldr	r3, [pc, #252]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	493c      	ldr	r1, [pc, #240]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002974:	4b37      	ldr	r3, [pc, #220]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	4934      	ldr	r1, [pc, #208]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	4313      	orrs	r3, r2
 8002984:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002992:	4b30      	ldr	r3, [pc, #192]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002996:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299e:	492d      	ldr	r1, [pc, #180]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029b0:	4b28      	ldr	r3, [pc, #160]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029bc:	4925      	ldr	r1, [pc, #148]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029ce:	4b21      	ldr	r3, [pc, #132]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	491e      	ldr	r1, [pc, #120]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80029ec:	4b19      	ldr	r3, [pc, #100]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	4916      	ldr	r1, [pc, #88]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a0a:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a16:	490f      	ldr	r1, [pc, #60]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a28:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	4907      	ldr	r1, [pc, #28]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a46:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	e002      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5a:	4913      	ldr	r1, [pc, #76]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	490b      	ldr	r1, [pc, #44]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a96:	4904      	ldr	r1, [pc, #16]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3748      	adds	r7, #72	@ 0x48
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e040      	b.n	8002b40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fd fd14 	bl	80004fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	@ 0x24
 8002ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fe06 	bl	8003704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fc2f 	bl	800335c <UART_SetConfig>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e01b      	b.n	8002b40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fe85 	bl	8003848 <UART_CheckIdleState>
 8002b3e:	4603      	mov	r3, r0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d165      	bne.n	8002c2a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_UART_Transmit_DMA+0x22>
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e05e      	b.n	8002c2c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2221      	movs	r2, #33	@ 0x21
 8002b90:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d027      	beq.n	8002bea <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	4a25      	ldr	r2, [pc, #148]	@ (8002c34 <HAL_UART_Transmit_DMA+0xec>)
 8002ba0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba6:	4a24      	ldr	r2, [pc, #144]	@ (8002c38 <HAL_UART_Transmit_DMA+0xf0>)
 8002ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	4a23      	ldr	r2, [pc, #140]	@ (8002c3c <HAL_UART_Transmit_DMA+0xf4>)
 8002bb0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3328      	adds	r3, #40	@ 0x28
 8002bca:	461a      	mov	r2, r3
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	f7fd ff6b 	bl	8000aa8 <HAL_DMA_Start_IT>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2210      	movs	r2, #16
 8002bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e020      	b.n	8002c2c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2240      	movs	r2, #64	@ 0x40
 8002bf0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	613b      	str	r3, [r7, #16]
   return(result);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3308      	adds	r3, #8
 8002c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c12:	623a      	str	r2, [r7, #32]
 8002c14:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	69f9      	ldr	r1, [r7, #28]
 8002c18:	6a3a      	ldr	r2, [r7, #32]
 8002c1a:	e841 2300 	strex	r3, r2, [r1]
 8002c1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e5      	bne.n	8002bf2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3728      	adds	r7, #40	@ 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	08003b87 	.word	0x08003b87
 8002c38:	08003c1b 	.word	0x08003c1b
 8002c3c:	08003c37 	.word	0x08003c37

08002c40 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b090      	sub	sp, #64	@ 0x40
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c54:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c60:	2b80      	cmp	r3, #128	@ 0x80
 8002c62:	d139      	bne.n	8002cd8 <HAL_UART_DMAStop+0x98>
 8002c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c66:	2b21      	cmp	r3, #33	@ 0x21
 8002c68:	d136      	bne.n	8002cd8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3308      	adds	r3, #8
 8002c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d015      	beq.n	8002cd2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd ff5b 	bl	8000b66 <HAL_DMA_Abort>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe f872 	bl	8000da4 <HAL_DMA_GetError>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d105      	bne.n	8002cd2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e044      	b.n	8002d5c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fecd 	bl	8003a72 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce2:	2b40      	cmp	r3, #64	@ 0x40
 8002ce4:	d139      	bne.n	8002d5a <HAL_UART_DMAStop+0x11a>
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce8:	2b22      	cmp	r3, #34	@ 0x22
 8002cea:	d136      	bne.n	8002d5a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3308      	adds	r3, #8
 8002d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d0c:	61ba      	str	r2, [r7, #24]
 8002d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6979      	ldr	r1, [r7, #20]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e5      	bne.n	8002cec <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d015      	beq.n	8002d54 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd ff1a 	bl	8000b66 <HAL_DMA_Abort>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f831 	bl	8000da4 <HAL_DMA_GetError>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d105      	bne.n	8002d54 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e003      	b.n	8002d5c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 feb2 	bl	8003abe <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3740      	adds	r7, #64	@ 0x40
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b0ba      	sub	sp, #232	@ 0xe8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002d8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002d92:	4013      	ands	r3, r2
 8002d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d115      	bne.n	8002dcc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00f      	beq.n	8002dcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 82ab 	beq.w	8003318 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4798      	blx	r3
      }
      return;
 8002dca:	e2a5      	b.n	8003318 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8117 	beq.w	8003004 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002de6:	4b85      	ldr	r3, [pc, #532]	@ (8002ffc <HAL_UART_IRQHandler+0x298>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 810a 	beq.w	8003004 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d011      	beq.n	8002e20 <HAL_UART_IRQHandler+0xbc>
 8002dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d011      	beq.n	8002e50 <HAL_UART_IRQHandler+0xec>
 8002e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e46:	f043 0204 	orr.w	r2, r3, #4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d011      	beq.n	8002e80 <HAL_UART_IRQHandler+0x11c>
 8002e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d017      	beq.n	8002ebc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb2:	f043 0208 	orr.w	r2, r3, #8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <HAL_UART_IRQHandler+0x18a>
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ecc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8211 	beq.w	800331c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f36:	2b40      	cmp	r3, #64	@ 0x40
 8002f38:	d005      	beq.n	8002f46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d04f      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fdb9 	bl	8003abe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f56:	2b40      	cmp	r3, #64	@ 0x40
 8002f58:	d141      	bne.n	8002fde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3308      	adds	r3, #8
 8002f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3308      	adds	r3, #8
 8002f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1d9      	bne.n	8002f5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d013      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb2:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <HAL_UART_IRQHandler+0x29c>)
 8002fb4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fe11 	bl	8000be2 <HAL_DMA_Abort_IT>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d017      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd4:	e00f      	b.n	8002ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9aa 	bl	8003330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e00b      	b.n	8002ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f9a6 	bl	8003330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	e007      	b.n	8002ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f9a2 	bl	8003330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002ff4:	e192      	b.n	800331c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff6:	bf00      	nop
    return;
 8002ff8:	e190      	b.n	800331c <HAL_UART_IRQHandler+0x5b8>
 8002ffa:	bf00      	nop
 8002ffc:	04000120 	.word	0x04000120
 8003000:	08003cb5 	.word	0x08003cb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003008:	2b01      	cmp	r3, #1
 800300a:	f040 814b 	bne.w	80032a4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8144 	beq.w	80032a4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800301c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 813d 	beq.w	80032a4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2210      	movs	r2, #16
 8003030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303c:	2b40      	cmp	r3, #64	@ 0x40
 800303e:	f040 80b5 	bne.w	80031ac <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800304e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8164 	beq.w	8003320 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800305e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003062:	429a      	cmp	r2, r3
 8003064:	f080 815c 	bcs.w	8003320 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800306e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b20      	cmp	r3, #32
 800307a:	f000 8086 	beq.w	800318a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800308a:	e853 3f00 	ldrex	r3, [r3]
 800308e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003096:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800309a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030ac:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1da      	bne.n	800307e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3308      	adds	r3, #8
 80030ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3308      	adds	r3, #8
 80030e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e1      	bne.n	80030c8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3308      	adds	r3, #8
 800310a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800311a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3308      	adds	r3, #8
 8003124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003128:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800312a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800312e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e3      	bne.n	8003104 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003152:	e853 3f00 	ldrex	r3, [r3]
 8003156:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800315a:	f023 0310 	bic.w	r3, r3, #16
 800315e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800316c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800316e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003172:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800317a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e4      	bne.n	800314a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd fcee 	bl	8000b66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2202      	movs	r2, #2
 800318e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800319c:	b29b      	uxth	r3, r3
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8cd 	bl	8003344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031aa:	e0b9      	b.n	8003320 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80ab 	beq.w	8003324 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80031ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80a6 	beq.w	8003324 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80031fc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e4      	bne.n	80031d8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3308      	adds	r3, #8
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	623b      	str	r3, [r7, #32]
   return(result);
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3308      	adds	r3, #8
 800322e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003232:	633a      	str	r2, [r7, #48]	@ 0x30
 8003234:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e3      	bne.n	800320e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60fb      	str	r3, [r7, #12]
   return(result);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0310 	bic.w	r3, r3, #16
 800326e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	617b      	str	r3, [r7, #20]
   return(result);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e4      	bne.n	800325a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800329a:	4619      	mov	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f851 	bl	8003344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032a2:	e03f      	b.n	8003324 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <HAL_UART_IRQHandler+0x56a>
 80032b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80032c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fd34 	bl	8003d34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032cc:	e02d      	b.n	800332a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00e      	beq.n	80032f8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01c      	beq.n	8003328 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
    }
    return;
 80032f6:	e017      	b.n	8003328 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_UART_IRQHandler+0x5c6>
 8003304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00c      	beq.n	800332a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fce5 	bl	8003ce0 <UART_EndTransmit_IT>
    return;
 8003316:	e008      	b.n	800332a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003318:	bf00      	nop
 800331a:	e006      	b.n	800332a <HAL_UART_IRQHandler+0x5c6>
    return;
 800331c:	bf00      	nop
 800331e:	e004      	b.n	800332a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003320:	bf00      	nop
 8003322:	e002      	b.n	800332a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003324:	bf00      	nop
 8003326:	e000      	b.n	800332a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003328:	bf00      	nop
  }

}
 800332a:	37e8      	adds	r7, #232	@ 0xe8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b92      	ldr	r3, [pc, #584]	@ (80035d0 <UART_SetConfig+0x274>)
 8003388:	4013      	ands	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	6979      	ldr	r1, [r7, #20]
 8003390:	430b      	orrs	r3, r1
 8003392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a80      	ldr	r2, [pc, #512]	@ (80035d4 <UART_SetConfig+0x278>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d120      	bne.n	800341a <UART_SetConfig+0xbe>
 80033d8:	4b7f      	ldr	r3, [pc, #508]	@ (80035d8 <UART_SetConfig+0x27c>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d817      	bhi.n	8003414 <UART_SetConfig+0xb8>
 80033e4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ec <UART_SetConfig+0x90>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	08003409 	.word	0x08003409
 80033f4:	0800340f 	.word	0x0800340f
 80033f8:	08003403 	.word	0x08003403
 80033fc:	2301      	movs	r3, #1
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e0b5      	b.n	800356e <UART_SetConfig+0x212>
 8003402:	2302      	movs	r3, #2
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e0b2      	b.n	800356e <UART_SetConfig+0x212>
 8003408:	2304      	movs	r3, #4
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e0af      	b.n	800356e <UART_SetConfig+0x212>
 800340e:	2308      	movs	r3, #8
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e0ac      	b.n	800356e <UART_SetConfig+0x212>
 8003414:	2310      	movs	r3, #16
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e0a9      	b.n	800356e <UART_SetConfig+0x212>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6f      	ldr	r2, [pc, #444]	@ (80035dc <UART_SetConfig+0x280>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d124      	bne.n	800346e <UART_SetConfig+0x112>
 8003424:	4b6c      	ldr	r3, [pc, #432]	@ (80035d8 <UART_SetConfig+0x27c>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800342c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003430:	d011      	beq.n	8003456 <UART_SetConfig+0xfa>
 8003432:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003436:	d817      	bhi.n	8003468 <UART_SetConfig+0x10c>
 8003438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800343c:	d011      	beq.n	8003462 <UART_SetConfig+0x106>
 800343e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003442:	d811      	bhi.n	8003468 <UART_SetConfig+0x10c>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <UART_SetConfig+0xf4>
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344c:	d006      	beq.n	800345c <UART_SetConfig+0x100>
 800344e:	e00b      	b.n	8003468 <UART_SetConfig+0x10c>
 8003450:	2300      	movs	r3, #0
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e08b      	b.n	800356e <UART_SetConfig+0x212>
 8003456:	2302      	movs	r3, #2
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e088      	b.n	800356e <UART_SetConfig+0x212>
 800345c:	2304      	movs	r3, #4
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e085      	b.n	800356e <UART_SetConfig+0x212>
 8003462:	2308      	movs	r3, #8
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e082      	b.n	800356e <UART_SetConfig+0x212>
 8003468:	2310      	movs	r3, #16
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e07f      	b.n	800356e <UART_SetConfig+0x212>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5b      	ldr	r2, [pc, #364]	@ (80035e0 <UART_SetConfig+0x284>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d124      	bne.n	80034c2 <UART_SetConfig+0x166>
 8003478:	4b57      	ldr	r3, [pc, #348]	@ (80035d8 <UART_SetConfig+0x27c>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003480:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003484:	d011      	beq.n	80034aa <UART_SetConfig+0x14e>
 8003486:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800348a:	d817      	bhi.n	80034bc <UART_SetConfig+0x160>
 800348c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003490:	d011      	beq.n	80034b6 <UART_SetConfig+0x15a>
 8003492:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003496:	d811      	bhi.n	80034bc <UART_SetConfig+0x160>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <UART_SetConfig+0x148>
 800349c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034a0:	d006      	beq.n	80034b0 <UART_SetConfig+0x154>
 80034a2:	e00b      	b.n	80034bc <UART_SetConfig+0x160>
 80034a4:	2300      	movs	r3, #0
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e061      	b.n	800356e <UART_SetConfig+0x212>
 80034aa:	2302      	movs	r3, #2
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e05e      	b.n	800356e <UART_SetConfig+0x212>
 80034b0:	2304      	movs	r3, #4
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e05b      	b.n	800356e <UART_SetConfig+0x212>
 80034b6:	2308      	movs	r3, #8
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e058      	b.n	800356e <UART_SetConfig+0x212>
 80034bc:	2310      	movs	r3, #16
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e055      	b.n	800356e <UART_SetConfig+0x212>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a47      	ldr	r2, [pc, #284]	@ (80035e4 <UART_SetConfig+0x288>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d124      	bne.n	8003516 <UART_SetConfig+0x1ba>
 80034cc:	4b42      	ldr	r3, [pc, #264]	@ (80035d8 <UART_SetConfig+0x27c>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80034d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034d8:	d011      	beq.n	80034fe <UART_SetConfig+0x1a2>
 80034da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034de:	d817      	bhi.n	8003510 <UART_SetConfig+0x1b4>
 80034e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034e4:	d011      	beq.n	800350a <UART_SetConfig+0x1ae>
 80034e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034ea:	d811      	bhi.n	8003510 <UART_SetConfig+0x1b4>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <UART_SetConfig+0x19c>
 80034f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f4:	d006      	beq.n	8003504 <UART_SetConfig+0x1a8>
 80034f6:	e00b      	b.n	8003510 <UART_SetConfig+0x1b4>
 80034f8:	2300      	movs	r3, #0
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e037      	b.n	800356e <UART_SetConfig+0x212>
 80034fe:	2302      	movs	r3, #2
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e034      	b.n	800356e <UART_SetConfig+0x212>
 8003504:	2304      	movs	r3, #4
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e031      	b.n	800356e <UART_SetConfig+0x212>
 800350a:	2308      	movs	r3, #8
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e02e      	b.n	800356e <UART_SetConfig+0x212>
 8003510:	2310      	movs	r3, #16
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e02b      	b.n	800356e <UART_SetConfig+0x212>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a33      	ldr	r2, [pc, #204]	@ (80035e8 <UART_SetConfig+0x28c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d124      	bne.n	800356a <UART_SetConfig+0x20e>
 8003520:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <UART_SetConfig+0x27c>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003528:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800352c:	d011      	beq.n	8003552 <UART_SetConfig+0x1f6>
 800352e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003532:	d817      	bhi.n	8003564 <UART_SetConfig+0x208>
 8003534:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003538:	d011      	beq.n	800355e <UART_SetConfig+0x202>
 800353a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800353e:	d811      	bhi.n	8003564 <UART_SetConfig+0x208>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <UART_SetConfig+0x1f0>
 8003544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003548:	d006      	beq.n	8003558 <UART_SetConfig+0x1fc>
 800354a:	e00b      	b.n	8003564 <UART_SetConfig+0x208>
 800354c:	2300      	movs	r3, #0
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e00d      	b.n	800356e <UART_SetConfig+0x212>
 8003552:	2302      	movs	r3, #2
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e00a      	b.n	800356e <UART_SetConfig+0x212>
 8003558:	2304      	movs	r3, #4
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e007      	b.n	800356e <UART_SetConfig+0x212>
 800355e:	2308      	movs	r3, #8
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e004      	b.n	800356e <UART_SetConfig+0x212>
 8003564:	2310      	movs	r3, #16
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e001      	b.n	800356e <UART_SetConfig+0x212>
 800356a:	2310      	movs	r3, #16
 800356c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003576:	d16b      	bne.n	8003650 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003578:	7ffb      	ldrb	r3, [r7, #31]
 800357a:	2b08      	cmp	r3, #8
 800357c:	d838      	bhi.n	80035f0 <UART_SetConfig+0x294>
 800357e:	a201      	add	r2, pc, #4	@ (adr r2, 8003584 <UART_SetConfig+0x228>)
 8003580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003584:	080035a9 	.word	0x080035a9
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035b9 	.word	0x080035b9
 8003590:	080035f1 	.word	0x080035f1
 8003594:	080035bf 	.word	0x080035bf
 8003598:	080035f1 	.word	0x080035f1
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	080035f1 	.word	0x080035f1
 80035a4:	080035c7 	.word	0x080035c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7ff f820 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 80035ac:	61b8      	str	r0, [r7, #24]
        break;
 80035ae:	e024      	b.n	80035fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b0:	f7ff f83e 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80035b4:	61b8      	str	r0, [r7, #24]
        break;
 80035b6:	e020      	b.n	80035fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <UART_SetConfig+0x290>)
 80035ba:	61bb      	str	r3, [r7, #24]
        break;
 80035bc:	e01d      	b.n	80035fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7fe ffb5 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80035c2:	61b8      	str	r0, [r7, #24]
        break;
 80035c4:	e019      	b.n	80035fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ca:	61bb      	str	r3, [r7, #24]
        break;
 80035cc:	e015      	b.n	80035fa <UART_SetConfig+0x29e>
 80035ce:	bf00      	nop
 80035d0:	efff69f3 	.word	0xefff69f3
 80035d4:	40013800 	.word	0x40013800
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40004400 	.word	0x40004400
 80035e0:	40004800 	.word	0x40004800
 80035e4:	40004c00 	.word	0x40004c00
 80035e8:	40005000 	.word	0x40005000
 80035ec:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	77bb      	strb	r3, [r7, #30]
        break;
 80035f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d073      	beq.n	80036e8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	005a      	lsls	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d916      	bls.n	800364a <UART_SetConfig+0x2ee>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003622:	d212      	bcs.n	800364a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f023 030f 	bic.w	r3, r3, #15
 800362c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	b29b      	uxth	r3, r3
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	b29a      	uxth	r2, r3
 800363a:	89fb      	ldrh	r3, [r7, #14]
 800363c:	4313      	orrs	r3, r2
 800363e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	89fa      	ldrh	r2, [r7, #14]
 8003646:	60da      	str	r2, [r3, #12]
 8003648:	e04e      	b.n	80036e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	77bb      	strb	r3, [r7, #30]
 800364e:	e04b      	b.n	80036e8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003650:	7ffb      	ldrb	r3, [r7, #31]
 8003652:	2b08      	cmp	r3, #8
 8003654:	d827      	bhi.n	80036a6 <UART_SetConfig+0x34a>
 8003656:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <UART_SetConfig+0x300>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	08003681 	.word	0x08003681
 8003660:	08003689 	.word	0x08003689
 8003664:	08003691 	.word	0x08003691
 8003668:	080036a7 	.word	0x080036a7
 800366c:	08003697 	.word	0x08003697
 8003670:	080036a7 	.word	0x080036a7
 8003674:	080036a7 	.word	0x080036a7
 8003678:	080036a7 	.word	0x080036a7
 800367c:	0800369f 	.word	0x0800369f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003680:	f7fe ffb4 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8003684:	61b8      	str	r0, [r7, #24]
        break;
 8003686:	e013      	b.n	80036b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003688:	f7fe ffd2 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 800368c:	61b8      	str	r0, [r7, #24]
        break;
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003690:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <UART_SetConfig+0x3a4>)
 8003692:	61bb      	str	r3, [r7, #24]
        break;
 8003694:	e00c      	b.n	80036b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003696:	f7fe ff49 	bl	800252c <HAL_RCC_GetSysClockFreq>
 800369a:	61b8      	str	r0, [r7, #24]
        break;
 800369c:	e008      	b.n	80036b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a2:	61bb      	str	r3, [r7, #24]
        break;
 80036a4:	e004      	b.n	80036b0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	77bb      	strb	r3, [r7, #30]
        break;
 80036ae:	bf00      	nop
    }

    if (pclk != 0U)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	085a      	lsrs	r2, r3, #1
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	441a      	add	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b0f      	cmp	r3, #15
 80036ce:	d909      	bls.n	80036e4 <UART_SetConfig+0x388>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d6:	d205      	bcs.n	80036e4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	e001      	b.n	80036e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	007a1200 	.word	0x007a1200

08003704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01a      	beq.n	800381a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003802:	d10a      	bne.n	800381a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b098      	sub	sp, #96	@ 0x60
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003858:	f7fc ff9e 	bl	8000798 <HAL_GetTick>
 800385c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b08      	cmp	r3, #8
 800386a:	d12e      	bne.n	80038ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800386c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	2200      	movs	r2, #0
 8003876:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f88c 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d021      	beq.n	80038ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800389a:	653b      	str	r3, [r7, #80]	@ 0x50
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e6      	bne.n	8003886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e062      	b.n	8003990 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d149      	bne.n	800396c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f856 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03c      	beq.n	800396c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003910:	633b      	str	r3, [r7, #48]	@ 0x30
 8003912:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e6      	bne.n	80038f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	60fb      	str	r3, [r7, #12]
   return(result);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3308      	adds	r3, #8
 8003942:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003944:	61fa      	str	r2, [r7, #28]
 8003946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	617b      	str	r3, [r7, #20]
   return(result);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e011      	b.n	8003990 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3758      	adds	r7, #88	@ 0x58
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a8:	e04f      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d04b      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fc fef1 	bl	8000798 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e04e      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d037      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b80      	cmp	r3, #128	@ 0x80
 80039de:	d034      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b40      	cmp	r3, #64	@ 0x40
 80039e4:	d031      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d110      	bne.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2208      	movs	r2, #8
 80039fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f85e 	bl	8003abe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2208      	movs	r2, #8
 8003a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e029      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a24:	d111      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f844 	bl	8003abe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00f      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4013      	ands	r3, r2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	bf0c      	ite	eq
 8003a5a:	2301      	moveq	r3, #1
 8003a5c:	2300      	movne	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d0a0      	beq.n	80039aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b089      	sub	sp, #36	@ 0x24
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6979      	ldr	r1, [r7, #20]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e6      	bne.n	8003a7a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003ab2:	bf00      	nop
 8003ab4:	3724      	adds	r7, #36	@ 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b095      	sub	sp, #84	@ 0x54
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ae6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e6      	bne.n	8003ac6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3308      	adds	r3, #8
 8003afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3308      	adds	r3, #8
 8003b16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e5      	bne.n	8003af8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d118      	bne.n	8003b66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f023 0310 	bic.w	r3, r3, #16
 8003b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6979      	ldr	r1, [r7, #20]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e6      	bne.n	8003b34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b7a:	bf00      	nop
 8003b7c:	3754      	adds	r7, #84	@ 0x54
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b090      	sub	sp, #64	@ 0x40
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d037      	beq.n	8003c0c <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e5      	bne.n	8003ba4 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	69b9      	ldr	r1, [r7, #24]
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	617b      	str	r3, [r7, #20]
   return(result);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e6      	bne.n	8003bd8 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c0a:	e002      	b.n	8003c12 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8003c0c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003c0e:	f7fc fb07 	bl	8000220 <HAL_UART_TxCpltCallback>
}
 8003c12:	bf00      	nop
 8003c14:	3740      	adds	r7, #64	@ 0x40
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7fc fad3 	bl	80001d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c48:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5c:	2b80      	cmp	r3, #128	@ 0x80
 8003c5e:	d109      	bne.n	8003c74 <UART_DMAError+0x3e>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b21      	cmp	r3, #33	@ 0x21
 8003c64:	d106      	bne.n	8003c74 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	f7ff feff 	bl	8003a72 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	d109      	bne.n	8003c96 <UART_DMAError+0x60>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b22      	cmp	r3, #34	@ 0x22
 8003c86:	d106      	bne.n	8003c96 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003c90:	6978      	ldr	r0, [r7, #20]
 8003c92:	f7ff ff14 	bl	8003abe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c9c:	f043 0210 	orr.w	r2, r3, #16
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff fb42 	bl	8003330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cac:	bf00      	nop
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f7ff fb2c 	bl	8003330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	613b      	str	r3, [r7, #16]
   return(result);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e6      	bne.n	8003ce8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fc fa7a 	bl	8000220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2c:	bf00      	nop
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <memset>:
 8003d48:	4402      	add	r2, r0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <memset+0xa>
 8003d50:	4770      	bx	lr
 8003d52:	f803 1b01 	strb.w	r1, [r3], #1
 8003d56:	e7f9      	b.n	8003d4c <memset+0x4>

08003d58 <__libc_init_array>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d90 <__libc_init_array+0x38>)
 8003d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003d94 <__libc_init_array+0x3c>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	2600      	movs	r6, #0
 8003d64:	42a6      	cmp	r6, r4
 8003d66:	d109      	bne.n	8003d7c <__libc_init_array+0x24>
 8003d68:	4d0b      	ldr	r5, [pc, #44]	@ (8003d98 <__libc_init_array+0x40>)
 8003d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d9c <__libc_init_array+0x44>)
 8003d6c:	f000 f818 	bl	8003da0 <_init>
 8003d70:	1b64      	subs	r4, r4, r5
 8003d72:	10a4      	asrs	r4, r4, #2
 8003d74:	2600      	movs	r6, #0
 8003d76:	42a6      	cmp	r6, r4
 8003d78:	d105      	bne.n	8003d86 <__libc_init_array+0x2e>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d80:	4798      	blx	r3
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7ee      	b.n	8003d64 <__libc_init_array+0xc>
 8003d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8a:	4798      	blx	r3
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	e7f2      	b.n	8003d76 <__libc_init_array+0x1e>
 8003d90:	08003df0 	.word	0x08003df0
 8003d94:	08003df0 	.word	0x08003df0
 8003d98:	08003df0 	.word	0x08003df0
 8003d9c:	08003df4 	.word	0x08003df4

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
