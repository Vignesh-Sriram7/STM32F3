
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001a5c  08001a5c  00002a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a8c  08001a8c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001a8c  08001a8c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001a8c  08001a8c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a8c  08001a8c  00002a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a90  08001a90  00002a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a94  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003307  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c2e  00000000  00000000  00006343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000390  00000000  00000000  00006f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000028b  00000000  00000000  00007308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e105  00000000  00000000  00007593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a55  00000000  00000000  00025698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6e7b  00000000  00000000  0002a0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e0f68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c78  00000000  00000000  000e0fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000e1c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001a44 	.word	0x08001a44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001a44 	.word	0x08001a44

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f8d6 	bl	8000388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f802 	bl	80001e4 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	bf00      	nop
 80001e2:	e7fd      	b.n	80001e0 <main+0xc>

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b090      	sub	sp, #64	@ 0x40
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	2228      	movs	r2, #40	@ 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 fbfa 	bl	80019ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000206:	2302      	movs	r3, #2
 8000208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020e:	2310      	movs	r3, #16
 8000210:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000212:	2300      	movs	r3, #0
 8000214:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fa00 	bl	8000620 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000226:	f000 f818 	bl	800025a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fa10 	bl	8001668 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800024e:	f000 f804 	bl	800025a <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	@ 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}

0800025a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800025a:	b480      	push	{r7}
 800025c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800025e:	b672      	cpsid	i
}
 8000260:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000262:	bf00      	nop
 8000264:	e7fd      	b.n	8000262 <Error_Handler+0x8>
	...

08000268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800026e:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <HAL_MspInit+0x44>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <HAL_MspInit+0x44>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <HAL_MspInit+0x44>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000286:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <HAL_MspInit+0x44>)
 8000288:	69db      	ldr	r3, [r3, #28]
 800028a:	4a08      	ldr	r2, [pc, #32]	@ (80002ac <HAL_MspInit+0x44>)
 800028c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000290:	61d3      	str	r3, [r2, #28]
 8000292:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <HAL_MspInit+0x44>)
 8000294:	69db      	ldr	r3, [r3, #28]
 8000296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000

080002b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <NMI_Handler+0x4>

080002b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <HardFault_Handler+0x4>

080002c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <MemManage_Handler+0x4>

080002c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <BusFault_Handler+0x4>

080002d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <UsageFault_Handler+0x4>

080002d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000306:	f000 f885 	bl	8000414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <SystemInit+0x20>)
 8000316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800031a:	4a05      	ldr	r2, [pc, #20]	@ (8000330 <SystemInit+0x20>)
 800031c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800036c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000338:	f7ff ffea 	bl	8000310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	@ (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	@ (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	@ (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	@ (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000362:	f001 fb4b 	bl	80019fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000366:	f7ff ff35 	bl	80001d4 <main>

0800036a <LoopForever>:

LoopForever:
    b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800036c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000378:	08001a94 	.word	0x08001a94
  ldr r2, =_sbss
 800037c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000380:	2000002c 	.word	0x2000002c

08000384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC1_2_IRQHandler>
	...

08000388 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <HAL_Init+0x28>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <HAL_Init+0x28>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000398:	2003      	movs	r0, #3
 800039a:	f000 f90d 	bl	80005b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800039e:	200f      	movs	r0, #15
 80003a0:	f000 f808 	bl	80003b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003a4:	f7ff ff60 	bl	8000268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40022000 	.word	0x40022000

080003b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <HAL_InitTick+0x54>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_InitTick+0x58>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4619      	mov	r1, r3
 80003c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 f917 	bl	8000606 <HAL_SYSTICK_Config>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003de:	2301      	movs	r3, #1
 80003e0:	e00e      	b.n	8000400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b0f      	cmp	r3, #15
 80003e6:	d80a      	bhi.n	80003fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003e8:	2200      	movs	r2, #0
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	f04f 30ff 	mov.w	r0, #4294967295
 80003f0:	f000 f8ed 	bl	80005ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003f4:	4a06      	ldr	r2, [pc, #24]	@ (8000410 <HAL_InitTick+0x5c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80003fa:	2300      	movs	r3, #0
 80003fc:	e000      	b.n	8000400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000000 	.word	0x20000000
 800040c:	20000008 	.word	0x20000008
 8000410:	20000004 	.word	0x20000004

08000414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <HAL_IncTick+0x20>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <HAL_IncTick+0x24>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <HAL_IncTick+0x24>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	20000008 	.word	0x20000008
 8000438:	20000028 	.word	0x20000028

0800043c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000440:	4b03      	ldr	r3, [pc, #12]	@ (8000450 <HAL_GetTick+0x14>)
 8000442:	681b      	ldr	r3, [r3, #0]
}
 8000444:	4618      	mov	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	20000028 	.word	0x20000028

08000454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f003 0307 	and.w	r3, r3, #7
 8000462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <__NVIC_SetPriorityGrouping+0x44>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000470:	4013      	ands	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800047c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000486:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <__NVIC_SetPriorityGrouping+0x44>)
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	60d3      	str	r3, [r2, #12]
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004a0:	4b04      	ldr	r3, [pc, #16]	@ (80004b4 <__NVIC_GetPriorityGrouping+0x18>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	0a1b      	lsrs	r3, r3, #8
 80004a6:	f003 0307 	and.w	r3, r3, #7
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	db0a      	blt.n	80004e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	490c      	ldr	r1, [pc, #48]	@ (8000504 <__NVIC_SetPriority+0x4c>)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	0112      	lsls	r2, r2, #4
 80004d8:	b2d2      	uxtb	r2, r2
 80004da:	440b      	add	r3, r1
 80004dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004e0:	e00a      	b.n	80004f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4908      	ldr	r1, [pc, #32]	@ (8000508 <__NVIC_SetPriority+0x50>)
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	f003 030f 	and.w	r3, r3, #15
 80004ee:	3b04      	subs	r3, #4
 80004f0:	0112      	lsls	r2, r2, #4
 80004f2:	b2d2      	uxtb	r2, r2
 80004f4:	440b      	add	r3, r1
 80004f6:	761a      	strb	r2, [r3, #24]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	e000e100 	.word	0xe000e100
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800050c:	b480      	push	{r7}
 800050e:	b089      	sub	sp, #36	@ 0x24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f003 0307 	and.w	r3, r3, #7
 800051e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	f1c3 0307 	rsb	r3, r3, #7
 8000526:	2b04      	cmp	r3, #4
 8000528:	bf28      	it	cs
 800052a:	2304      	movcs	r3, #4
 800052c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	3304      	adds	r3, #4
 8000532:	2b06      	cmp	r3, #6
 8000534:	d902      	bls.n	800053c <NVIC_EncodePriority+0x30>
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	3b03      	subs	r3, #3
 800053a:	e000      	b.n	800053e <NVIC_EncodePriority+0x32>
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000540:	f04f 32ff 	mov.w	r2, #4294967295
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	43da      	mvns	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	401a      	ands	r2, r3
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000554:	f04f 31ff 	mov.w	r1, #4294967295
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	fa01 f303 	lsl.w	r3, r1, r3
 800055e:	43d9      	mvns	r1, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000564:	4313      	orrs	r3, r2
         );
}
 8000566:	4618      	mov	r0, r3
 8000568:	3724      	adds	r7, #36	@ 0x24
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3b01      	subs	r3, #1
 8000580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000584:	d301      	bcc.n	800058a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000586:	2301      	movs	r3, #1
 8000588:	e00f      	b.n	80005aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800058a:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <SysTick_Config+0x40>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3b01      	subs	r3, #1
 8000590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000592:	210f      	movs	r1, #15
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f7ff ff8e 	bl	80004b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <SysTick_Config+0x40>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005a2:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <SysTick_Config+0x40>)
 80005a4:	2207      	movs	r2, #7
 80005a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	e000e010 	.word	0xe000e010

080005b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ff47 	bl	8000454 <__NVIC_SetPriorityGrouping>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b086      	sub	sp, #24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	4603      	mov	r3, r0
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
 80005da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005e0:	f7ff ff5c 	bl	800049c <__NVIC_GetPriorityGrouping>
 80005e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	6978      	ldr	r0, [r7, #20]
 80005ec:	f7ff ff8e 	bl	800050c <NVIC_EncodePriority>
 80005f0:	4602      	mov	r2, r0
 80005f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f6:	4611      	mov	r1, r2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ff5d 	bl	80004b8 <__NVIC_SetPriority>
}
 80005fe:	bf00      	nop
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ffb0 	bl	8000574 <SysTick_Config>
 8000614:	4603      	mov	r3, r0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000626:	af00      	add	r7, sp, #0
 8000628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800062c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000630:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000636:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	f001 b80a 	b.w	800165a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800064a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	f000 8161 	beq.w	800091e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800065c:	4bae      	ldr	r3, [pc, #696]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f003 030c 	and.w	r3, r3, #12
 8000664:	2b04      	cmp	r3, #4
 8000666:	d00c      	beq.n	8000682 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000668:	4bab      	ldr	r3, [pc, #684]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f003 030c 	and.w	r3, r3, #12
 8000670:	2b08      	cmp	r3, #8
 8000672:	d157      	bne.n	8000724 <HAL_RCC_OscConfig+0x104>
 8000674:	4ba8      	ldr	r3, [pc, #672]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800067c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000680:	d150      	bne.n	8000724 <HAL_RCC_OscConfig+0x104>
 8000682:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000686:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800068a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800068e:	fa93 f3a3 	rbit	r3, r3
 8000692:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000696:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800069a:	fab3 f383 	clz	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80006a2:	d802      	bhi.n	80006aa <HAL_RCC_OscConfig+0x8a>
 80006a4:	4b9c      	ldr	r3, [pc, #624]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	e015      	b.n	80006d6 <HAL_RCC_OscConfig+0xb6>
 80006aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80006ae:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80006b6:	fa93 f3a3 	rbit	r3, r3
 80006ba:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80006be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80006c2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80006c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80006ca:	fa93 f3a3 	rbit	r3, r3
 80006ce:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80006d2:	4b91      	ldr	r3, [pc, #580]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80006d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006da:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80006de:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80006e2:	fa92 f2a2 	rbit	r2, r2
 80006e6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80006ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80006ee:	fab2 f282 	clz	r2, r2
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	f042 0220 	orr.w	r2, r2, #32
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	f002 021f 	and.w	r2, r2, #31
 80006fe:	2101      	movs	r1, #1
 8000700:	fa01 f202 	lsl.w	r2, r1, r2
 8000704:	4013      	ands	r3, r2
 8000706:	2b00      	cmp	r3, #0
 8000708:	f000 8108 	beq.w	800091c <HAL_RCC_OscConfig+0x2fc>
 800070c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000710:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	f040 80ff 	bne.w	800091c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	f000 bf9b 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000728:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000734:	d106      	bne.n	8000744 <HAL_RCC_OscConfig+0x124>
 8000736:	4b78      	ldr	r3, [pc, #480]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a77      	ldr	r2, [pc, #476]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800073c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	e036      	b.n	80007b2 <HAL_RCC_OscConfig+0x192>
 8000744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000748:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10c      	bne.n	800076e <HAL_RCC_OscConfig+0x14e>
 8000754:	4b70      	ldr	r3, [pc, #448]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a6f      	ldr	r2, [pc, #444]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800075a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b6d      	ldr	r3, [pc, #436]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a6c      	ldr	r2, [pc, #432]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	e021      	b.n	80007b2 <HAL_RCC_OscConfig+0x192>
 800076e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000772:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800077e:	d10c      	bne.n	800079a <HAL_RCC_OscConfig+0x17a>
 8000780:	4b65      	ldr	r3, [pc, #404]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a64      	ldr	r2, [pc, #400]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000786:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b62      	ldr	r3, [pc, #392]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a61      	ldr	r2, [pc, #388]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	e00b      	b.n	80007b2 <HAL_RCC_OscConfig+0x192>
 800079a:	4b5f      	ldr	r3, [pc, #380]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a5e      	ldr	r2, [pc, #376]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80007a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	4b5c      	ldr	r3, [pc, #368]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a5b      	ldr	r2, [pc, #364]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80007ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007b0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80007b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d054      	beq.n	800086c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007c2:	f7ff fe3b 	bl	800043c <HAL_GetTick>
 80007c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007ca:	e00a      	b.n	80007e2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007cc:	f7ff fe36 	bl	800043c <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	2b64      	cmp	r3, #100	@ 0x64
 80007da:	d902      	bls.n	80007e2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80007dc:	2303      	movs	r3, #3
 80007de:	f000 bf3c 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 80007e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007e6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80007ee:	fa93 f3a3 	rbit	r3, r3
 80007f2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80007f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007fa:	fab3 f383 	clz	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b3f      	cmp	r3, #63	@ 0x3f
 8000802:	d802      	bhi.n	800080a <HAL_RCC_OscConfig+0x1ea>
 8000804:	4b44      	ldr	r3, [pc, #272]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	e015      	b.n	8000836 <HAL_RCC_OscConfig+0x216>
 800080a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800080e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000812:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000816:	fa93 f3a3 	rbit	r3, r3
 800081a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800081e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000822:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000826:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800082a:	fa93 f3a3 	rbit	r3, r3
 800082e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000832:	4b39      	ldr	r3, [pc, #228]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000836:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800083a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800083e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000842:	fa92 f2a2 	rbit	r2, r2
 8000846:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800084a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800084e:	fab2 f282 	clz	r2, r2
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	f042 0220 	orr.w	r2, r2, #32
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	f002 021f 	and.w	r2, r2, #31
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f202 	lsl.w	r2, r1, r2
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0b0      	beq.n	80007cc <HAL_RCC_OscConfig+0x1ac>
 800086a:	e058      	b.n	800091e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800086c:	f7ff fde6 	bl	800043c <HAL_GetTick>
 8000870:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000874:	e00a      	b.n	800088c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000876:	f7ff fde1 	bl	800043c <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	2b64      	cmp	r3, #100	@ 0x64
 8000884:	d902      	bls.n	800088c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000886:	2303      	movs	r3, #3
 8000888:	f000 bee7 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 800088c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000890:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000894:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000898:	fa93 f3a3 	rbit	r3, r3
 800089c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80008a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a4:	fab3 f383 	clz	r3, r3
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ac:	d802      	bhi.n	80008b4 <HAL_RCC_OscConfig+0x294>
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	e015      	b.n	80008e0 <HAL_RCC_OscConfig+0x2c0>
 80008b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008b8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80008c0:	fa93 f3a3 	rbit	r3, r3
 80008c4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80008c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80008d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80008d4:	fa93 f3a3 	rbit	r3, r3
 80008d8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80008de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008e4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80008e8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80008ec:	fa92 f2a2 	rbit	r2, r2
 80008f0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80008f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80008f8:	fab2 f282 	clz	r2, r2
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	f042 0220 	orr.w	r2, r2, #32
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	f002 021f 	and.w	r2, r2, #31
 8000908:	2101      	movs	r1, #1
 800090a:	fa01 f202 	lsl.w	r2, r1, r2
 800090e:	4013      	ands	r3, r2
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1b0      	bne.n	8000876 <HAL_RCC_OscConfig+0x256>
 8000914:	e003      	b.n	800091e <HAL_RCC_OscConfig+0x2fe>
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800091c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800091e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000922:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b00      	cmp	r3, #0
 8000930:	f000 816d 	beq.w	8000c0e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000934:	4bcd      	ldr	r3, [pc, #820]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 030c 	and.w	r3, r3, #12
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00c      	beq.n	800095a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000940:	4bca      	ldr	r3, [pc, #808]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 030c 	and.w	r3, r3, #12
 8000948:	2b08      	cmp	r3, #8
 800094a:	d16e      	bne.n	8000a2a <HAL_RCC_OscConfig+0x40a>
 800094c:	4bc7      	ldr	r3, [pc, #796]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000958:	d167      	bne.n	8000a2a <HAL_RCC_OscConfig+0x40a>
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000960:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000964:	fa93 f3a3 	rbit	r3, r3
 8000968:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800096c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000970:	fab3 f383 	clz	r3, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b3f      	cmp	r3, #63	@ 0x3f
 8000978:	d802      	bhi.n	8000980 <HAL_RCC_OscConfig+0x360>
 800097a:	4bbc      	ldr	r3, [pc, #752]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	e013      	b.n	80009a8 <HAL_RCC_OscConfig+0x388>
 8000980:	2302      	movs	r3, #2
 8000982:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000986:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800098a:	fa93 f3a3 	rbit	r3, r3
 800098e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000992:	2302      	movs	r3, #2
 8000994:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000998:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80009a4:	4bb1      	ldr	r3, [pc, #708]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 80009a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009a8:	2202      	movs	r2, #2
 80009aa:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80009ae:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80009b2:	fa92 f2a2 	rbit	r2, r2
 80009b6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80009ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80009be:	fab2 f282 	clz	r2, r2
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	f042 0220 	orr.w	r2, r2, #32
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	f002 021f 	and.w	r2, r2, #31
 80009ce:	2101      	movs	r1, #1
 80009d0:	fa01 f202 	lsl.w	r2, r1, r2
 80009d4:	4013      	ands	r3, r2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <HAL_RCC_OscConfig+0x3d0>
 80009da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80009de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d002      	beq.n	80009f0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f000 be35 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f0:	4b9e      	ldr	r3, [pc, #632]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80009f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80009fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	21f8      	movs	r1, #248	@ 0xf8
 8000a06:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a0a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000a0e:	fa91 f1a1 	rbit	r1, r1
 8000a12:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000a16:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000a1a:	fab1 f181 	clz	r1, r1
 8000a1e:	b2c9      	uxtb	r1, r1
 8000a20:	408b      	lsls	r3, r1
 8000a22:	4992      	ldr	r1, [pc, #584]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000a24:	4313      	orrs	r3, r2
 8000a26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a28:	e0f1      	b.n	8000c0e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000a2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 8083 	beq.w	8000b42 <HAL_RCC_OscConfig+0x522>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a42:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000a46:	fa93 f3a3 	rbit	r3, r3
 8000a4a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000a4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a52:	fab3 f383 	clz	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000a5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	461a      	mov	r2, r3
 8000a64:	2301      	movs	r3, #1
 8000a66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a68:	f7ff fce8 	bl	800043c <HAL_GetTick>
 8000a6c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a70:	e00a      	b.n	8000a88 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a72:	f7ff fce3 	bl	800043c <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d902      	bls.n	8000a88 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	f000 bde9 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000a92:	fa93 f3a3 	rbit	r3, r3
 8000a96:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000a9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000aa6:	d802      	bhi.n	8000aae <HAL_RCC_OscConfig+0x48e>
 8000aa8:	4b70      	ldr	r3, [pc, #448]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	e013      	b.n	8000ad6 <HAL_RCC_OscConfig+0x4b6>
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000ab8:	fa93 f3a3 	rbit	r3, r3
 8000abc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000ac6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000aca:	fa93 f3a3 	rbit	r3, r3
 8000ace:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000ad2:	4b66      	ldr	r3, [pc, #408]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8000adc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000ae0:	fa92 f2a2 	rbit	r2, r2
 8000ae4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8000ae8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000aec:	fab2 f282 	clz	r2, r2
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	f042 0220 	orr.w	r2, r2, #32
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	f002 021f 	and.w	r2, r2, #31
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f202 	lsl.w	r2, r1, r2
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0b4      	beq.n	8000a72 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b08:	4b58      	ldr	r3, [pc, #352]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	21f8      	movs	r1, #248	@ 0xf8
 8000b1e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b22:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8000b26:	fa91 f1a1 	rbit	r1, r1
 8000b2a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8000b2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8000b32:	fab1 f181 	clz	r1, r1
 8000b36:	b2c9      	uxtb	r1, r1
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	494c      	ldr	r1, [pc, #304]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	600b      	str	r3, [r1, #0]
 8000b40:	e065      	b.n	8000c0e <HAL_RCC_OscConfig+0x5ee>
 8000b42:	2301      	movs	r3, #1
 8000b44:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b48:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000b4c:	fa93 f3a3 	rbit	r3, r3
 8000b50:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8000b54:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b58:	fab3 f383 	clz	r3, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000b62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fc65 	bl	800043c <HAL_GetTick>
 8000b72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b76:	e00a      	b.n	8000b8e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b78:	f7ff fc60 	bl	800043c <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d902      	bls.n	8000b8e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	f000 bd66 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000b98:	fa93 f3a3 	rbit	r3, r3
 8000b9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8000ba0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba4:	fab3 f383 	clz	r3, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bac:	d802      	bhi.n	8000bb4 <HAL_RCC_OscConfig+0x594>
 8000bae:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	e013      	b.n	8000bdc <HAL_RCC_OscConfig+0x5bc>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000bcc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bd0:	fa93 f3a3 	rbit	r3, r3
 8000bd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000bd8:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	2202      	movs	r2, #2
 8000bde:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000be2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000be6:	fa92 f2a2 	rbit	r2, r2
 8000bea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8000bee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	f042 0220 	orr.w	r2, r2, #32
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	f002 021f 	and.w	r2, r2, #31
 8000c02:	2101      	movs	r1, #1
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1b4      	bne.n	8000b78 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8119 	beq.w	8000e56 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 8082 	beq.w	8000d3a <HAL_RCC_OscConfig+0x71a>
 8000c36:	2301      	movs	r3, #1
 8000c38:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c40:	fa93 f3a3 	rbit	r3, r3
 8000c44:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8000c48:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c4c:	fab3 f383 	clz	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_RCC_OscConfig+0x650>)
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c60:	f7ff fbec 	bl	800043c <HAL_GetTick>
 8000c64:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c68:	e00f      	b.n	8000c8a <HAL_RCC_OscConfig+0x66a>
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c74:	f7ff fbe2 	bl	800043c <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d902      	bls.n	8000c8a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f000 bce8 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c94:	fa93 f2a3 	rbit	r2, r3
 8000c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000caa:	2202      	movs	r2, #2
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	fa93 f2a3 	rbit	r2, r3
 8000cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cce:	2202      	movs	r2, #2
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	fa93 f2a3 	rbit	r2, r3
 8000ce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ce4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ce8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cea:	4bb0      	ldr	r3, [pc, #704]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000cec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cf2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	6019      	str	r1, [r3, #0]
 8000cfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cfe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	fa93 f1a3 	rbit	r1, r3
 8000d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d10:	6019      	str	r1, [r3, #0]
  return result;
 8000d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d16:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	fab3 f383 	clz	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f003 031f 	and.w	r3, r3, #31
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d09d      	beq.n	8000c74 <HAL_RCC_OscConfig+0x654>
 8000d38:	e08d      	b.n	8000e56 <HAL_RCC_OscConfig+0x836>
 8000d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	fa93 f2a3 	rbit	r2, r3
 8000d54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d58:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d5c:	601a      	str	r2, [r3, #0]
  return result;
 8000d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d62:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d66:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b8f      	ldr	r3, [pc, #572]	@ (8000fb0 <HAL_RCC_OscConfig+0x990>)
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	461a      	mov	r2, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fb5e 	bl	800043c <HAL_GetTick>
 8000d80:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d84:	e00a      	b.n	8000d9c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d86:	f7ff fb59 	bl	800043c <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d902      	bls.n	8000d9c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	f000 bc5f 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 8000d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000da0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000da4:	2202      	movs	r2, #2
 8000da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	fa93 f2a3 	rbit	r2, r3
 8000db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dc8:	2202      	movs	r2, #2
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	fa93 f2a3 	rbit	r2, r3
 8000dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dde:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000de8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000dec:	2202      	movs	r2, #2
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000df4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	fa93 f2a3 	rbit	r2, r3
 8000dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e02:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000e06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	4b68      	ldr	r3, [pc, #416]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e14:	2102      	movs	r1, #2
 8000e16:	6019      	str	r1, [r3, #0]
 8000e18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	fa93 f1a3 	rbit	r1, r3
 8000e26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e2a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000e2e:	6019      	str	r1, [r3, #0]
  return result;
 8000e30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e34:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d197      	bne.n	8000d86 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 819c 	beq.w	80011a4 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e72:	4b4e      	ldr	r3, [pc, #312]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d116      	bne.n	8000eac <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a4a      	ldr	r2, [pc, #296]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b48      	ldr	r3, [pc, #288]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8000e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ea0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ea4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eac:	4b41      	ldr	r3, [pc, #260]	@ (8000fb4 <HAL_RCC_OscConfig+0x994>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d11a      	bne.n	8000eee <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb4 <HAL_RCC_OscConfig+0x994>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8000fb4 <HAL_RCC_OscConfig+0x994>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ec4:	f7ff faba 	bl	800043c <HAL_GetTick>
 8000ec8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ecc:	e009      	b.n	8000ee2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ece:	f7ff fab5 	bl	800043c <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	@ 0x64
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e3bb      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee2:	4b34      	ldr	r3, [pc, #208]	@ (8000fb4 <HAL_RCC_OscConfig+0x994>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0ef      	beq.n	8000ece <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ef2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d106      	bne.n	8000f0c <HAL_RCC_OscConfig+0x8ec>
 8000efe:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6213      	str	r3, [r2, #32]
 8000f0a:	e035      	b.n	8000f78 <HAL_RCC_OscConfig+0x958>
 8000f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10c      	bne.n	8000f36 <HAL_RCC_OscConfig+0x916>
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a22      	ldr	r2, [pc, #136]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	6213      	str	r3, [r2, #32]
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f2e:	f023 0304 	bic.w	r3, r3, #4
 8000f32:	6213      	str	r3, [r2, #32]
 8000f34:	e020      	b.n	8000f78 <HAL_RCC_OscConfig+0x958>
 8000f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b05      	cmp	r3, #5
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x940>
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a18      	ldr	r2, [pc, #96]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6213      	str	r3, [r2, #32]
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a15      	ldr	r2, [pc, #84]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0x958>
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	6213      	str	r3, [r2, #32]
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f72:	f023 0304 	bic.w	r3, r3, #4
 8000f76:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 8085 	beq.w	8001094 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fa57 	bl	800043c <HAL_GetTick>
 8000f8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f92:	e011      	b.n	8000fb8 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f94:	f7ff fa52 	bl	800043c <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d907      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e356      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	10908120 	.word	0x10908120
 8000fb4:	40007000 	.word	0x40007000
 8000fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fbc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fc8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	fa93 f2a3 	rbit	r2, r3
 8000fd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fd6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fe0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	fa93 f2a3 	rbit	r2, r3
 8000ff6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ffa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000ffe:	601a      	str	r2, [r3, #0]
  return result;
 8001000:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001004:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001008:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_RCC_OscConfig+0xa00>
 800101a:	4b98      	ldr	r3, [pc, #608]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	e013      	b.n	8001048 <HAL_RCC_OscConfig+0xa28>
 8001020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001024:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001028:	2202      	movs	r2, #2
 800102a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001030:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	fa93 f2a3 	rbit	r2, r3
 800103a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800103e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	4b8d      	ldr	r3, [pc, #564]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001048:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800104c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001050:	2102      	movs	r1, #2
 8001052:	6011      	str	r1, [r2, #0]
 8001054:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001058:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	fa92 f1a2 	rbit	r1, r2
 8001062:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001066:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800106a:	6011      	str	r1, [r2, #0]
  return result;
 800106c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001070:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	fab2 f282 	clz	r2, r2
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	f002 021f 	and.w	r2, r2, #31
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f202 	lsl.w	r2, r1, r2
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d080      	beq.n	8000f94 <HAL_RCC_OscConfig+0x974>
 8001092:	e07d      	b.n	8001190 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff f9d2 	bl	800043c <HAL_GetTick>
 8001098:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109c:	e00b      	b.n	80010b6 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800109e:	f7ff f9cd 	bl	800043c <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e2d1      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 80010b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010ba:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80010be:	2202      	movs	r2, #2
 80010c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010c6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	fa93 f2a3 	rbit	r2, r3
 80010d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010d4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010de:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80010e2:	2202      	movs	r2, #2
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	fa93 f2a3 	rbit	r2, r3
 80010f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010f8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80010fc:	601a      	str	r2, [r3, #0]
  return result;
 80010fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001102:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001106:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <HAL_RCC_OscConfig+0xafe>
 8001118:	4b58      	ldr	r3, [pc, #352]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	e013      	b.n	8001146 <HAL_RCC_OscConfig+0xb26>
 800111e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001122:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001126:	2202      	movs	r2, #2
 8001128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800112e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	fa93 f2a3 	rbit	r2, r3
 8001138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800113c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	4b4e      	ldr	r3, [pc, #312]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800114a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800114e:	2102      	movs	r1, #2
 8001150:	6011      	str	r1, [r2, #0]
 8001152:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001156:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	fa92 f1a2 	rbit	r1, r2
 8001160:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001164:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001168:	6011      	str	r1, [r2, #0]
  return result;
 800116a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800116e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	fab2 f282 	clz	r2, r2
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	f002 021f 	and.w	r2, r2, #31
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d186      	bne.n	800109e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001190:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001194:	2b01      	cmp	r3, #1
 8001196:	d105      	bne.n	80011a4 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001198:	4b38      	ldr	r3, [pc, #224]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4a37      	ldr	r2, [pc, #220]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 800119e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8251 	beq.w	8001658 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b6:	4b31      	ldr	r3, [pc, #196]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b08      	cmp	r3, #8
 80011c0:	f000 820f 	beq.w	80015e2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	f040 8165 	bne.w	80014a0 <HAL_RCC_OscConfig+0xe80>
 80011d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80011de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	fa93 f2a3 	rbit	r2, r3
 80011f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80011fa:	601a      	str	r2, [r3, #0]
  return result;
 80011fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001200:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001204:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001210:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	461a      	mov	r2, r3
 8001218:	2300      	movs	r3, #0
 800121a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff f90e 	bl	800043c <HAL_GetTick>
 8001220:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001224:	e009      	b.n	800123a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff f909 	bl	800043c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e20f      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 800123a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800123e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001242:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	fa93 f2a3 	rbit	r2, r3
 8001256:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800125a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800125e:	601a      	str	r2, [r3, #0]
  return result;
 8001260:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001264:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001268:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b3f      	cmp	r3, #63	@ 0x3f
 8001272:	d805      	bhi.n	8001280 <HAL_RCC_OscConfig+0xc60>
 8001274:	4b01      	ldr	r3, [pc, #4]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	e02a      	b.n	80012d0 <HAL_RCC_OscConfig+0xcb0>
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001284:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001288:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800128c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001292:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fa93 f2a3 	rbit	r2, r3
 800129c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012aa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012b8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	fa93 f2a3 	rbit	r2, r3
 80012c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	4bca      	ldr	r3, [pc, #808]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80012d4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80012d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80012dc:	6011      	str	r1, [r2, #0]
 80012de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80012e2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	fa92 f1a2 	rbit	r1, r2
 80012ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80012f0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80012f4:	6011      	str	r1, [r2, #0]
  return result;
 80012f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80012fa:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	fab2 f282 	clz	r2, r2
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f002 021f 	and.w	r2, r2, #31
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d184      	bne.n	8001226 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131c:	4bb6      	ldr	r3, [pc, #728]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 800131e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001320:	f023 020f 	bic.w	r2, r3, #15
 8001324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001328:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001330:	49b1      	ldr	r1, [pc, #708]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001332:	4313      	orrs	r3, r2
 8001334:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001336:	4bb0      	ldr	r3, [pc, #704]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800133e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001342:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a19      	ldr	r1, [r3, #32]
 800134a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	430b      	orrs	r3, r1
 8001358:	49a7      	ldr	r1, [pc, #668]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
 800135e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001362:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001366:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800136a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001370:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	fa93 f2a3 	rbit	r2, r3
 800137a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001382:	601a      	str	r2, [r3, #0]
  return result;
 8001384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001388:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800138c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001398:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	461a      	mov	r2, r3
 80013a0:	2301      	movs	r3, #1
 80013a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff f84a 	bl	800043c <HAL_GetTick>
 80013a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ac:	e009      	b.n	80013c2 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff f845 	bl	800043c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e14b      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 80013c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80013ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f2a3 	rbit	r2, r3
 80013de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80013e6:	601a      	str	r2, [r3, #0]
  return result;
 80013e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80013f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80013fa:	d802      	bhi.n	8001402 <HAL_RCC_OscConfig+0xde2>
 80013fc:	4b7e      	ldr	r3, [pc, #504]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	e027      	b.n	8001452 <HAL_RCC_OscConfig+0xe32>
 8001402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001406:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800140a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800140e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001414:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fa93 f2a3 	rbit	r2, r3
 800141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001422:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001430:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f2a3 	rbit	r2, r3
 8001444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001448:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001456:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800145a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800145e:	6011      	str	r1, [r2, #0]
 8001460:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001464:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	fa92 f1a2 	rbit	r1, r2
 800146e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001472:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001476:	6011      	str	r1, [r2, #0]
  return result;
 8001478:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800147c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f042 0220 	orr.w	r2, r2, #32
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f002 021f 	and.w	r2, r2, #31
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d087      	beq.n	80013ae <HAL_RCC_OscConfig+0xd8e>
 800149e:	e0db      	b.n	8001658 <HAL_RCC_OscConfig+0x1038>
 80014a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80014a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fa93 f2a3 	rbit	r2, r3
 80014bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80014c4:	601a      	str	r2, [r3, #0]
  return result;
 80014c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80014ce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80014da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	461a      	mov	r2, r3
 80014e2:	2300      	movs	r3, #0
 80014e4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7fe ffa9 	bl	800043c <HAL_GetTick>
 80014ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	e009      	b.n	8001504 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7fe ffa4 	bl	800043c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0aa      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 8001504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001508:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800150c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001516:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001524:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001528:	601a      	str	r2, [r3, #0]
  return result;
 800152a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001532:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b3f      	cmp	r3, #63	@ 0x3f
 800153c:	d802      	bhi.n	8001544 <HAL_RCC_OscConfig+0xf24>
 800153e:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	e027      	b.n	8001594 <HAL_RCC_OscConfig+0xf74>
 8001544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001548:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800154c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001556:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001564:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001572:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fa93 f2a3 	rbit	r2, r3
 8001586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001598:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800159c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80015a0:	6011      	str	r1, [r2, #0]
 80015a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015a6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	fa92 f1a2 	rbit	r1, r2
 80015b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015b4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80015b8:	6011      	str	r1, [r2, #0]
  return result;
 80015ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015be:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	fab2 f282 	clz	r2, r2
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	f042 0220 	orr.w	r2, r2, #32
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	f002 021f 	and.w	r2, r2, #31
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f202 	lsl.w	r2, r1, r2
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d187      	bne.n	80014f0 <HAL_RCC_OscConfig+0xed0>
 80015e0:	e03a      	b.n	8001658 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d104      	bne.n	80015fc <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e031      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_RCC_OscConfig+0x1044>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_RCC_OscConfig+0x1044>)
 8001606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001608:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800160c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001610:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001618:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	429a      	cmp	r2, r3
 8001622:	d117      	bne.n	8001654 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001624:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001628:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800162c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001630:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001638:	429a      	cmp	r2, r3
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800163c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001640:	f003 020f 	and.w	r2, r3, #15
 8001644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001648:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b09e      	sub	sp, #120	@ 0x78
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e154      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b89      	ldr	r3, [pc, #548]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d910      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b86      	ldr	r3, [pc, #536]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 0207 	bic.w	r2, r3, #7
 8001696:	4984      	ldr	r1, [pc, #528]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b82      	ldr	r3, [pc, #520]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e13c      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b7b      	ldr	r3, [pc, #492]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4978      	ldr	r1, [pc, #480]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80cd 	beq.w	8001876 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d137      	bne.n	8001754 <HAL_RCC_ClockConfig+0xec>
 80016e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80016f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80016fc:	d802      	bhi.n	8001704 <HAL_RCC_ClockConfig+0x9c>
 80016fe:	4b6b      	ldr	r3, [pc, #428]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	e00f      	b.n	8001724 <HAL_RCC_ClockConfig+0xbc>
 8001704:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	667b      	str	r3, [r7, #100]	@ 0x64
 8001712:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001716:	663b      	str	r3, [r7, #96]	@ 0x60
 8001718:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001720:	4b62      	ldr	r3, [pc, #392]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001728:	65ba      	str	r2, [r7, #88]	@ 0x58
 800172a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800172c:	fa92 f2a2 	rbit	r2, r2
 8001730:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001732:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001734:	fab2 f282 	clz	r2, r2
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	f002 021f 	and.w	r2, r2, #31
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d171      	bne.n	8001834 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0ea      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d137      	bne.n	80017cc <HAL_RCC_ClockConfig+0x164>
 800175c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001760:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800176a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	fab3 f383 	clz	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b3f      	cmp	r3, #63	@ 0x3f
 8001774:	d802      	bhi.n	800177c <HAL_RCC_ClockConfig+0x114>
 8001776:	4b4d      	ldr	r3, [pc, #308]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e00f      	b.n	800179c <HAL_RCC_ClockConfig+0x134>
 800177c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001780:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
 800178a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001798:	4b44      	ldr	r3, [pc, #272]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017a0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80017a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017a4:	fa92 f2a2 	rbit	r2, r2
 80017a8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80017aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017ac:	fab2 f282 	clz	r2, r2
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	f042 0220 	orr.w	r2, r2, #32
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f002 021f 	and.w	r2, r2, #31
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d135      	bne.n	8001834 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0ae      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
 80017cc:	2302      	movs	r3, #2
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80017d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017e2:	d802      	bhi.n	80017ea <HAL_RCC_ClockConfig+0x182>
 80017e4:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	e00d      	b.n	8001806 <HAL_RCC_ClockConfig+0x19e>
 80017ea:	2302      	movs	r3, #2
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f6:	2302      	movs	r3, #2
 80017f8:	623b      	str	r3, [r7, #32]
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	2202      	movs	r2, #2
 8001808:	61ba      	str	r2, [r7, #24]
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	fa92 f2a2 	rbit	r2, r2
 8001810:	617a      	str	r2, [r7, #20]
  return result;
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f042 0220 	orr.w	r2, r2, #32
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f002 021f 	and.w	r2, r2, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e07a      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001834:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 0203 	bic.w	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	491a      	ldr	r1, [pc, #104]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001846:	f7fe fdf9 	bl	800043c <HAL_GetTick>
 800184a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184c:	e00a      	b.n	8001864 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184e:	f7fe fdf5 	bl	800043c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e062      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 020c 	and.w	r2, r3, #12
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	429a      	cmp	r2, r3
 8001874:	d1eb      	bne.n	800184e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d215      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 0207 	bic.w	r2, r3, #7
 800188c:	4906      	ldr	r1, [pc, #24]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d006      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e041      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000
 80018ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	491a      	ldr	r1, [pc, #104]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4912      	ldr	r1, [pc, #72]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018ee:	f000 f829 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80018f2:	4601      	mov	r1, r0
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018fc:	22f0      	movs	r2, #240	@ 0xf0
 80018fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	fa92 f2a2 	rbit	r2, r2
 8001906:	60fa      	str	r2, [r7, #12]
  return result;
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	fab2 f282 	clz	r2, r2
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	40d3      	lsrs	r3, r2
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_RCC_ClockConfig+0x2d0>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	fa21 f303 	lsr.w	r3, r1, r3
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_RCC_ClockConfig+0x2d4>)
 800191c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <HAL_RCC_ClockConfig+0x2d8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fd46 	bl	80003b4 <HAL_InitTick>
  
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3778      	adds	r7, #120	@ 0x78
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	08001a5c 	.word	0x08001a5c
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d002      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x30>
 800196e:	2b08      	cmp	r3, #8
 8001970:	d003      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x36>
 8001972:	e029      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001974:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001976:	613b      	str	r3, [r7, #16]
      break;
 8001978:	e029      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	0c9b      	lsrs	r3, r3, #18
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	4a18      	ldr	r2, [pc, #96]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x98>)
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	4a15      	ldr	r2, [pc, #84]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019a0:	4a0f      	ldr	r2, [pc, #60]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e007      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019b2:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	613b      	str	r3, [r7, #16]
      break;
 80019c6:	e002      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019ca:	613b      	str	r3, [r7, #16]
      break;
 80019cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ce:	693b      	ldr	r3, [r7, #16]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	007a1200 	.word	0x007a1200
 80019e4:	08001a6c 	.word	0x08001a6c
 80019e8:	08001a7c 	.word	0x08001a7c

080019ec <memset>:
 80019ec:	4402      	add	r2, r0
 80019ee:	4603      	mov	r3, r0
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d100      	bne.n	80019f6 <memset+0xa>
 80019f4:	4770      	bx	lr
 80019f6:	f803 1b01 	strb.w	r1, [r3], #1
 80019fa:	e7f9      	b.n	80019f0 <memset+0x4>

080019fc <__libc_init_array>:
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	4d0d      	ldr	r5, [pc, #52]	@ (8001a34 <__libc_init_array+0x38>)
 8001a00:	4c0d      	ldr	r4, [pc, #52]	@ (8001a38 <__libc_init_array+0x3c>)
 8001a02:	1b64      	subs	r4, r4, r5
 8001a04:	10a4      	asrs	r4, r4, #2
 8001a06:	2600      	movs	r6, #0
 8001a08:	42a6      	cmp	r6, r4
 8001a0a:	d109      	bne.n	8001a20 <__libc_init_array+0x24>
 8001a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8001a3c <__libc_init_array+0x40>)
 8001a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8001a40 <__libc_init_array+0x44>)
 8001a10:	f000 f818 	bl	8001a44 <_init>
 8001a14:	1b64      	subs	r4, r4, r5
 8001a16:	10a4      	asrs	r4, r4, #2
 8001a18:	2600      	movs	r6, #0
 8001a1a:	42a6      	cmp	r6, r4
 8001a1c:	d105      	bne.n	8001a2a <__libc_init_array+0x2e>
 8001a1e:	bd70      	pop	{r4, r5, r6, pc}
 8001a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a24:	4798      	blx	r3
 8001a26:	3601      	adds	r6, #1
 8001a28:	e7ee      	b.n	8001a08 <__libc_init_array+0xc>
 8001a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a2e:	4798      	blx	r3
 8001a30:	3601      	adds	r6, #1
 8001a32:	e7f2      	b.n	8001a1a <__libc_init_array+0x1e>
 8001a34:	08001a8c 	.word	0x08001a8c
 8001a38:	08001a8c 	.word	0x08001a8c
 8001a3c:	08001a8c 	.word	0x08001a8c
 8001a40:	08001a90 	.word	0x08001a90

08001a44 <_init>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	bf00      	nop
 8001a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4a:	bc08      	pop	{r3}
 8001a4c:	469e      	mov	lr, r3
 8001a4e:	4770      	bx	lr

08001a50 <_fini>:
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	bf00      	nop
 8001a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a56:	bc08      	pop	{r3}
 8001a58:	469e      	mov	lr, r3
 8001a5a:	4770      	bx	lr
