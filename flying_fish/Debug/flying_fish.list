
flying_fish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002a20  08002a20  00003a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a68  08002a68  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002a68  08002a68  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002a68  08002a68  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a68  08002a68  00003a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a6c  08002a6c  00003a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a70  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000083cf  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000121c  00000000  00000000  0000c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  0000d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b9  00000000  00000000  0000dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f5e4  00000000  00000000  0000e109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008600  00000000  00000000  0002d6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf89e  00000000  00000000  00035ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f558b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001828  00000000  00000000  000f55d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000f6df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002a08 	.word	0x08002a08

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002a08 	.word	0x08002a08

080001d4 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08e      	sub	sp, #56	@ 0x38
 80001d8:	af00      	add	r7, sp, #0
    HAL_Init();
 80001da:	f000 f9d9 	bl	8000590 <HAL_Init>
    SystemClock_Config();
 80001de:	f000 f82b 	bl	8000238 <SystemClock_Config>

    MX_GPIO_Init();
 80001e2:	f000 f86d 	bl	80002c0 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80001e6:	f000 f893 	bl	8000310 <MX_USART2_UART_Init>

    char buffer[50];

    while (1)
    {
        GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80001ea:	2120      	movs	r1, #32
 80001ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001f0:	f000 fcc8 	bl	8000b84 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (state == GPIO_PIN_SET)
 80001fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d107      	bne.n	8000212 <main+0x3e>
            HAL_UART_Transmit(&huart2, (uint8_t*)"HIGH\r\n", 6, HAL_MAX_DELAY);
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	2206      	movs	r2, #6
 8000208:	4908      	ldr	r1, [pc, #32]	@ (800022c <main+0x58>)
 800020a:	4809      	ldr	r0, [pc, #36]	@ (8000230 <main+0x5c>)
 800020c:	f001 ff56 	bl	80020bc <HAL_UART_Transmit>
 8000210:	e006      	b.n	8000220 <main+0x4c>
        else
            HAL_UART_Transmit(&huart2, (uint8_t*)"LOW\r\n", 5, HAL_MAX_DELAY);
 8000212:	f04f 33ff 	mov.w	r3, #4294967295
 8000216:	2205      	movs	r2, #5
 8000218:	4906      	ldr	r1, [pc, #24]	@ (8000234 <main+0x60>)
 800021a:	4805      	ldr	r0, [pc, #20]	@ (8000230 <main+0x5c>)
 800021c:	f001 ff4e 	bl	80020bc <HAL_UART_Transmit>

        HAL_Delay(500);
 8000220:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000224:	f000 fa1a 	bl	800065c <HAL_Delay>
    {
 8000228:	e7df      	b.n	80001ea <main+0x16>
 800022a:	bf00      	nop
 800022c:	08002a20 	.word	0x08002a20
 8000230:	20000028 	.word	0x20000028
 8000234:	08002a28 	.word	0x08002a28

08000238 <SystemClock_Config>:
    }
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	@ 0x40
 800023c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	@ 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fbb1 	bl	80029ae <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	2310      	movs	r3, #16
 8000264:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800026e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000270:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000274:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fc98 	bl	8000bb4 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x56>
        while (1);
 800028a:	bf00      	nop
 800028c:	e7fd      	b.n	800028a <SystemClock_Config+0x52>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800028e:	230f      	movs	r3, #15
 8000290:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800029e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2101      	movs	r1, #1
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fca7 	bl	8001bfc <HAL_RCC_ClockConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x80>
        while (1);
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <SystemClock_Config+0x7c>
}
 80002b8:	bf00      	nop
 80002ba:	3740      	adds	r7, #64	@ 0x40
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MX_GPIO_Init>:

/* GPIO Initialization for PB2 input */
void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();  // 1. Ensure clock is enabled
 80002c6:	4b11      	ldr	r3, [pc, #68]	@ (800030c <MX_GPIO_Init+0x4c>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a10      	ldr	r2, [pc, #64]	@ (800030c <MX_GPIO_Init+0x4c>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <MX_GPIO_Init+0x4c>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002da:	603b      	str	r3, [r7, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};  // 2. Clear struct
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002ec:	2320      	movs	r3, #32
 80002ee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;    // 3. Pulldown ensures LOW when floating
 80002f4:	2302      	movs	r3, #2
 80002f6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4619      	mov	r1, r3
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000300:	f000 fab6 	bl	8000870 <HAL_GPIO_Init>
}
 8000304:	bf00      	nop
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40021000 	.word	0x40021000

08000310 <MX_USART2_UART_Init>:
/* UART2 Initialization on PA2(Pin TX), PA3(Pin RX) */
static void MX_USART2_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000316:	4b32      	ldr	r3, [pc, #200]	@ (80003e0 <MX_USART2_UART_Init+0xd0>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	4a31      	ldr	r2, [pc, #196]	@ (80003e0 <MX_USART2_UART_Init+0xd0>)
 800031c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000320:	61d3      	str	r3, [r2, #28]
 8000322:	4b2f      	ldr	r3, [pc, #188]	@ (80003e0 <MX_USART2_UART_Init+0xd0>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <MX_USART2_UART_Init+0xd0>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a2b      	ldr	r2, [pc, #172]	@ (80003e0 <MX_USART2_UART_Init+0xd0>)
 8000334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b29      	ldr	r3, [pc, #164]	@ (80003e0 <MX_USART2_UART_Init+0xd0>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	f107 030c 	add.w	r3, r7, #12
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]

    // Configure TX Pin
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000356:	2304      	movs	r3, #4
 8000358:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800035a:	2302      	movs	r3, #2
 800035c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000366:	2307      	movs	r3, #7
 8000368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036a:	f107 030c 	add.w	r3, r7, #12
 800036e:	4619      	mov	r1, r3
 8000370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000374:	f000 fa7c 	bl	8000870 <HAL_GPIO_Init>

    // Configure RX Pin
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000378:	2308      	movs	r3, #8
 800037a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800037c:	2302      	movs	r3, #2
 800037e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000384:	2307      	movs	r3, #7
 8000386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000388:	f107 030c 	add.w	r3, r7, #12
 800038c:	4619      	mov	r1, r3
 800038e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000392:	f000 fa6d 	bl	8000870 <HAL_GPIO_Init>

    huart2.Instance = USART2;
 8000396:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <MX_USART2_UART_Init+0xd4>)
 8000398:	4a13      	ldr	r2, [pc, #76]	@ (80003e8 <MX_USART2_UART_Init+0xd8>)
 800039a:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <MX_USART2_UART_Init+0xd4>)
 800039e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a2:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <MX_USART2_UART_Init+0xd4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <MX_USART2_UART_Init+0xd4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <MX_USART2_UART_Init+0xd4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <MX_USART2_UART_Init+0xd4>)
 80003b8:	220c      	movs	r2, #12
 80003ba:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <MX_USART2_UART_Init+0xd4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c2:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <MX_USART2_UART_Init+0xd4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c8:	4806      	ldr	r0, [pc, #24]	@ (80003e4 <MX_USART2_UART_Init+0xd4>)
 80003ca:	f001 fe29 	bl	8002020 <HAL_UART_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_USART2_UART_Init+0xc8>
        while (1);
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <MX_USART2_UART_Init+0xc4>
}
 80003d8:	bf00      	nop
 80003da:	3720      	adds	r7, #32
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	20000028 	.word	0x20000028
 80003e8:	40004400 	.word	0x40004400

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <HAL_MspInit+0x44>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <HAL_MspInit+0x44>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <HAL_MspInit+0x44>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <HAL_MspInit+0x44>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08a      	sub	sp, #40	@ 0x28
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a17      	ldr	r2, [pc, #92]	@ (80004b0 <HAL_UART_MspInit+0x7c>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d128      	bne.n	80004a8 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <HAL_UART_MspInit+0x80>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a16      	ldr	r2, [pc, #88]	@ (80004b4 <HAL_UART_MspInit+0x80>)
 800045c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <HAL_UART_MspInit+0x80>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800046a:	613b      	str	r3, [r7, #16]
 800046c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <HAL_UART_MspInit+0x80>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a10      	ldr	r2, [pc, #64]	@ (80004b4 <HAL_UART_MspInit+0x80>)
 8000474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <HAL_UART_MspInit+0x80>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000486:	230c      	movs	r3, #12
 8000488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048a:	2302      	movs	r3, #2
 800048c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000496:	2307      	movs	r3, #7
 8000498:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a4:	f000 f9e4 	bl	8000870 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80004a8:	bf00      	nop
 80004aa:	3728      	adds	r7, #40	@ 0x28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40004400 	.word	0x40004400
 80004b4:	40021000 	.word	0x40021000

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <NMI_Handler+0x4>

080004c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <HardFault_Handler+0x4>

080004c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <MemManage_Handler+0x4>

080004d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <UsageFault_Handler+0x4>

080004e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050e:	f000 f885 	bl	800061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <SystemInit+0x20>)
 800051e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000522:	4a05      	ldr	r2, [pc, #20]	@ (8000538 <SystemInit+0x20>)
 8000524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800053c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000574 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000540:	f7ff ffea 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <LoopForever+0x6>)
  ldr r1, =_edata
 8000546:	490d      	ldr	r1, [pc, #52]	@ (800057c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000548:	4a0d      	ldr	r2, [pc, #52]	@ (8000580 <LoopForever+0xe>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800055c:	4c0a      	ldr	r4, [pc, #40]	@ (8000588 <LoopForever+0x16>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800056a:	f002 fa29 	bl	80029c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800056e:	f7ff fe31 	bl	80001d4 <main>

08000572 <LoopForever>:

LoopForever:
    b LoopForever
 8000572:	e7fe      	b.n	8000572 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000574:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000580:	08002a70 	.word	0x08002a70
  ldr r2, =_sbss
 8000584:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000588:	200000b4 	.word	0x200000b4

0800058c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC1_2_IRQHandler>
	...

08000590 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <HAL_Init+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a07      	ldr	r2, [pc, #28]	@ (80005b8 <HAL_Init+0x28>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f931 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a6:	200f      	movs	r0, #15
 80005a8:	f000 f808 	bl	80005bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ac:	f7ff ff1e 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40022000 	.word	0x40022000

080005bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <HAL_InitTick+0x54>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_InitTick+0x58>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f93b 	bl	8000856 <HAL_SYSTICK_Config>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e00e      	b.n	8000608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d80a      	bhi.n	8000606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f0:	2200      	movs	r2, #0
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
 80005f8:	f000 f911 	bl	800081e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005fc:	4a06      	ldr	r2, [pc, #24]	@ (8000618 <HAL_InitTick+0x5c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	20000008 	.word	0x20000008
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <HAL_IncTick+0x20>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <HAL_IncTick+0x24>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <HAL_IncTick+0x24>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000008 	.word	0x20000008
 8000640:	200000b0 	.word	0x200000b0

08000644 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return uwTick;  
 8000648:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <HAL_GetTick+0x14>)
 800064a:	681b      	ldr	r3, [r3, #0]
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200000b0 	.word	0x200000b0

0800065c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000664:	f7ff ffee 	bl	8000644 <HAL_GetTick>
 8000668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000674:	d005      	beq.n	8000682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <HAL_Delay+0x44>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000682:	bf00      	nop
 8000684:	f7ff ffde 	bl	8000644 <HAL_GetTick>
 8000688:	4602      	mov	r2, r0
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	429a      	cmp	r2, r3
 8000692:	d8f7      	bhi.n	8000684 <HAL_Delay+0x28>
  {
  }
}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000008 	.word	0x20000008

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	@ (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	@ (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	@ 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	@ 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f7ff ff8e 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff47 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff5c 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff8e 	bl	800075c <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffb0 	bl	80007c4 <SysTick_Config>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087e:	e160      	b.n	8000b42 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f000 8152 	beq.w	8000b3c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d005      	beq.n	80008b0 <HAL_GPIO_Init+0x40>
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d130      	bne.n	8000912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	2203      	movs	r2, #3
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68da      	ldr	r2, [r3, #12]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008e6:	2201      	movs	r2, #1
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	f003 0201 	and.w	r2, r3, #1
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	2b03      	cmp	r3, #3
 800091c:	d017      	beq.n	800094e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2203      	movs	r2, #3
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	2b02      	cmp	r3, #2
 8000958:	d123      	bne.n	80009a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	220f      	movs	r2, #15
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	691a      	ldr	r2, [r3, #16]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	08da      	lsrs	r2, r3, #3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3208      	adds	r2, #8
 800099c:	6939      	ldr	r1, [r7, #16]
 800099e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0203 	and.w	r2, r3, #3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 80ac 	beq.w	8000b3c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e4:	4b5e      	ldr	r3, [pc, #376]	@ (8000b60 <HAL_GPIO_Init+0x2f0>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a5d      	ldr	r2, [pc, #372]	@ (8000b60 <HAL_GPIO_Init+0x2f0>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b5b      	ldr	r3, [pc, #364]	@ (8000b60 <HAL_GPIO_Init+0x2f0>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009fc:	4a59      	ldr	r2, [pc, #356]	@ (8000b64 <HAL_GPIO_Init+0x2f4>)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3302      	adds	r3, #2
 8000a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	220f      	movs	r2, #15
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a26:	d025      	beq.n	8000a74 <HAL_GPIO_Init+0x204>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a4f      	ldr	r2, [pc, #316]	@ (8000b68 <HAL_GPIO_Init+0x2f8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d01f      	beq.n	8000a70 <HAL_GPIO_Init+0x200>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a4e      	ldr	r2, [pc, #312]	@ (8000b6c <HAL_GPIO_Init+0x2fc>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d019      	beq.n	8000a6c <HAL_GPIO_Init+0x1fc>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8000b70 <HAL_GPIO_Init+0x300>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d013      	beq.n	8000a68 <HAL_GPIO_Init+0x1f8>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a4c      	ldr	r2, [pc, #304]	@ (8000b74 <HAL_GPIO_Init+0x304>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1f4>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b78 <HAL_GPIO_Init+0x308>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1f0>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a4a      	ldr	r2, [pc, #296]	@ (8000b7c <HAL_GPIO_Init+0x30c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1ec>
 8000a58:	2306      	movs	r3, #6
 8000a5a:	e00c      	b.n	8000a76 <HAL_GPIO_Init+0x206>
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	e00a      	b.n	8000a76 <HAL_GPIO_Init+0x206>
 8000a60:	2305      	movs	r3, #5
 8000a62:	e008      	b.n	8000a76 <HAL_GPIO_Init+0x206>
 8000a64:	2304      	movs	r3, #4
 8000a66:	e006      	b.n	8000a76 <HAL_GPIO_Init+0x206>
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e004      	b.n	8000a76 <HAL_GPIO_Init+0x206>
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x206>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <HAL_GPIO_Init+0x206>
 8000a74:	2300      	movs	r3, #0
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	f002 0203 	and.w	r2, r2, #3
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a86:	4937      	ldr	r1, [pc, #220]	@ (8000b64 <HAL_GPIO_Init+0x2f4>)
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a94:	4b3a      	ldr	r3, [pc, #232]	@ (8000b80 <HAL_GPIO_Init+0x310>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ab8:	4a31      	ldr	r2, [pc, #196]	@ (8000b80 <HAL_GPIO_Init+0x310>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000abe:	4b30      	ldr	r3, [pc, #192]	@ (8000b80 <HAL_GPIO_Init+0x310>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ae2:	4a27      	ldr	r2, [pc, #156]	@ (8000b80 <HAL_GPIO_Init+0x310>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ae8:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <HAL_GPIO_Init+0x310>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b80 <HAL_GPIO_Init+0x310>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <HAL_GPIO_Init+0x310>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <HAL_GPIO_Init+0x310>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f47f ae97 	bne.w	8000880 <HAL_GPIO_Init+0x10>
  }
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	371c      	adds	r7, #28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010000 	.word	0x40010000
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	48000c00 	.word	0x48000c00
 8000b74:	48001000 	.word	0x48001000
 8000b78:	48001400 	.word	0x48001400
 8000b7c:	48001800 	.word	0x48001800
 8000b80:	40010400 	.word	0x40010400

08000b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	691a      	ldr	r2, [r3, #16]
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
 8000ba0:	e001      	b.n	8000ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bc4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f001 b80a 	b.w	8001bee <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bde:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 8161 	beq.w	8000eb2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bf0:	4bae      	ldr	r3, [pc, #696]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d00c      	beq.n	8000c16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bfc:	4bab      	ldr	r3, [pc, #684]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d157      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x104>
 8000c08:	4ba8      	ldr	r3, [pc, #672]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c14:	d150      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x104>
 8000c16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c1a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000c22:	fa93 f3a3 	rbit	r3, r3
 8000c26:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2e:	fab3 f383 	clz	r3, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c36:	d802      	bhi.n	8000c3e <HAL_RCC_OscConfig+0x8a>
 8000c38:	4b9c      	ldr	r3, [pc, #624]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	e015      	b.n	8000c6a <HAL_RCC_OscConfig+0xb6>
 8000c3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c42:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000c4a:	fa93 f3a3 	rbit	r3, r3
 8000c4e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000c52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c56:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000c5a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000c66:	4b91      	ldr	r3, [pc, #580]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c6e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000c72:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000c76:	fa92 f2a2 	rbit	r2, r2
 8000c7a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000c7e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	f042 0220 	orr.w	r2, r2, #32
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	f002 021f 	and.w	r2, r2, #31
 8000c92:	2101      	movs	r1, #1
 8000c94:	fa01 f202 	lsl.w	r2, r1, r2
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 8108 	beq.w	8000eb0 <HAL_RCC_OscConfig+0x2fc>
 8000ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ca4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f040 80ff 	bne.w	8000eb0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f000 bf9b 	b.w	8001bee <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cc8:	d106      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x124>
 8000cca:	4b78      	ldr	r3, [pc, #480]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a77      	ldr	r2, [pc, #476]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e036      	b.n	8000d46 <HAL_RCC_OscConfig+0x192>
 8000cd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cdc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10c      	bne.n	8000d02 <HAL_RCC_OscConfig+0x14e>
 8000ce8:	4b70      	ldr	r3, [pc, #448]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a6f      	ldr	r2, [pc, #444]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b6d      	ldr	r3, [pc, #436]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a6c      	ldr	r2, [pc, #432]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e021      	b.n	8000d46 <HAL_RCC_OscConfig+0x192>
 8000d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d12:	d10c      	bne.n	8000d2e <HAL_RCC_OscConfig+0x17a>
 8000d14:	4b65      	ldr	r3, [pc, #404]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a64      	ldr	r2, [pc, #400]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000d1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b62      	ldr	r3, [pc, #392]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a61      	ldr	r2, [pc, #388]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e00b      	b.n	8000d46 <HAL_RCC_OscConfig+0x192>
 8000d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a5e      	ldr	r2, [pc, #376]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a5b      	ldr	r2, [pc, #364]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000d40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d44:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d054      	beq.n	8000e00 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d56:	f7ff fc75 	bl	8000644 <HAL_GetTick>
 8000d5a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5e:	e00a      	b.n	8000d76 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d60:	f7ff fc70 	bl	8000644 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b64      	cmp	r3, #100	@ 0x64
 8000d6e:	d902      	bls.n	8000d76 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	f000 bf3c 	b.w	8001bee <HAL_RCC_OscConfig+0x103a>
 8000d76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d7a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000d8a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8e:	fab3 f383 	clz	r3, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d96:	d802      	bhi.n	8000d9e <HAL_RCC_OscConfig+0x1ea>
 8000d98:	4b44      	ldr	r3, [pc, #272]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	e015      	b.n	8000dca <HAL_RCC_OscConfig+0x216>
 8000d9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000da2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000db2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000db6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000dba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000dc6:	4b39      	ldr	r3, [pc, #228]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dce:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000dd2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000dd6:	fa92 f2a2 	rbit	r2, r2
 8000dda:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000dde:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	f042 0220 	orr.w	r2, r2, #32
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	f002 021f 	and.w	r2, r2, #31
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0b0      	beq.n	8000d60 <HAL_RCC_OscConfig+0x1ac>
 8000dfe:	e058      	b.n	8000eb2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fc20 	bl	8000644 <HAL_GetTick>
 8000e04:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e08:	e00a      	b.n	8000e20 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e0a:	f7ff fc1b 	bl	8000644 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b64      	cmp	r3, #100	@ 0x64
 8000e18:	d902      	bls.n	8000e20 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f000 bee7 	b.w	8001bee <HAL_RCC_OscConfig+0x103a>
 8000e20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e24:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000e34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e40:	d802      	bhi.n	8000e48 <HAL_RCC_OscConfig+0x294>
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	e015      	b.n	8000e74 <HAL_RCC_OscConfig+0x2c0>
 8000e48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e4c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e50:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000e54:	fa93 f3a3 	rbit	r3, r3
 8000e58:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e60:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000e64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000e68:	fa93 f3a3 	rbit	r3, r3
 8000e6c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e78:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000e7c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000e80:	fa92 f2a2 	rbit	r2, r2
 8000e84:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000e88:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000e8c:	fab2 f282 	clz	r2, r2
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	f042 0220 	orr.w	r2, r2, #32
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	f002 021f 	and.w	r2, r2, #31
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1b0      	bne.n	8000e0a <HAL_RCC_OscConfig+0x256>
 8000ea8:	e003      	b.n	8000eb2 <HAL_RCC_OscConfig+0x2fe>
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 816d 	beq.w	80011a2 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ec8:	4bcd      	ldr	r3, [pc, #820]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 030c 	and.w	r3, r3, #12
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00c      	beq.n	8000eee <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ed4:	4bca      	ldr	r3, [pc, #808]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d16e      	bne.n	8000fbe <HAL_RCC_OscConfig+0x40a>
 8000ee0:	4bc7      	ldr	r3, [pc, #796]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000eec:	d167      	bne.n	8000fbe <HAL_RCC_OscConfig+0x40a>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000f00:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f04:	fab3 f383 	clz	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f0c:	d802      	bhi.n	8000f14 <HAL_RCC_OscConfig+0x360>
 8000f0e:	4bbc      	ldr	r3, [pc, #752]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	e013      	b.n	8000f3c <HAL_RCC_OscConfig+0x388>
 8000f14:	2302      	movs	r3, #2
 8000f16:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000f1e:	fa93 f3a3 	rbit	r3, r3
 8000f22:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000f2c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000f38:	4bb1      	ldr	r3, [pc, #708]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000f42:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000f46:	fa92 f2a2 	rbit	r2, r2
 8000f4a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000f4e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000f52:	fab2 f282 	clz	r2, r2
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	f042 0220 	orr.w	r2, r2, #32
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	f002 021f 	and.w	r2, r2, #31
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f202 	lsl.w	r2, r1, r2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00a      	beq.n	8000f84 <HAL_RCC_OscConfig+0x3d0>
 8000f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d002      	beq.n	8000f84 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f000 be35 	b.w	8001bee <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f84:	4b9e      	ldr	r3, [pc, #632]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	21f8      	movs	r1, #248	@ 0xf8
 8000f9a:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000fa2:	fa91 f1a1 	rbit	r1, r1
 8000fa6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000faa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000fae:	fab1 f181 	clz	r1, r1
 8000fb2:	b2c9      	uxtb	r1, r1
 8000fb4:	408b      	lsls	r3, r1
 8000fb6:	4992      	ldr	r1, [pc, #584]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbc:	e0f1      	b.n	80011a2 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fc2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 8083 	beq.w	80010d6 <HAL_RCC_OscConfig+0x522>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000fe2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe6:	fab3 f383 	clz	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000ff0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fb22 	bl	8000644 <HAL_GetTick>
 8001000:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001004:	e00a      	b.n	800101c <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001006:	f7ff fb1d 	bl	8000644 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d902      	bls.n	800101c <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	f000 bde9 	b.w	8001bee <HAL_RCC_OscConfig+0x103a>
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800102e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001032:	fab3 f383 	clz	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b3f      	cmp	r3, #63	@ 0x3f
 800103a:	d802      	bhi.n	8001042 <HAL_RCC_OscConfig+0x48e>
 800103c:	4b70      	ldr	r3, [pc, #448]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	e013      	b.n	800106a <HAL_RCC_OscConfig+0x4b6>
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001054:	2302      	movs	r3, #2
 8001056:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800105a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800105e:	fa93 f3a3 	rbit	r3, r3
 8001062:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001066:	4b66      	ldr	r3, [pc, #408]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	2202      	movs	r2, #2
 800106c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001070:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001074:	fa92 f2a2 	rbit	r2, r2
 8001078:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800107c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001080:	fab2 f282 	clz	r2, r2
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	f042 0220 	orr.w	r2, r2, #32
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	f002 021f 	and.w	r2, r2, #31
 8001090:	2101      	movs	r1, #1
 8001092:	fa01 f202 	lsl.w	r2, r1, r2
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0b4      	beq.n	8001006 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109c:	4b58      	ldr	r3, [pc, #352]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	21f8      	movs	r1, #248	@ 0xf8
 80010b2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80010ba:	fa91 f1a1 	rbit	r1, r1
 80010be:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80010c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80010c6:	fab1 f181 	clz	r1, r1
 80010ca:	b2c9      	uxtb	r1, r1
 80010cc:	408b      	lsls	r3, r1
 80010ce:	494c      	ldr	r1, [pc, #304]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
 80010d4:	e065      	b.n	80011a2 <HAL_RCC_OscConfig+0x5ee>
 80010d6:	2301      	movs	r3, #1
 80010d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80010e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ec:	fab3 f383 	clz	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	461a      	mov	r2, r3
 80010fe:	2300      	movs	r3, #0
 8001100:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fa9f 	bl	8000644 <HAL_GetTick>
 8001106:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	e00a      	b.n	8001122 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110c:	f7ff fa9a 	bl	8000644 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d902      	bls.n	8001122 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	f000 bd66 	b.w	8001bee <HAL_RCC_OscConfig+0x103a>
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001134:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001140:	d802      	bhi.n	8001148 <HAL_RCC_OscConfig+0x594>
 8001142:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	e013      	b.n	8001170 <HAL_RCC_OscConfig+0x5bc>
 8001148:	2302      	movs	r3, #2
 800114a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001160:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <HAL_RCC_OscConfig+0x64c>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001170:	2202      	movs	r2, #2
 8001172:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001176:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001182:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	f002 021f 	and.w	r2, r2, #31
 8001196:	2101      	movs	r1, #1
 8001198:	fa01 f202 	lsl.w	r2, r1, r2
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1b4      	bne.n	800110c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8119 	beq.w	80013ea <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 8082 	beq.w	80012ce <HAL_RCC_OscConfig+0x71a>
 80011ca:	2301      	movs	r3, #1
 80011cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80011dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e0:	fab3 f383 	clz	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_RCC_OscConfig+0x650>)
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	461a      	mov	r2, r3
 80011f0:	2301      	movs	r3, #1
 80011f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fa26 	bl	8000644 <HAL_GetTick>
 80011f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fc:	e00f      	b.n	800121e <HAL_RCC_OscConfig+0x66a>
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fa1c 	bl	8000644 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d902      	bls.n	800121e <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	f000 bce8 	b.w	8001bee <HAL_RCC_OscConfig+0x103a>
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001228:	fa93 f2a3 	rbit	r2, r3
 800122c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001230:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800123a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800123e:	2202      	movs	r2, #2
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	fa93 f2a3 	rbit	r2, r3
 8001250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800125e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001262:	2202      	movs	r2, #2
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800126a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	fa93 f2a3 	rbit	r2, r3
 8001274:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001278:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800127c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	4bb0      	ldr	r3, [pc, #704]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 8001280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001282:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001286:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800128a:	2102      	movs	r1, #2
 800128c:	6019      	str	r1, [r3, #0]
 800128e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001292:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fa93 f1a3 	rbit	r1, r3
 800129c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012a4:	6019      	str	r1, [r3, #0]
  return result;
 80012a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	fab3 f383 	clz	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d09d      	beq.n	8001208 <HAL_RCC_OscConfig+0x654>
 80012cc:	e08d      	b.n	80013ea <HAL_RCC_OscConfig+0x836>
 80012ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	fa93 f2a3 	rbit	r2, r3
 80012e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012f0:	601a      	str	r2, [r3, #0]
  return result;
 80012f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	4b8f      	ldr	r3, [pc, #572]	@ (8001544 <HAL_RCC_OscConfig+0x990>)
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	461a      	mov	r2, r3
 800130c:	2300      	movs	r3, #0
 800130e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001310:	f7ff f998 	bl	8000644 <HAL_GetTick>
 8001314:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff f993 	bl	8000644 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d902      	bls.n	8001330 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	f000 bc5f 	b.w	8001bee <HAL_RCC_OscConfig+0x103a>
 8001330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001334:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001340:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fa93 f2a3 	rbit	r2, r3
 800134a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001358:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800135c:	2202      	movs	r2, #2
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001364:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	fa93 f2a3 	rbit	r2, r3
 800136e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001372:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001380:	2202      	movs	r2, #2
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001388:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fa93 f2a3 	rbit	r2, r3
 8001392:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001396:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800139a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	4b68      	ldr	r3, [pc, #416]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 800139e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013a8:	2102      	movs	r1, #2
 80013aa:	6019      	str	r1, [r3, #0]
 80013ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	fa93 f1a3 	rbit	r1, r3
 80013ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013be:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013c2:	6019      	str	r1, [r3, #0]
  return result;
 80013c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	2101      	movs	r1, #1
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d197      	bne.n	800131a <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 819c 	beq.w	8001738 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001406:	4b4e      	ldr	r3, [pc, #312]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d116      	bne.n	8001440 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b4b      	ldr	r3, [pc, #300]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a4a      	ldr	r2, [pc, #296]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b48      	ldr	r3, [pc, #288]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001434:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001438:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	4b41      	ldr	r3, [pc, #260]	@ (8001548 <HAL_RCC_OscConfig+0x994>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d11a      	bne.n	8001482 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144c:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <HAL_RCC_OscConfig+0x994>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a3d      	ldr	r2, [pc, #244]	@ (8001548 <HAL_RCC_OscConfig+0x994>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001456:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001458:	f7ff f8f4 	bl	8000644 <HAL_GetTick>
 800145c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	e009      	b.n	8001476 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001462:	f7ff f8ef 	bl	8000644 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	@ 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e3bb      	b.n	8001bee <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001476:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <HAL_RCC_OscConfig+0x994>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0ef      	beq.n	8001462 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001486:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x8ec>
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a2a      	ldr	r2, [pc, #168]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6213      	str	r3, [r2, #32]
 800149e:	e035      	b.n	800150c <HAL_RCC_OscConfig+0x958>
 80014a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x916>
 80014b0:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4a22      	ldr	r2, [pc, #136]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	6213      	str	r3, [r2, #32]
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014c2:	f023 0304 	bic.w	r3, r3, #4
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	e020      	b.n	800150c <HAL_RCC_OscConfig+0x958>
 80014ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x940>
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6213      	str	r3, [r2, #32]
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6213      	str	r3, [r2, #32]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0x958>
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a11      	ldr	r2, [pc, #68]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_RCC_OscConfig+0x98c>)
 8001506:	f023 0304 	bic.w	r3, r3, #4
 800150a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800150c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001510:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8085 	beq.w	8001628 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff f891 	bl	8000644 <HAL_GetTick>
 8001522:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	e011      	b.n	800154c <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff f88c 	bl	8000644 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d907      	bls.n	800154c <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e356      	b.n	8001bee <HAL_RCC_OscConfig+0x103a>
 8001540:	40021000 	.word	0x40021000
 8001544:	10908120 	.word	0x10908120
 8001548:	40007000 	.word	0x40007000
 800154c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001550:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001554:	2202      	movs	r2, #2
 8001556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001574:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001578:	2202      	movs	r2, #2
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001580:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fa93 f2a3 	rbit	r2, r3
 800158a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001592:	601a      	str	r2, [r3, #0]
  return result;
 8001594:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001598:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800159c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	fab3 f383 	clz	r3, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_RCC_OscConfig+0xa00>
 80015ae:	4b98      	ldr	r3, [pc, #608]	@ (8001810 <HAL_RCC_OscConfig+0xc5c>)
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	e013      	b.n	80015dc <HAL_RCC_OscConfig+0xa28>
 80015b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015bc:	2202      	movs	r2, #2
 80015be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fa93 f2a3 	rbit	r2, r3
 80015ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	4b8d      	ldr	r3, [pc, #564]	@ (8001810 <HAL_RCC_OscConfig+0xc5c>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015e0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80015e4:	2102      	movs	r1, #2
 80015e6:	6011      	str	r1, [r2, #0]
 80015e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015ec:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	fa92 f1a2 	rbit	r1, r2
 80015f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015fa:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015fe:	6011      	str	r1, [r2, #0]
  return result;
 8001600:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001604:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	fab2 f282 	clz	r2, r2
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	f002 021f 	and.w	r2, r2, #31
 800161a:	2101      	movs	r1, #1
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d080      	beq.n	8001528 <HAL_RCC_OscConfig+0x974>
 8001626:	e07d      	b.n	8001724 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff f80c 	bl	8000644 <HAL_GetTick>
 800162c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	e00b      	b.n	800164a <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff f807 	bl	8000644 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e2d1      	b.n	8001bee <HAL_RCC_OscConfig+0x103a>
 800164a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f2a3 	rbit	r2, r3
 8001664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001668:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001672:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001676:	2202      	movs	r2, #2
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001690:	601a      	str	r2, [r3, #0]
  return result;
 8001692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001696:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800169a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <HAL_RCC_OscConfig+0xafe>
 80016ac:	4b58      	ldr	r3, [pc, #352]	@ (8001810 <HAL_RCC_OscConfig+0xc5c>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	e013      	b.n	80016da <HAL_RCC_OscConfig+0xb26>
 80016b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80016ba:	2202      	movs	r2, #2
 80016bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fa93 f2a3 	rbit	r2, r3
 80016cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001810 <HAL_RCC_OscConfig+0xc5c>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016de:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80016e2:	2102      	movs	r1, #2
 80016e4:	6011      	str	r1, [r2, #0]
 80016e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016ea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	fa92 f1a2 	rbit	r1, r2
 80016f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016f8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80016fc:	6011      	str	r1, [r2, #0]
  return result;
 80016fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001702:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	fab2 f282 	clz	r2, r2
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f002 021f 	and.w	r2, r2, #31
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f202 	lsl.w	r2, r1, r2
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d186      	bne.n	8001632 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001724:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172c:	4b38      	ldr	r3, [pc, #224]	@ (8001810 <HAL_RCC_OscConfig+0xc5c>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a37      	ldr	r2, [pc, #220]	@ (8001810 <HAL_RCC_OscConfig+0xc5c>)
 8001732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001736:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001738:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800173c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8251 	beq.w	8001bec <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174a:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <HAL_RCC_OscConfig+0xc5c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b08      	cmp	r3, #8
 8001754:	f000 820f 	beq.w	8001b76 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001758:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b02      	cmp	r3, #2
 8001766:	f040 8165 	bne.w	8001a34 <HAL_RCC_OscConfig+0xe80>
 800176a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001772:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800178a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800178e:	601a      	str	r2, [r3, #0]
  return result;
 8001790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001794:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001798:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	461a      	mov	r2, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7fe ff48 	bl	8000644 <HAL_GetTick>
 80017b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	e009      	b.n	80017ce <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7fe ff43 	bl	8000644 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e20f      	b.n	8001bee <HAL_RCC_OscConfig+0x103a>
 80017ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80017d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017f2:	601a      	str	r2, [r3, #0]
  return result;
 80017f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b3f      	cmp	r3, #63	@ 0x3f
 8001806:	d805      	bhi.n	8001814 <HAL_RCC_OscConfig+0xc60>
 8001808:	4b01      	ldr	r3, [pc, #4]	@ (8001810 <HAL_RCC_OscConfig+0xc5c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	e02a      	b.n	8001864 <HAL_RCC_OscConfig+0xcb0>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001818:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800181c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001826:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001834:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800183e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001842:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	fa93 f2a3 	rbit	r2, r3
 8001856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800185a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	4bca      	ldr	r3, [pc, #808]	@ (8001b8c <HAL_RCC_OscConfig+0xfd8>)
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001868:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800186c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001870:	6011      	str	r1, [r2, #0]
 8001872:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001876:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	fa92 f1a2 	rbit	r1, r2
 8001880:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001884:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001888:	6011      	str	r1, [r2, #0]
  return result;
 800188a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800188e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	fab2 f282 	clz	r2, r2
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f042 0220 	orr.w	r2, r2, #32
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	f002 021f 	and.w	r2, r2, #31
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f202 	lsl.w	r2, r1, r2
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d184      	bne.n	80017ba <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b0:	4bb6      	ldr	r3, [pc, #728]	@ (8001b8c <HAL_RCC_OscConfig+0xfd8>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	f023 020f 	bic.w	r2, r3, #15
 80018b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	49b1      	ldr	r1, [pc, #708]	@ (8001b8c <HAL_RCC_OscConfig+0xfd8>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80018ca:	4bb0      	ldr	r3, [pc, #704]	@ (8001b8c <HAL_RCC_OscConfig+0xfd8>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80018d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a19      	ldr	r1, [r3, #32]
 80018de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	430b      	orrs	r3, r1
 80018ec:	49a7      	ldr	r1, [pc, #668]	@ (8001b8c <HAL_RCC_OscConfig+0xfd8>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
 80018f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001904:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fa93 f2a3 	rbit	r2, r3
 800190e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001912:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001916:	601a      	str	r2, [r3, #0]
  return result;
 8001918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001920:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800192c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	461a      	mov	r2, r3
 8001934:	2301      	movs	r3, #1
 8001936:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7fe fe84 	bl	8000644 <HAL_GetTick>
 800193c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001942:	f7fe fe7f 	bl	8000644 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e14b      	b.n	8001bee <HAL_RCC_OscConfig+0x103a>
 8001956:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800195e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001968:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001976:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800197a:	601a      	str	r2, [r3, #0]
  return result;
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001984:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b3f      	cmp	r3, #63	@ 0x3f
 800198e:	d802      	bhi.n	8001996 <HAL_RCC_OscConfig+0xde2>
 8001990:	4b7e      	ldr	r3, [pc, #504]	@ (8001b8c <HAL_RCC_OscConfig+0xfd8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	e027      	b.n	80019e6 <HAL_RCC_OscConfig+0xe32>
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800199e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	fa93 f2a3 	rbit	r2, r3
 80019b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80019c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019dc:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b8c <HAL_RCC_OscConfig+0xfd8>)
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019f2:	6011      	str	r1, [r2, #0]
 80019f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019f8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	fa92 f1a2 	rbit	r1, r2
 8001a02:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a06:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001a0a:	6011      	str	r1, [r2, #0]
  return result;
 8001a0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a10:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	fab2 f282 	clz	r2, r2
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	f042 0220 	orr.w	r2, r2, #32
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f002 021f 	and.w	r2, r2, #31
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d087      	beq.n	8001942 <HAL_RCC_OscConfig+0xd8e>
 8001a32:	e0db      	b.n	8001bec <HAL_RCC_OscConfig+0x1038>
 8001a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a38:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a46:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a54:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a58:	601a      	str	r2, [r3, #0]
  return result;
 8001a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a62:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a6e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	461a      	mov	r2, r3
 8001a76:	2300      	movs	r3, #0
 8001a78:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7fe fde3 	bl	8000644 <HAL_GetTick>
 8001a7e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	e009      	b.n	8001a98 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7fe fdde 	bl	8000644 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0aa      	b.n	8001bee <HAL_RCC_OscConfig+0x103a>
 8001a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001aa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aaa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fa93 f2a3 	rbit	r2, r3
 8001ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001abc:	601a      	str	r2, [r3, #0]
  return result;
 8001abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ac6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ad0:	d802      	bhi.n	8001ad8 <HAL_RCC_OscConfig+0xf24>
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b8c <HAL_RCC_OscConfig+0xfd8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	e027      	b.n	8001b28 <HAL_RCC_OscConfig+0xf74>
 8001ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001adc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ae0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aea:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b02:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001b06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b10:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_RCC_OscConfig+0xfd8>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b2c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b30:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b3a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	fa92 f1a2 	rbit	r1, r2
 8001b44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b48:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b4c:	6011      	str	r1, [r2, #0]
  return result;
 8001b4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b52:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fab2 f282 	clz	r2, r2
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d187      	bne.n	8001a84 <HAL_RCC_OscConfig+0xed0>
 8001b74:	e03a      	b.n	8001bec <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d104      	bne.n	8001b90 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e031      	b.n	8001bee <HAL_RCC_OscConfig+0x103a>
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b90:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <HAL_RCC_OscConfig+0x1044>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <HAL_RCC_OscConfig+0x1044>)
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ba0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ba4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d117      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001bbc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d10b      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bd4:	f003 020f 	and.w	r2, r3, #15
 8001bd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bdc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b09e      	sub	sp, #120	@ 0x78
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e154      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b89      	ldr	r3, [pc, #548]	@ (8001e3c <HAL_RCC_ClockConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d910      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b86      	ldr	r3, [pc, #536]	@ (8001e3c <HAL_RCC_ClockConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	4984      	ldr	r1, [pc, #528]	@ (8001e3c <HAL_RCC_ClockConfig+0x240>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b82      	ldr	r3, [pc, #520]	@ (8001e3c <HAL_RCC_ClockConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e13c      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b7b      	ldr	r3, [pc, #492]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4978      	ldr	r1, [pc, #480]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80cd 	beq.w	8001e0a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d137      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xec>
 8001c78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c90:	d802      	bhi.n	8001c98 <HAL_RCC_ClockConfig+0x9c>
 8001c92:	4b6b      	ldr	r3, [pc, #428]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e00f      	b.n	8001cb8 <HAL_RCC_ClockConfig+0xbc>
 8001c98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ca6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001caa:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cb4:	4b62      	ldr	r3, [pc, #392]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cbc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001cbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001cc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cc8:	fab2 f282 	clz	r2, r2
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f002 021f 	and.w	r2, r2, #31
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d171      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0ea      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d137      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x164>
 8001cf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cf4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d08:	d802      	bhi.n	8001d10 <HAL_RCC_ClockConfig+0x114>
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e00f      	b.n	8001d30 <HAL_RCC_ClockConfig+0x134>
 8001d10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d22:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d2c:	4b44      	ldr	r3, [pc, #272]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d34:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001d36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d38:	fa92 f2a2 	rbit	r2, r2
 8001d3c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001d3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d135      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0ae      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2c2>
 8001d60:	2302      	movs	r3, #2
 8001d62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d76:	d802      	bhi.n	8001d7e <HAL_RCC_ClockConfig+0x182>
 8001d78:	4b31      	ldr	r3, [pc, #196]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	e00d      	b.n	8001d9a <HAL_RCC_ClockConfig+0x19e>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	61ba      	str	r2, [r7, #24]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	fa92 f2a2 	rbit	r2, r2
 8001da4:	617a      	str	r2, [r7, #20]
  return result;
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	fab2 f282 	clz	r2, r2
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f002 021f 	and.w	r2, r2, #31
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e07a      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 0203 	bic.w	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	491a      	ldr	r1, [pc, #104]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dda:	f7fe fc33 	bl	8000644 <HAL_GetTick>
 8001dde:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7fe fc2f 	bl	8000644 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e062      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 020c 	and.w	r2, r3, #12
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d1eb      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_RCC_ClockConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d215      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e18:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <HAL_RCC_ClockConfig+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 0207 	bic.w	r2, r3, #7
 8001e20:	4906      	ldr	r1, [pc, #24]	@ (8001e3c <HAL_RCC_ClockConfig+0x240>)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <HAL_RCC_ClockConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d006      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e041      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2c2>
 8001e3a:	bf00      	nop
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2cc>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	491a      	ldr	r1, [pc, #104]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2cc>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2cc>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4912      	ldr	r1, [pc, #72]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2cc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e82:	f000 f829 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4601      	mov	r1, r0
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2cc>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e90:	22f0      	movs	r2, #240	@ 0xf0
 8001e92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	fa92 f2a2 	rbit	r2, r2
 8001e9a:	60fa      	str	r2, [r7, #12]
  return result;
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	fab2 f282 	clz	r2, r2
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	40d3      	lsrs	r3, r2
 8001ea6:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <HAL_RCC_ClockConfig+0x2d0>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_RCC_ClockConfig+0x2d4>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_RCC_ClockConfig+0x2d8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb80 	bl	80005bc <HAL_InitTick>
  
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3778      	adds	r7, #120	@ 0x78
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08002a30 	.word	0x08002a30
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x30>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x36>
 8001f06:	e029      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f0a:	613b      	str	r3, [r7, #16]
      break;
 8001f0c:	e029      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	4a15      	ldr	r2, [pc, #84]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f34:	4a0f      	ldr	r2, [pc, #60]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e007      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f46:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	613b      	str	r3, [r7, #16]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f5e:	613b      	str	r3, [r7, #16]
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	693b      	ldr	r3, [r7, #16]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000
 8001f74:	007a1200 	.word	0x007a1200
 8001f78:	08002a48 	.word	0x08002a48
 8001f7c:	08002a58 	.word	0x08002a58

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f9e:	f7ff ffef 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	fa92 f2a2 	rbit	r2, r2
 8001fb8:	603a      	str	r2, [r7, #0]
  return result;
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	40d3      	lsrs	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08002a40 	.word	0x08002a40

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001fe2:	f7ff ffcd 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fe6:	4601      	mov	r1, r0
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001ff0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8001ff4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	fa92 f2a2 	rbit	r2, r2
 8001ffc:	603a      	str	r2, [r7, #0]
  return result;
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	fab2 f282 	clz	r2, r2
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	40d3      	lsrs	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_RCC_GetPCLK2Freq+0x40>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	08002a40 	.word	0x08002a40

08002020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e040      	b.n	80020b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe f9f6 	bl	8000434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2224      	movs	r2, #36	@ 0x24
 800204c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fa86 	bl	8002578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f8af 	bl	80021d0 <UART_SetConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e01b      	b.n	80020b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800208a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800209a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fb05 	bl	80026bc <UART_CheckIdleState>
 80020b2:	4603      	mov	r3, r0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	@ 0x28
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d177      	bne.n	80021c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_UART_Transmit+0x24>
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e070      	b.n	80021c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2221      	movs	r2, #33	@ 0x21
 80020f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020f2:	f7fe faa7 	bl	8000644 <HAL_GetTick>
 80020f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002110:	d108      	bne.n	8002124 <HAL_UART_Transmit+0x68>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d104      	bne.n	8002124 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e003      	b.n	800212c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800212c:	e02f      	b.n	800218e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fb67 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d004      	beq.n	800214e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e03b      	b.n	80021c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002160:	b292      	uxth	r2, r2
 8002162:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	3302      	adds	r3, #2
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	e007      	b.n	800217c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3301      	adds	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1c9      	bne.n	800212e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2200      	movs	r2, #0
 80021a2:	2140      	movs	r1, #64	@ 0x40
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fb31 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e005      	b.n	80021c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4b92      	ldr	r3, [pc, #584]	@ (8002444 <UART_SetConfig+0x274>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	6979      	ldr	r1, [r7, #20]
 8002204:	430b      	orrs	r3, r1
 8002206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a80      	ldr	r2, [pc, #512]	@ (8002448 <UART_SetConfig+0x278>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d120      	bne.n	800228e <UART_SetConfig+0xbe>
 800224c:	4b7f      	ldr	r3, [pc, #508]	@ (800244c <UART_SetConfig+0x27c>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d817      	bhi.n	8002288 <UART_SetConfig+0xb8>
 8002258:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <UART_SetConfig+0x90>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002271 	.word	0x08002271
 8002264:	0800227d 	.word	0x0800227d
 8002268:	08002283 	.word	0x08002283
 800226c:	08002277 	.word	0x08002277
 8002270:	2301      	movs	r3, #1
 8002272:	77fb      	strb	r3, [r7, #31]
 8002274:	e0b5      	b.n	80023e2 <UART_SetConfig+0x212>
 8002276:	2302      	movs	r3, #2
 8002278:	77fb      	strb	r3, [r7, #31]
 800227a:	e0b2      	b.n	80023e2 <UART_SetConfig+0x212>
 800227c:	2304      	movs	r3, #4
 800227e:	77fb      	strb	r3, [r7, #31]
 8002280:	e0af      	b.n	80023e2 <UART_SetConfig+0x212>
 8002282:	2308      	movs	r3, #8
 8002284:	77fb      	strb	r3, [r7, #31]
 8002286:	e0ac      	b.n	80023e2 <UART_SetConfig+0x212>
 8002288:	2310      	movs	r3, #16
 800228a:	77fb      	strb	r3, [r7, #31]
 800228c:	e0a9      	b.n	80023e2 <UART_SetConfig+0x212>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6f      	ldr	r2, [pc, #444]	@ (8002450 <UART_SetConfig+0x280>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d124      	bne.n	80022e2 <UART_SetConfig+0x112>
 8002298:	4b6c      	ldr	r3, [pc, #432]	@ (800244c <UART_SetConfig+0x27c>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80022a4:	d011      	beq.n	80022ca <UART_SetConfig+0xfa>
 80022a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80022aa:	d817      	bhi.n	80022dc <UART_SetConfig+0x10c>
 80022ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022b0:	d011      	beq.n	80022d6 <UART_SetConfig+0x106>
 80022b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022b6:	d811      	bhi.n	80022dc <UART_SetConfig+0x10c>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <UART_SetConfig+0xf4>
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c0:	d006      	beq.n	80022d0 <UART_SetConfig+0x100>
 80022c2:	e00b      	b.n	80022dc <UART_SetConfig+0x10c>
 80022c4:	2300      	movs	r3, #0
 80022c6:	77fb      	strb	r3, [r7, #31]
 80022c8:	e08b      	b.n	80023e2 <UART_SetConfig+0x212>
 80022ca:	2302      	movs	r3, #2
 80022cc:	77fb      	strb	r3, [r7, #31]
 80022ce:	e088      	b.n	80023e2 <UART_SetConfig+0x212>
 80022d0:	2304      	movs	r3, #4
 80022d2:	77fb      	strb	r3, [r7, #31]
 80022d4:	e085      	b.n	80023e2 <UART_SetConfig+0x212>
 80022d6:	2308      	movs	r3, #8
 80022d8:	77fb      	strb	r3, [r7, #31]
 80022da:	e082      	b.n	80023e2 <UART_SetConfig+0x212>
 80022dc:	2310      	movs	r3, #16
 80022de:	77fb      	strb	r3, [r7, #31]
 80022e0:	e07f      	b.n	80023e2 <UART_SetConfig+0x212>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002454 <UART_SetConfig+0x284>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d124      	bne.n	8002336 <UART_SetConfig+0x166>
 80022ec:	4b57      	ldr	r3, [pc, #348]	@ (800244c <UART_SetConfig+0x27c>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80022f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80022f8:	d011      	beq.n	800231e <UART_SetConfig+0x14e>
 80022fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80022fe:	d817      	bhi.n	8002330 <UART_SetConfig+0x160>
 8002300:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002304:	d011      	beq.n	800232a <UART_SetConfig+0x15a>
 8002306:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800230a:	d811      	bhi.n	8002330 <UART_SetConfig+0x160>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <UART_SetConfig+0x148>
 8002310:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002314:	d006      	beq.n	8002324 <UART_SetConfig+0x154>
 8002316:	e00b      	b.n	8002330 <UART_SetConfig+0x160>
 8002318:	2300      	movs	r3, #0
 800231a:	77fb      	strb	r3, [r7, #31]
 800231c:	e061      	b.n	80023e2 <UART_SetConfig+0x212>
 800231e:	2302      	movs	r3, #2
 8002320:	77fb      	strb	r3, [r7, #31]
 8002322:	e05e      	b.n	80023e2 <UART_SetConfig+0x212>
 8002324:	2304      	movs	r3, #4
 8002326:	77fb      	strb	r3, [r7, #31]
 8002328:	e05b      	b.n	80023e2 <UART_SetConfig+0x212>
 800232a:	2308      	movs	r3, #8
 800232c:	77fb      	strb	r3, [r7, #31]
 800232e:	e058      	b.n	80023e2 <UART_SetConfig+0x212>
 8002330:	2310      	movs	r3, #16
 8002332:	77fb      	strb	r3, [r7, #31]
 8002334:	e055      	b.n	80023e2 <UART_SetConfig+0x212>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a47      	ldr	r2, [pc, #284]	@ (8002458 <UART_SetConfig+0x288>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d124      	bne.n	800238a <UART_SetConfig+0x1ba>
 8002340:	4b42      	ldr	r3, [pc, #264]	@ (800244c <UART_SetConfig+0x27c>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002348:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800234c:	d011      	beq.n	8002372 <UART_SetConfig+0x1a2>
 800234e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002352:	d817      	bhi.n	8002384 <UART_SetConfig+0x1b4>
 8002354:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002358:	d011      	beq.n	800237e <UART_SetConfig+0x1ae>
 800235a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800235e:	d811      	bhi.n	8002384 <UART_SetConfig+0x1b4>
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <UART_SetConfig+0x19c>
 8002364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002368:	d006      	beq.n	8002378 <UART_SetConfig+0x1a8>
 800236a:	e00b      	b.n	8002384 <UART_SetConfig+0x1b4>
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
 8002370:	e037      	b.n	80023e2 <UART_SetConfig+0x212>
 8002372:	2302      	movs	r3, #2
 8002374:	77fb      	strb	r3, [r7, #31]
 8002376:	e034      	b.n	80023e2 <UART_SetConfig+0x212>
 8002378:	2304      	movs	r3, #4
 800237a:	77fb      	strb	r3, [r7, #31]
 800237c:	e031      	b.n	80023e2 <UART_SetConfig+0x212>
 800237e:	2308      	movs	r3, #8
 8002380:	77fb      	strb	r3, [r7, #31]
 8002382:	e02e      	b.n	80023e2 <UART_SetConfig+0x212>
 8002384:	2310      	movs	r3, #16
 8002386:	77fb      	strb	r3, [r7, #31]
 8002388:	e02b      	b.n	80023e2 <UART_SetConfig+0x212>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a33      	ldr	r2, [pc, #204]	@ (800245c <UART_SetConfig+0x28c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d124      	bne.n	80023de <UART_SetConfig+0x20e>
 8002394:	4b2d      	ldr	r3, [pc, #180]	@ (800244c <UART_SetConfig+0x27c>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002398:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800239c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023a0:	d011      	beq.n	80023c6 <UART_SetConfig+0x1f6>
 80023a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023a6:	d817      	bhi.n	80023d8 <UART_SetConfig+0x208>
 80023a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ac:	d011      	beq.n	80023d2 <UART_SetConfig+0x202>
 80023ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023b2:	d811      	bhi.n	80023d8 <UART_SetConfig+0x208>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <UART_SetConfig+0x1f0>
 80023b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023bc:	d006      	beq.n	80023cc <UART_SetConfig+0x1fc>
 80023be:	e00b      	b.n	80023d8 <UART_SetConfig+0x208>
 80023c0:	2300      	movs	r3, #0
 80023c2:	77fb      	strb	r3, [r7, #31]
 80023c4:	e00d      	b.n	80023e2 <UART_SetConfig+0x212>
 80023c6:	2302      	movs	r3, #2
 80023c8:	77fb      	strb	r3, [r7, #31]
 80023ca:	e00a      	b.n	80023e2 <UART_SetConfig+0x212>
 80023cc:	2304      	movs	r3, #4
 80023ce:	77fb      	strb	r3, [r7, #31]
 80023d0:	e007      	b.n	80023e2 <UART_SetConfig+0x212>
 80023d2:	2308      	movs	r3, #8
 80023d4:	77fb      	strb	r3, [r7, #31]
 80023d6:	e004      	b.n	80023e2 <UART_SetConfig+0x212>
 80023d8:	2310      	movs	r3, #16
 80023da:	77fb      	strb	r3, [r7, #31]
 80023dc:	e001      	b.n	80023e2 <UART_SetConfig+0x212>
 80023de:	2310      	movs	r3, #16
 80023e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023ea:	d16b      	bne.n	80024c4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d838      	bhi.n	8002464 <UART_SetConfig+0x294>
 80023f2:	a201      	add	r2, pc, #4	@ (adr r2, 80023f8 <UART_SetConfig+0x228>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	0800241d 	.word	0x0800241d
 80023fc:	08002425 	.word	0x08002425
 8002400:	0800242d 	.word	0x0800242d
 8002404:	08002465 	.word	0x08002465
 8002408:	08002433 	.word	0x08002433
 800240c:	08002465 	.word	0x08002465
 8002410:	08002465 	.word	0x08002465
 8002414:	08002465 	.word	0x08002465
 8002418:	0800243b 	.word	0x0800243b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800241c:	f7ff fdbc 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002420:	61b8      	str	r0, [r7, #24]
        break;
 8002422:	e024      	b.n	800246e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7ff fdda 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8002428:	61b8      	str	r0, [r7, #24]
        break;
 800242a:	e020      	b.n	800246e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <UART_SetConfig+0x290>)
 800242e:	61bb      	str	r3, [r7, #24]
        break;
 8002430:	e01d      	b.n	800246e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002432:	f7ff fd51 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8002436:	61b8      	str	r0, [r7, #24]
        break;
 8002438:	e019      	b.n	800246e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800243a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800243e:	61bb      	str	r3, [r7, #24]
        break;
 8002440:	e015      	b.n	800246e <UART_SetConfig+0x29e>
 8002442:	bf00      	nop
 8002444:	efff69f3 	.word	0xefff69f3
 8002448:	40013800 	.word	0x40013800
 800244c:	40021000 	.word	0x40021000
 8002450:	40004400 	.word	0x40004400
 8002454:	40004800 	.word	0x40004800
 8002458:	40004c00 	.word	0x40004c00
 800245c:	40005000 	.word	0x40005000
 8002460:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	77bb      	strb	r3, [r7, #30]
        break;
 800246c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d073      	beq.n	800255c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	005a      	lsls	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	441a      	add	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d916      	bls.n	80024be <UART_SetConfig+0x2ee>
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002496:	d212      	bcs.n	80024be <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	b29b      	uxth	r3, r3
 800249c:	f023 030f 	bic.w	r3, r3, #15
 80024a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	89fb      	ldrh	r3, [r7, #14]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	89fa      	ldrh	r2, [r7, #14]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	e04e      	b.n	800255c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	77bb      	strb	r3, [r7, #30]
 80024c2:	e04b      	b.n	800255c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024c4:	7ffb      	ldrb	r3, [r7, #31]
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d827      	bhi.n	800251a <UART_SetConfig+0x34a>
 80024ca:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <UART_SetConfig+0x300>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024f5 	.word	0x080024f5
 80024d4:	080024fd 	.word	0x080024fd
 80024d8:	08002505 	.word	0x08002505
 80024dc:	0800251b 	.word	0x0800251b
 80024e0:	0800250b 	.word	0x0800250b
 80024e4:	0800251b 	.word	0x0800251b
 80024e8:	0800251b 	.word	0x0800251b
 80024ec:	0800251b 	.word	0x0800251b
 80024f0:	08002513 	.word	0x08002513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024f4:	f7ff fd50 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80024f8:	61b8      	str	r0, [r7, #24]
        break;
 80024fa:	e013      	b.n	8002524 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80024fc:	f7ff fd6e 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8002500:	61b8      	str	r0, [r7, #24]
        break;
 8002502:	e00f      	b.n	8002524 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002504:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <UART_SetConfig+0x3a4>)
 8002506:	61bb      	str	r3, [r7, #24]
        break;
 8002508:	e00c      	b.n	8002524 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800250a:	f7ff fce5 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 800250e:	61b8      	str	r0, [r7, #24]
        break;
 8002510:	e008      	b.n	8002524 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002516:	61bb      	str	r3, [r7, #24]
        break;
 8002518:	e004      	b.n	8002524 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	77bb      	strb	r3, [r7, #30]
        break;
 8002522:	bf00      	nop
    }

    if (pclk != 0U)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d018      	beq.n	800255c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	085a      	lsrs	r2, r3, #1
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	441a      	add	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b0f      	cmp	r3, #15
 8002542:	d909      	bls.n	8002558 <UART_SetConfig+0x388>
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800254a:	d205      	bcs.n	8002558 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	b29a      	uxth	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	e001      	b.n	800255c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002568:	7fbb      	ldrb	r3, [r7, #30]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	007a1200 	.word	0x007a1200

08002578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01a      	beq.n	800268e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002676:	d10a      	bne.n	800268e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]
  }
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b098      	sub	sp, #96	@ 0x60
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026cc:	f7fd ffba 	bl	8000644 <HAL_GetTick>
 80026d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d12e      	bne.n	800273e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e8:	2200      	movs	r2, #0
 80026ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f88c 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d021      	beq.n	800273e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002702:	e853 3f00 	ldrex	r3, [r3]
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800270e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002718:	647b      	str	r3, [r7, #68]	@ 0x44
 800271a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800271e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002720:	e841 2300 	strex	r3, r2, [r1]
 8002724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e6      	bne.n	80026fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e062      	b.n	8002804 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b04      	cmp	r3, #4
 800274a:	d149      	bne.n	80027e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800274c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002754:	2200      	movs	r2, #0
 8002756:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f856 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d03c      	beq.n	80027e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	e853 3f00 	ldrex	r3, [r3]
 8002772:	623b      	str	r3, [r7, #32]
   return(result);
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800277a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002784:	633b      	str	r3, [r7, #48]	@ 0x30
 8002786:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800278a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800278c:	e841 2300 	strex	r3, r2, [r1]
 8002790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e6      	bne.n	8002766 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3308      	adds	r3, #8
 800279e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	e853 3f00 	ldrex	r3, [r3]
 80027a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3308      	adds	r3, #8
 80027b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027b8:	61fa      	str	r2, [r7, #28]
 80027ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027bc:	69b9      	ldr	r1, [r7, #24]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	e841 2300 	strex	r3, r2, [r1]
 80027c4:	617b      	str	r3, [r7, #20]
   return(result);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e5      	bne.n	8002798 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e011      	b.n	8002804 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3758      	adds	r7, #88	@ 0x58
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281c:	e04f      	b.n	80028be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d04b      	beq.n	80028be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7fd ff0d 	bl	8000644 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <UART_WaitOnFlagUntilTimeout+0x30>
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e04e      	b.n	80028de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d037      	beq.n	80028be <UART_WaitOnFlagUntilTimeout+0xb2>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b80      	cmp	r3, #128	@ 0x80
 8002852:	d034      	beq.n	80028be <UART_WaitOnFlagUntilTimeout+0xb2>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b40      	cmp	r3, #64	@ 0x40
 8002858:	d031      	beq.n	80028be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d110      	bne.n	800288a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2208      	movs	r2, #8
 800286e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f838 	bl	80028e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2208      	movs	r2, #8
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e029      	b.n	80028de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002898:	d111      	bne.n	80028be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f81e 	bl	80028e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e00f      	b.n	80028de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4013      	ands	r3, r2
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d0a0      	beq.n	800281e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b095      	sub	sp, #84	@ 0x54
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f6:	e853 3f00 	ldrex	r3, [r3]
 80028fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800290c:	643b      	str	r3, [r7, #64]	@ 0x40
 800290e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002910:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002912:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002914:	e841 2300 	strex	r3, r2, [r1]
 8002918:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800291a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e6      	bne.n	80028ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3308      	adds	r3, #8
 8002926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	e853 3f00 	ldrex	r3, [r3]
 800292e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3308      	adds	r3, #8
 800293e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002948:	e841 2300 	strex	r3, r2, [r1]
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e5      	bne.n	8002920 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002958:	2b01      	cmp	r3, #1
 800295a:	d118      	bne.n	800298e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	60bb      	str	r3, [r7, #8]
   return(result);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f023 0310 	bic.w	r3, r3, #16
 8002970:	647b      	str	r3, [r7, #68]	@ 0x44
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6979      	ldr	r1, [r7, #20]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	613b      	str	r3, [r7, #16]
   return(result);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e6      	bne.n	800295c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80029a2:	bf00      	nop
 80029a4:	3754      	adds	r7, #84	@ 0x54
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <memset>:
 80029ae:	4402      	add	r2, r0
 80029b0:	4603      	mov	r3, r0
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d100      	bne.n	80029b8 <memset+0xa>
 80029b6:	4770      	bx	lr
 80029b8:	f803 1b01 	strb.w	r1, [r3], #1
 80029bc:	e7f9      	b.n	80029b2 <memset+0x4>
	...

080029c0 <__libc_init_array>:
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	4d0d      	ldr	r5, [pc, #52]	@ (80029f8 <__libc_init_array+0x38>)
 80029c4:	4c0d      	ldr	r4, [pc, #52]	@ (80029fc <__libc_init_array+0x3c>)
 80029c6:	1b64      	subs	r4, r4, r5
 80029c8:	10a4      	asrs	r4, r4, #2
 80029ca:	2600      	movs	r6, #0
 80029cc:	42a6      	cmp	r6, r4
 80029ce:	d109      	bne.n	80029e4 <__libc_init_array+0x24>
 80029d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002a00 <__libc_init_array+0x40>)
 80029d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002a04 <__libc_init_array+0x44>)
 80029d4:	f000 f818 	bl	8002a08 <_init>
 80029d8:	1b64      	subs	r4, r4, r5
 80029da:	10a4      	asrs	r4, r4, #2
 80029dc:	2600      	movs	r6, #0
 80029de:	42a6      	cmp	r6, r4
 80029e0:	d105      	bne.n	80029ee <__libc_init_array+0x2e>
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
 80029e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e8:	4798      	blx	r3
 80029ea:	3601      	adds	r6, #1
 80029ec:	e7ee      	b.n	80029cc <__libc_init_array+0xc>
 80029ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f2:	4798      	blx	r3
 80029f4:	3601      	adds	r6, #1
 80029f6:	e7f2      	b.n	80029de <__libc_init_array+0x1e>
 80029f8:	08002a68 	.word	0x08002a68
 80029fc:	08002a68 	.word	0x08002a68
 8002a00:	08002a68 	.word	0x08002a68
 8002a04:	08002a6c 	.word	0x08002a6c

08002a08 <_init>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr

08002a14 <_fini>:
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	bf00      	nop
 8002a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1a:	bc08      	pop	{r3}
 8002a1c:	469e      	mov	lr, r3
 8002a1e:	4770      	bx	lr
