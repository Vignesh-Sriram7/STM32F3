
Toggle_button_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dcc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001f60  08001f60  00002f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f90  08001f90  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001f90  08001f90  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001f90  08001f90  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f90  08001f90  00002f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f94  08001f94  00002f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001f98  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f33  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ea8  00000000  00000000  00006f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000400  00000000  00000000  00007e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002dd  00000000  00000000  00008218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e2bb  00000000  00000000  000084f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000561c  00000000  00000000  000267b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7093  00000000  00000000  0002bdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e2e5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e28  00000000  00000000  000e2ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000e3ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001f48 	.word	0x08001f48

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001f48 	.word	0x08001f48

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f95a 	bl	8000490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f804 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f83e 	bl	8000260 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	bf00      	nop
 80001e6:	e7fd      	b.n	80001e4 <main+0x10>

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	@ 0x40
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	@ 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fe7a 	bl	8001ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000212:	2310      	movs	r3, #16
 8000214:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000216:	2300      	movs	r3, #0
 8000218:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fc80 	bl	8000b24 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800022a:	f000 f893 	bl	8000354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fc90 	bl	8001b6c <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000252:	f000 f87f 	bl	8000354 <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	@ 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 030c 	add.w	r3, r7, #12
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000276:	4b23      	ldr	r3, [pc, #140]	@ (8000304 <MX_GPIO_Init+0xa4>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a22      	ldr	r2, [pc, #136]	@ (8000304 <MX_GPIO_Init+0xa4>)
 800027c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000280:	6153      	str	r3, [r2, #20]
 8000282:	4b20      	ldr	r3, [pc, #128]	@ (8000304 <MX_GPIO_Init+0xa4>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b1d      	ldr	r3, [pc, #116]	@ (8000304 <MX_GPIO_Init+0xa4>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a1c      	ldr	r2, [pc, #112]	@ (8000304 <MX_GPIO_Init+0xa4>)
 8000294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b1a      	ldr	r3, [pc, #104]	@ (8000304 <MX_GPIO_Init+0xa4>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2120      	movs	r1, #32
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f000 fc09 	bl	8000ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80002b8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80002bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c2:	f107 030c 	add.w	r3, r7, #12
 80002c6:	4619      	mov	r1, r3
 80002c8:	480f      	ldr	r0, [pc, #60]	@ (8000308 <MX_GPIO_Init+0xa8>)
 80002ca:	f000 fa59 	bl	8000780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002ce:	2320      	movs	r3, #32
 80002d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4619      	mov	r1, r3
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e8:	f000 fa4a 	bl	8000780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2100      	movs	r1, #0
 80002f0:	2028      	movs	r0, #40	@ 0x28
 80002f2:	f000 fa0e 	bl	8000712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002f6:	2028      	movs	r0, #40	@ 0x28
 80002f8:	f000 fa27 	bl	800074a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002fc:	bf00      	nop
 80002fe:	3720      	adds	r7, #32
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40021000 	.word	0x40021000
 8000308:	48000800 	.word	0x48000800

0800030c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800031c:	d114      	bne.n	8000348 <HAL_GPIO_EXTI_Callback+0x3c>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) { // button pressed (active low)
 800031e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000322:	480b      	ldr	r0, [pc, #44]	@ (8000350 <HAL_GPIO_EXTI_Callback+0x44>)
 8000324:	f000 fbb6 	bl	8000a94 <HAL_GPIO_ReadPin>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d106      	bne.n	800033c <HAL_GPIO_EXTI_Callback+0x30>
	              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2120      	movs	r1, #32
 8000332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000336:	f000 fbc5 	bl	8000ac4 <HAL_GPIO_WritePin>
	          } else { // button released
	              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	          }
  }
}
 800033a:	e005      	b.n	8000348 <HAL_GPIO_EXTI_Callback+0x3c>
	              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2120      	movs	r1, #32
 8000340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000344:	f000 fbbe 	bl	8000ac4 <HAL_GPIO_WritePin>
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	48000800 	.word	0x48000800

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
}
 800035a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <Error_Handler+0x8>

08000360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <HAL_MspInit+0x44>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a0e      	ldr	r2, [pc, #56]	@ (80003a4 <HAL_MspInit+0x44>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b0c      	ldr	r3, [pc, #48]	@ (80003a4 <HAL_MspInit+0x44>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037e:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <HAL_MspInit+0x44>)
 8000380:	69db      	ldr	r3, [r3, #28]
 8000382:	4a08      	ldr	r2, [pc, #32]	@ (80003a4 <HAL_MspInit+0x44>)
 8000384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000388:	61d3      	str	r3, [r2, #28]
 800038a:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <HAL_MspInit+0x44>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <NMI_Handler+0x4>

080003b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b4:	bf00      	nop
 80003b6:	e7fd      	b.n	80003b4 <HardFault_Handler+0x4>

080003b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <MemManage_Handler+0x4>

080003c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <BusFault_Handler+0x4>

080003c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <UsageFault_Handler+0x4>

080003d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fe:	f000 f88d 	bl	800051c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}

08000406 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800040a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800040e:	f000 fb71 	bl	8000af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <SystemInit+0x20>)
 800041e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000422:	4a05      	ldr	r2, [pc, #20]	@ (8000438 <SystemInit+0x20>)
 8000424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800043c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000474 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000440:	f7ff ffea 	bl	8000418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000444:	480c      	ldr	r0, [pc, #48]	@ (8000478 <LoopForever+0x6>)
  ldr r1, =_edata
 8000446:	490d      	ldr	r1, [pc, #52]	@ (800047c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000448:	4a0d      	ldr	r2, [pc, #52]	@ (8000480 <LoopForever+0xe>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a0a      	ldr	r2, [pc, #40]	@ (8000484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800045c:	4c0a      	ldr	r4, [pc, #40]	@ (8000488 <LoopForever+0x16>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800046a:	f001 fd49 	bl	8001f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800046e:	f7ff feb1 	bl	80001d4 <main>

08000472 <LoopForever>:

LoopForever:
    b LoopForever
 8000472:	e7fe      	b.n	8000472 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000474:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800047c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000480:	08001f98 	.word	0x08001f98
  ldr r2, =_sbss
 8000484:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000488:	2000002c 	.word	0x2000002c

0800048c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800048c:	e7fe      	b.n	800048c <ADC1_2_IRQHandler>
	...

08000490 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <HAL_Init+0x28>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a07      	ldr	r2, [pc, #28]	@ (80004b8 <HAL_Init+0x28>)
 800049a:	f043 0310 	orr.w	r3, r3, #16
 800049e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a0:	2003      	movs	r0, #3
 80004a2:	f000 f92b 	bl	80006fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004a6:	200f      	movs	r0, #15
 80004a8:	f000 f808 	bl	80004bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004ac:	f7ff ff58 	bl	8000360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40022000 	.word	0x40022000

080004bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <HAL_InitTick+0x54>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <HAL_InitTick+0x58>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4619      	mov	r1, r3
 80004ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f943 	bl	8000766 <HAL_SYSTICK_Config>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004e6:	2301      	movs	r3, #1
 80004e8:	e00e      	b.n	8000508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2b0f      	cmp	r3, #15
 80004ee:	d80a      	bhi.n	8000506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f0:	2200      	movs	r2, #0
 80004f2:	6879      	ldr	r1, [r7, #4]
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f90b 	bl	8000712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004fc:	4a06      	ldr	r2, [pc, #24]	@ (8000518 <HAL_InitTick+0x5c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000502:	2300      	movs	r3, #0
 8000504:	e000      	b.n	8000508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000506:	2301      	movs	r3, #1
}
 8000508:	4618      	mov	r0, r3
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000000 	.word	0x20000000
 8000514:	20000008 	.word	0x20000008
 8000518:	20000004 	.word	0x20000004

0800051c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <HAL_IncTick+0x20>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <HAL_IncTick+0x24>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a04      	ldr	r2, [pc, #16]	@ (8000540 <HAL_IncTick+0x24>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000008 	.word	0x20000008
 8000540:	20000028 	.word	0x20000028

08000544 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return uwTick;  
 8000548:	4b03      	ldr	r3, [pc, #12]	@ (8000558 <HAL_GetTick+0x14>)
 800054a:	681b      	ldr	r3, [r3, #0]
}
 800054c:	4618      	mov	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000028 	.word	0x20000028

0800055c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800058c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058e:	4a04      	ldr	r2, [pc, #16]	@ (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	60d3      	str	r3, [r2, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a8:	4b04      	ldr	r3, [pc, #16]	@ (80005bc <__NVIC_GetPriorityGrouping+0x18>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	0a1b      	lsrs	r3, r3, #8
 80005ae:	f003 0307 	and.w	r3, r3, #7
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db0b      	blt.n	80005ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 021f 	and.w	r2, r3, #31
 80005d8:	4907      	ldr	r1, [pc, #28]	@ (80005f8 <__NVIC_EnableIRQ+0x38>)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	2001      	movs	r0, #1
 80005e2:	fa00 f202 	lsl.w	r2, r0, r2
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000e100 	.word	0xe000e100

080005fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	db0a      	blt.n	8000626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	490c      	ldr	r1, [pc, #48]	@ (8000648 <__NVIC_SetPriority+0x4c>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	0112      	lsls	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	440b      	add	r3, r1
 8000620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000624:	e00a      	b.n	800063c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4908      	ldr	r1, [pc, #32]	@ (800064c <__NVIC_SetPriority+0x50>)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f003 030f 	and.w	r3, r3, #15
 8000632:	3b04      	subs	r3, #4
 8000634:	0112      	lsls	r2, r2, #4
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	440b      	add	r3, r1
 800063a:	761a      	strb	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000650:	b480      	push	{r7}
 8000652:	b089      	sub	sp, #36	@ 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f1c3 0307 	rsb	r3, r3, #7
 800066a:	2b04      	cmp	r3, #4
 800066c:	bf28      	it	cs
 800066e:	2304      	movcs	r3, #4
 8000670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3304      	adds	r3, #4
 8000676:	2b06      	cmp	r3, #6
 8000678:	d902      	bls.n	8000680 <NVIC_EncodePriority+0x30>
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3b03      	subs	r3, #3
 800067e:	e000      	b.n	8000682 <NVIC_EncodePriority+0x32>
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 32ff 	mov.w	r2, #4294967295
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43da      	mvns	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	401a      	ands	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000698:	f04f 31ff 	mov.w	r1, #4294967295
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43d9      	mvns	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	4313      	orrs	r3, r2
         );
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3724      	adds	r7, #36	@ 0x24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006c8:	d301      	bcc.n	80006ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ca:	2301      	movs	r3, #1
 80006cc:	e00f      	b.n	80006ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <SysTick_Config+0x40>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d6:	210f      	movs	r1, #15
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295
 80006dc:	f7ff ff8e 	bl	80005fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <SysTick_Config+0x40>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <SysTick_Config+0x40>)
 80006e8:	2207      	movs	r2, #7
 80006ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	e000e010 	.word	0xe000e010

080006fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff29 	bl	800055c <__NVIC_SetPriorityGrouping>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b086      	sub	sp, #24
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000724:	f7ff ff3e 	bl	80005a4 <__NVIC_GetPriorityGrouping>
 8000728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f7ff ff8e 	bl	8000650 <NVIC_EncodePriority>
 8000734:	4602      	mov	r2, r0
 8000736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff5d 	bl	80005fc <__NVIC_SetPriority>
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff31 	bl	80005c0 <__NVIC_EnableIRQ>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ffa2 	bl	80006b8 <SysTick_Config>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000780:	b480      	push	{r7}
 8000782:	b087      	sub	sp, #28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800078e:	e160      	b.n	8000a52 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	2101      	movs	r1, #1
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	4013      	ands	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f000 8152 	beq.w	8000a4c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f003 0303 	and.w	r3, r3, #3
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d005      	beq.n	80007c0 <HAL_GPIO_Init+0x40>
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d130      	bne.n	8000822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	2203      	movs	r2, #3
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	4013      	ands	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007f6:	2201      	movs	r2, #1
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	4013      	ands	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	091b      	lsrs	r3, r3, #4
 800080c:	f003 0201 	and.w	r2, r3, #1
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0303 	and.w	r3, r3, #3
 800082a:	2b03      	cmp	r3, #3
 800082c:	d017      	beq.n	800085e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2203      	movs	r2, #3
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4013      	ands	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	4313      	orrs	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f003 0303 	and.w	r3, r3, #3
 8000866:	2b02      	cmp	r3, #2
 8000868:	d123      	bne.n	80008b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	08da      	lsrs	r2, r3, #3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3208      	adds	r2, #8
 8000872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	220f      	movs	r2, #15
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43db      	mvns	r3, r3
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	4013      	ands	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	691a      	ldr	r2, [r3, #16]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	08da      	lsrs	r2, r3, #3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3208      	adds	r2, #8
 80008ac:	6939      	ldr	r1, [r7, #16]
 80008ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	2203      	movs	r2, #3
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 0203 	and.w	r2, r3, #3
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 80ac 	beq.w	8000a4c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f4:	4b5e      	ldr	r3, [pc, #376]	@ (8000a70 <HAL_GPIO_Init+0x2f0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a5d      	ldr	r2, [pc, #372]	@ (8000a70 <HAL_GPIO_Init+0x2f0>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b5b      	ldr	r3, [pc, #364]	@ (8000a70 <HAL_GPIO_Init+0x2f0>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800090c:	4a59      	ldr	r2, [pc, #356]	@ (8000a74 <HAL_GPIO_Init+0x2f4>)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	089b      	lsrs	r3, r3, #2
 8000912:	3302      	adds	r3, #2
 8000914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	220f      	movs	r2, #15
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000936:	d025      	beq.n	8000984 <HAL_GPIO_Init+0x204>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a4f      	ldr	r2, [pc, #316]	@ (8000a78 <HAL_GPIO_Init+0x2f8>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d01f      	beq.n	8000980 <HAL_GPIO_Init+0x200>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a4e      	ldr	r2, [pc, #312]	@ (8000a7c <HAL_GPIO_Init+0x2fc>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d019      	beq.n	800097c <HAL_GPIO_Init+0x1fc>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a4d      	ldr	r2, [pc, #308]	@ (8000a80 <HAL_GPIO_Init+0x300>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d013      	beq.n	8000978 <HAL_GPIO_Init+0x1f8>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a4c      	ldr	r2, [pc, #304]	@ (8000a84 <HAL_GPIO_Init+0x304>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d00d      	beq.n	8000974 <HAL_GPIO_Init+0x1f4>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a88 <HAL_GPIO_Init+0x308>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d007      	beq.n	8000970 <HAL_GPIO_Init+0x1f0>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a4a      	ldr	r2, [pc, #296]	@ (8000a8c <HAL_GPIO_Init+0x30c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d101      	bne.n	800096c <HAL_GPIO_Init+0x1ec>
 8000968:	2306      	movs	r3, #6
 800096a:	e00c      	b.n	8000986 <HAL_GPIO_Init+0x206>
 800096c:	2307      	movs	r3, #7
 800096e:	e00a      	b.n	8000986 <HAL_GPIO_Init+0x206>
 8000970:	2305      	movs	r3, #5
 8000972:	e008      	b.n	8000986 <HAL_GPIO_Init+0x206>
 8000974:	2304      	movs	r3, #4
 8000976:	e006      	b.n	8000986 <HAL_GPIO_Init+0x206>
 8000978:	2303      	movs	r3, #3
 800097a:	e004      	b.n	8000986 <HAL_GPIO_Init+0x206>
 800097c:	2302      	movs	r3, #2
 800097e:	e002      	b.n	8000986 <HAL_GPIO_Init+0x206>
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <HAL_GPIO_Init+0x206>
 8000984:	2300      	movs	r3, #0
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	f002 0203 	and.w	r2, r2, #3
 800098c:	0092      	lsls	r2, r2, #2
 800098e:	4093      	lsls	r3, r2
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000996:	4937      	ldr	r1, [pc, #220]	@ (8000a74 <HAL_GPIO_Init+0x2f4>)
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3302      	adds	r3, #2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000a90 <HAL_GPIO_Init+0x310>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	43db      	mvns	r3, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009c8:	4a31      	ldr	r2, [pc, #196]	@ (8000a90 <HAL_GPIO_Init+0x310>)
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <HAL_GPIO_Init+0x310>)
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009f2:	4a27      	ldr	r2, [pc, #156]	@ (8000a90 <HAL_GPIO_Init+0x310>)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009f8:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <HAL_GPIO_Init+0x310>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <HAL_GPIO_Init+0x310>)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <HAL_GPIO_Init+0x310>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <HAL_GPIO_Init+0x310>)
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	fa22 f303 	lsr.w	r3, r2, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f47f ae97 	bne.w	8000790 <HAL_GPIO_Init+0x10>
  }
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	371c      	adds	r7, #28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010000 	.word	0x40010000
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	48000c00 	.word	0x48000c00
 8000a84:	48001000 	.word	0x48001000
 8000a88:	48001400 	.word	0x48001400
 8000a8c:	48001800 	.word	0x48001800
 8000a90:	40010400 	.word	0x40010400

08000a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	691a      	ldr	r2, [r3, #16]
 8000aa4:	887b      	ldrh	r3, [r7, #2]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	e001      	b.n	8000ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	807b      	strh	r3, [r7, #2]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad4:	787b      	ldrb	r3, [r7, #1]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ada:	887a      	ldrh	r2, [r7, #2]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ae0:	e002      	b.n	8000ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ae2:	887a      	ldrh	r2, [r7, #2]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fbfa 	bl	800030c <HAL_GPIO_EXTI_Callback>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40010400 	.word	0x40010400

08000b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b34:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	f001 b80a 	b.w	8001b5e <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8161 	beq.w	8000e22 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b60:	4bae      	ldr	r3, [pc, #696]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d00c      	beq.n	8000b86 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b6c:	4bab      	ldr	r3, [pc, #684]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d157      	bne.n	8000c28 <HAL_RCC_OscConfig+0x104>
 8000b78:	4ba8      	ldr	r3, [pc, #672]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b84:	d150      	bne.n	8000c28 <HAL_RCC_OscConfig+0x104>
 8000b86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b8a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000b92:	fa93 f3a3 	rbit	r3, r3
 8000b96:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9e:	fab3 f383 	clz	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ba6:	d802      	bhi.n	8000bae <HAL_RCC_OscConfig+0x8a>
 8000ba8:	4b9c      	ldr	r3, [pc, #624]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	e015      	b.n	8000bda <HAL_RCC_OscConfig+0xb6>
 8000bae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bb2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000bba:	fa93 f3a3 	rbit	r3, r3
 8000bbe:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000bc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bc6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000bca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000bce:	fa93 f3a3 	rbit	r3, r3
 8000bd2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000bd6:	4b91      	ldr	r3, [pc, #580]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bde:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000be2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000be6:	fa92 f2a2 	rbit	r2, r2
 8000bea:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000bee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	f042 0220 	orr.w	r2, r2, #32
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	f002 021f 	and.w	r2, r2, #31
 8000c02:	2101      	movs	r1, #1
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8108 	beq.w	8000e20 <HAL_RCC_OscConfig+0x2fc>
 8000c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f040 80ff 	bne.w	8000e20 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f000 bf9b 	b.w	8001b5e <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c38:	d106      	bne.n	8000c48 <HAL_RCC_OscConfig+0x124>
 8000c3a:	4b78      	ldr	r3, [pc, #480]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a77      	ldr	r2, [pc, #476]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e036      	b.n	8000cb6 <HAL_RCC_OscConfig+0x192>
 8000c48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10c      	bne.n	8000c72 <HAL_RCC_OscConfig+0x14e>
 8000c58:	4b70      	ldr	r3, [pc, #448]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a6f      	ldr	r2, [pc, #444]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4b6d      	ldr	r3, [pc, #436]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a6c      	ldr	r2, [pc, #432]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	e021      	b.n	8000cb6 <HAL_RCC_OscConfig+0x192>
 8000c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c82:	d10c      	bne.n	8000c9e <HAL_RCC_OscConfig+0x17a>
 8000c84:	4b65      	ldr	r3, [pc, #404]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a64      	ldr	r2, [pc, #400]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b62      	ldr	r3, [pc, #392]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a61      	ldr	r2, [pc, #388]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e00b      	b.n	8000cb6 <HAL_RCC_OscConfig+0x192>
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a5e      	ldr	r2, [pc, #376]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	4b5c      	ldr	r3, [pc, #368]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a5b      	ldr	r2, [pc, #364]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cb4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d054      	beq.n	8000d70 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fc3d 	bl	8000544 <HAL_GetTick>
 8000cca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cce:	e00a      	b.n	8000ce6 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fc38 	bl	8000544 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b64      	cmp	r3, #100	@ 0x64
 8000cde:	d902      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	f000 bf3c 	b.w	8001b5e <HAL_RCC_OscConfig+0x103a>
 8000ce6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cea:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000cfa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d06:	d802      	bhi.n	8000d0e <HAL_RCC_OscConfig+0x1ea>
 8000d08:	4b44      	ldr	r3, [pc, #272]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	e015      	b.n	8000d3a <HAL_RCC_OscConfig+0x216>
 8000d0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d12:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000d22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d26:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000d2a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000d2e:	fa93 f3a3 	rbit	r3, r3
 8000d32:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000d36:	4b39      	ldr	r3, [pc, #228]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d3e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000d42:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000d46:	fa92 f2a2 	rbit	r2, r2
 8000d4a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000d4e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	f042 0220 	orr.w	r2, r2, #32
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	f002 021f 	and.w	r2, r2, #31
 8000d62:	2101      	movs	r1, #1
 8000d64:	fa01 f202 	lsl.w	r2, r1, r2
 8000d68:	4013      	ands	r3, r2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0b0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x1ac>
 8000d6e:	e058      	b.n	8000e22 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fbe8 	bl	8000544 <HAL_GetTick>
 8000d74:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d78:	e00a      	b.n	8000d90 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d7a:	f7ff fbe3 	bl	8000544 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	@ 0x64
 8000d88:	d902      	bls.n	8000d90 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	f000 bee7 	b.w	8001b5e <HAL_RCC_OscConfig+0x103a>
 8000d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d94:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000da4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b3f      	cmp	r3, #63	@ 0x3f
 8000db0:	d802      	bhi.n	8000db8 <HAL_RCC_OscConfig+0x294>
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	e015      	b.n	8000de4 <HAL_RCC_OscConfig+0x2c0>
 8000db8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dbc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000dcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dd0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000dd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_RCC_OscConfig+0x2f8>)
 8000de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000de8:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000dec:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000df0:	fa92 f2a2 	rbit	r2, r2
 8000df4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000df8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000dfc:	fab2 f282 	clz	r2, r2
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	f042 0220 	orr.w	r2, r2, #32
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	f002 021f 	and.w	r2, r2, #31
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1b0      	bne.n	8000d7a <HAL_RCC_OscConfig+0x256>
 8000e18:	e003      	b.n	8000e22 <HAL_RCC_OscConfig+0x2fe>
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 816d 	beq.w	8001112 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e38:	4bcd      	ldr	r3, [pc, #820]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00c      	beq.n	8000e5e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e44:	4bca      	ldr	r3, [pc, #808]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d16e      	bne.n	8000f2e <HAL_RCC_OscConfig+0x40a>
 8000e50:	4bc7      	ldr	r3, [pc, #796]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e5c:	d167      	bne.n	8000f2e <HAL_RCC_OscConfig+0x40a>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000e68:	fa93 f3a3 	rbit	r3, r3
 8000e6c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000e70:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e74:	fab3 f383 	clz	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e7c:	d802      	bhi.n	8000e84 <HAL_RCC_OscConfig+0x360>
 8000e7e:	4bbc      	ldr	r3, [pc, #752]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	e013      	b.n	8000eac <HAL_RCC_OscConfig+0x388>
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000e8e:	fa93 f3a3 	rbit	r3, r3
 8000e92:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000e9c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000ea8:	4bb1      	ldr	r3, [pc, #708]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eac:	2202      	movs	r2, #2
 8000eae:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000eb2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000eb6:	fa92 f2a2 	rbit	r2, r2
 8000eba:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000ebe:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000ec2:	fab2 f282 	clz	r2, r2
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	f042 0220 	orr.w	r2, r2, #32
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	f002 021f 	and.w	r2, r2, #31
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed8:	4013      	ands	r3, r2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00a      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x3d0>
 8000ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ee2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d002      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f000 be35 	b.w	8001b5e <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b9e      	ldr	r3, [pc, #632]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	21f8      	movs	r1, #248	@ 0xf8
 8000f0a:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000f12:	fa91 f1a1 	rbit	r1, r1
 8000f16:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000f1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000f1e:	fab1 f181 	clz	r1, r1
 8000f22:	b2c9      	uxtb	r1, r1
 8000f24:	408b      	lsls	r3, r1
 8000f26:	4992      	ldr	r1, [pc, #584]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2c:	e0f1      	b.n	8001112 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8083 	beq.w	8001046 <HAL_RCC_OscConfig+0x522>
 8000f40:	2301      	movs	r3, #1
 8000f42:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000f52:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000f60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	461a      	mov	r2, r3
 8000f68:	2301      	movs	r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff faea 	bl	8000544 <HAL_GetTick>
 8000f70:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f74:	e00a      	b.n	8000f8c <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f76:	f7ff fae5 	bl	8000544 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d902      	bls.n	8000f8c <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	f000 bde9 	b.w	8001b5e <HAL_RCC_OscConfig+0x103a>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000f9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa2:	fab3 f383 	clz	r3, r3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000faa:	d802      	bhi.n	8000fb2 <HAL_RCC_OscConfig+0x48e>
 8000fac:	4b70      	ldr	r3, [pc, #448]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	e013      	b.n	8000fda <HAL_RCC_OscConfig+0x4b6>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000fca:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000fd6:	4b66      	ldr	r3, [pc, #408]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fda:	2202      	movs	r2, #2
 8000fdc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8000fe0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000fe4:	fa92 f2a2 	rbit	r2, r2
 8000fe8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8000fec:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000ff0:	fab2 f282 	clz	r2, r2
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	f002 021f 	and.w	r2, r2, #31
 8001000:	2101      	movs	r1, #1
 8001002:	fa01 f202 	lsl.w	r2, r1, r2
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0b4      	beq.n	8000f76 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b58      	ldr	r3, [pc, #352]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001018:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	21f8      	movs	r1, #248	@ 0xf8
 8001022:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800102a:	fa91 f1a1 	rbit	r1, r1
 800102e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001032:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001036:	fab1 f181 	clz	r1, r1
 800103a:	b2c9      	uxtb	r1, r1
 800103c:	408b      	lsls	r3, r1
 800103e:	494c      	ldr	r1, [pc, #304]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]
 8001044:	e065      	b.n	8001112 <HAL_RCC_OscConfig+0x5ee>
 8001046:	2301      	movs	r3, #1
 8001048:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001058:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001066:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	461a      	mov	r2, r3
 800106e:	2300      	movs	r3, #0
 8001070:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fa67 	bl	8000544 <HAL_GetTick>
 8001076:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	e00a      	b.n	8001092 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fa62 	bl	8000544 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d902      	bls.n	8001092 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	f000 bd66 	b.w	8001b5e <HAL_RCC_OscConfig+0x103a>
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80010a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a8:	fab3 f383 	clz	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80010b0:	d802      	bhi.n	80010b8 <HAL_RCC_OscConfig+0x594>
 80010b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	e013      	b.n	80010e0 <HAL_RCC_OscConfig+0x5bc>
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80010d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <HAL_RCC_OscConfig+0x64c>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e0:	2202      	movs	r2, #2
 80010e2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80010e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80010ea:	fa92 f2a2 	rbit	r2, r2
 80010ee:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80010f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80010f6:	fab2 f282 	clz	r2, r2
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	f042 0220 	orr.w	r2, r2, #32
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	f002 021f 	and.w	r2, r2, #31
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1b4      	bne.n	800107c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001116:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8119 	beq.w	800135a <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800112c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 8082 	beq.w	800123e <HAL_RCC_OscConfig+0x71a>
 800113a:	2301      	movs	r3, #1
 800113c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800114c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_RCC_OscConfig+0x650>)
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	461a      	mov	r2, r3
 8001160:	2301      	movs	r3, #1
 8001162:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff f9ee 	bl	8000544 <HAL_GetTick>
 8001168:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116c:	e00f      	b.n	800118e <HAL_RCC_OscConfig+0x66a>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001178:	f7ff f9e4 	bl	8000544 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d902      	bls.n	800118e <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	f000 bce8 	b.w	8001b5e <HAL_RCC_OscConfig+0x103a>
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001198:	fa93 f2a3 	rbit	r2, r3
 800119c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011ae:	2202      	movs	r2, #2
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	fa93 f2a3 	rbit	r2, r3
 80011c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011d2:	2202      	movs	r2, #2
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	fa93 f2a3 	rbit	r2, r3
 80011e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80011ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	4bb0      	ldr	r3, [pc, #704]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 80011f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80011fa:	2102      	movs	r1, #2
 80011fc:	6019      	str	r1, [r3, #0]
 80011fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001202:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	fa93 f1a3 	rbit	r1, r3
 800120c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001210:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001214:	6019      	str	r1, [r3, #0]
  return result;
 8001216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800121a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	fab3 f383 	clz	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	2101      	movs	r1, #1
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d09d      	beq.n	8001178 <HAL_RCC_OscConfig+0x654>
 800123c:	e08d      	b.n	800135a <HAL_RCC_OscConfig+0x836>
 800123e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001242:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	fa93 f2a3 	rbit	r2, r3
 8001258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800125c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001260:	601a      	str	r2, [r3, #0]
  return result;
 8001262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001266:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800126a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126c:	fab3 f383 	clz	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	4b8f      	ldr	r3, [pc, #572]	@ (80014b4 <HAL_RCC_OscConfig+0x990>)
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	461a      	mov	r2, r3
 800127c:	2300      	movs	r3, #0
 800127e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff f960 	bl	8000544 <HAL_GetTick>
 8001284:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e00a      	b.n	80012a0 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff f95b 	bl	8000544 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d902      	bls.n	80012a0 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	f000 bc5f 	b.w	8001b5e <HAL_RCC_OscConfig+0x103a>
 80012a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	fa93 f2a3 	rbit	r2, r3
 80012ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012cc:	2202      	movs	r2, #2
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	fa93 f2a3 	rbit	r2, r3
 80012de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001306:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800130a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130c:	4b68      	ldr	r3, [pc, #416]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 800130e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001314:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001318:	2102      	movs	r1, #2
 800131a:	6019      	str	r1, [r3, #0]
 800131c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001320:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f1a3 	rbit	r1, r3
 800132a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800132e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001332:	6019      	str	r1, [r3, #0]
  return result;
 8001334:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001338:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d197      	bne.n	800128a <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 819c 	beq.w	80016a8 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001376:	4b4e      	ldr	r3, [pc, #312]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b4b      	ldr	r3, [pc, #300]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a4a      	ldr	r2, [pc, #296]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138c:	61d3      	str	r3, [r2, #28]
 800138e:	4b48      	ldr	r3, [pc, #288]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800139a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013aa:	2301      	movs	r3, #1
 80013ac:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b41      	ldr	r3, [pc, #260]	@ (80014b8 <HAL_RCC_OscConfig+0x994>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d11a      	bne.n	80013f2 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013bc:	4b3e      	ldr	r3, [pc, #248]	@ (80014b8 <HAL_RCC_OscConfig+0x994>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a3d      	ldr	r2, [pc, #244]	@ (80014b8 <HAL_RCC_OscConfig+0x994>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c8:	f7ff f8bc 	bl	8000544 <HAL_GetTick>
 80013cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	e009      	b.n	80013e6 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d2:	f7ff f8b7 	bl	8000544 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	@ 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e3bb      	b.n	8001b5e <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b34      	ldr	r3, [pc, #208]	@ (80014b8 <HAL_RCC_OscConfig+0x994>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0ef      	beq.n	80013d2 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x8ec>
 8001402:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a2a      	ldr	r2, [pc, #168]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	e035      	b.n	800147c <HAL_RCC_OscConfig+0x958>
 8001410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001414:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x916>
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a22      	ldr	r2, [pc, #136]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	6213      	str	r3, [r2, #32]
 8001438:	e020      	b.n	800147c <HAL_RCC_OscConfig+0x958>
 800143a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x940>
 800144a:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a18      	ldr	r2, [pc, #96]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6213      	str	r3, [r2, #32]
 8001456:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	4a15      	ldr	r2, [pc, #84]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6213      	str	r3, [r2, #32]
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0x958>
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a11      	ldr	r2, [pc, #68]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_RCC_OscConfig+0x98c>)
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800147c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001480:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8085 	beq.w	8001598 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff f859 	bl	8000544 <HAL_GetTick>
 8001492:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001496:	e011      	b.n	80014bc <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001498:	f7ff f854 	bl	8000544 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d907      	bls.n	80014bc <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e356      	b.n	8001b5e <HAL_RCC_OscConfig+0x103a>
 80014b0:	40021000 	.word	0x40021000
 80014b4:	10908120 	.word	0x10908120
 80014b8:	40007000 	.word	0x40007000
 80014bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014c4:	2202      	movs	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014cc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fa93 f2a3 	rbit	r2, r3
 80014d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014da:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80014e8:	2202      	movs	r2, #2
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	fa93 f2a3 	rbit	r2, r3
 80014fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014fe:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001502:	601a      	str	r2, [r3, #0]
  return result;
 8001504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001508:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800150c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_RCC_OscConfig+0xa00>
 800151e:	4b98      	ldr	r3, [pc, #608]	@ (8001780 <HAL_RCC_OscConfig+0xc5c>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	e013      	b.n	800154c <HAL_RCC_OscConfig+0xa28>
 8001524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001528:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800152c:	2202      	movs	r2, #2
 800152e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001534:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	fa93 f2a3 	rbit	r2, r3
 800153e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001542:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	4b8d      	ldr	r3, [pc, #564]	@ (8001780 <HAL_RCC_OscConfig+0xc5c>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001550:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001554:	2102      	movs	r1, #2
 8001556:	6011      	str	r1, [r2, #0]
 8001558:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800155c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	fa92 f1a2 	rbit	r1, r2
 8001566:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800156a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800156e:	6011      	str	r1, [r2, #0]
  return result;
 8001570:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001574:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	fab2 f282 	clz	r2, r2
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	f002 021f 	and.w	r2, r2, #31
 800158a:	2101      	movs	r1, #1
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d080      	beq.n	8001498 <HAL_RCC_OscConfig+0x974>
 8001596:	e07d      	b.n	8001694 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7fe ffd4 	bl	8000544 <HAL_GetTick>
 800159c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a0:	e00b      	b.n	80015ba <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7fe ffcf 	bl	8000544 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e2d1      	b.n	8001b5e <HAL_RCC_OscConfig+0x103a>
 80015ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015be:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015c2:	2202      	movs	r2, #2
 80015c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ca:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fa93 f2a3 	rbit	r2, r3
 80015d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80015e6:	2202      	movs	r2, #2
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001600:	601a      	str	r2, [r3, #0]
  return result;
 8001602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001606:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800160a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <HAL_RCC_OscConfig+0xafe>
 800161c:	4b58      	ldr	r3, [pc, #352]	@ (8001780 <HAL_RCC_OscConfig+0xc5c>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	e013      	b.n	800164a <HAL_RCC_OscConfig+0xb26>
 8001622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001626:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001632:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001640:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	4b4e      	ldr	r3, [pc, #312]	@ (8001780 <HAL_RCC_OscConfig+0xc5c>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800164e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001652:	2102      	movs	r1, #2
 8001654:	6011      	str	r1, [r2, #0]
 8001656:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800165a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	fa92 f1a2 	rbit	r1, r2
 8001664:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001668:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800166c:	6011      	str	r1, [r2, #0]
  return result;
 800166e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001672:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	fab2 f282 	clz	r2, r2
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	f002 021f 	and.w	r2, r2, #31
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d186      	bne.n	80015a2 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001694:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169c:	4b38      	ldr	r3, [pc, #224]	@ (8001780 <HAL_RCC_OscConfig+0xc5c>)
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	4a37      	ldr	r2, [pc, #220]	@ (8001780 <HAL_RCC_OscConfig+0xc5c>)
 80016a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8251 	beq.w	8001b5c <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ba:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <HAL_RCC_OscConfig+0xc5c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	f000 820f 	beq.w	8001ae6 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	f040 8165 	bne.w	80019a4 <HAL_RCC_OscConfig+0xe80>
 80016da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016de:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80016e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f2a3 	rbit	r2, r3
 80016f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016fa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80016fe:	601a      	str	r2, [r3, #0]
  return result;
 8001700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001704:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001708:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001714:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	461a      	mov	r2, r3
 800171c:	2300      	movs	r3, #0
 800171e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7fe ff10 	bl	8000544 <HAL_GetTick>
 8001724:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001728:	e009      	b.n	800173e <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7fe ff0b 	bl	8000544 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e20f      	b.n	8001b5e <HAL_RCC_OscConfig+0x103a>
 800173e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001742:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001746:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800174a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001750:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001762:	601a      	str	r2, [r3, #0]
  return result;
 8001764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001768:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800176c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b3f      	cmp	r3, #63	@ 0x3f
 8001776:	d805      	bhi.n	8001784 <HAL_RCC_OscConfig+0xc60>
 8001778:	4b01      	ldr	r3, [pc, #4]	@ (8001780 <HAL_RCC_OscConfig+0xc5c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	e02a      	b.n	80017d4 <HAL_RCC_OscConfig+0xcb0>
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001788:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800178c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001796:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ca:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	4bca      	ldr	r3, [pc, #808]	@ (8001afc <HAL_RCC_OscConfig+0xfd8>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017d8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80017dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80017e0:	6011      	str	r1, [r2, #0]
 80017e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017e6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	fa92 f1a2 	rbit	r1, r2
 80017f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017f4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80017f8:	6011      	str	r1, [r2, #0]
  return result;
 80017fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017fe:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	fab2 f282 	clz	r2, r2
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f042 0220 	orr.w	r2, r2, #32
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	f002 021f 	and.w	r2, r2, #31
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f202 	lsl.w	r2, r1, r2
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d184      	bne.n	800172a <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001820:	4bb6      	ldr	r3, [pc, #728]	@ (8001afc <HAL_RCC_OscConfig+0xfd8>)
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	f023 020f 	bic.w	r2, r3, #15
 8001828:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800182c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	49b1      	ldr	r1, [pc, #708]	@ (8001afc <HAL_RCC_OscConfig+0xfd8>)
 8001836:	4313      	orrs	r3, r2
 8001838:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800183a:	4bb0      	ldr	r3, [pc, #704]	@ (8001afc <HAL_RCC_OscConfig+0xfd8>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001846:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6a19      	ldr	r1, [r3, #32]
 800184e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001852:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	430b      	orrs	r3, r1
 800185c:	49a7      	ldr	r1, [pc, #668]	@ (8001afc <HAL_RCC_OscConfig+0xfd8>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
 8001862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001866:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800186a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800186e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001874:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001882:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001886:	601a      	str	r2, [r3, #0]
  return result;
 8001888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001890:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800189c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	461a      	mov	r2, r3
 80018a4:	2301      	movs	r3, #1
 80018a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7fe fe4c 	bl	8000544 <HAL_GetTick>
 80018ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b2:	f7fe fe47 	bl	8000544 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e14b      	b.n	8001b5e <HAL_RCC_OscConfig+0x103a>
 80018c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80018ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80018ea:	601a      	str	r2, [r3, #0]
  return result;
 80018ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80018f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80018fe:	d802      	bhi.n	8001906 <HAL_RCC_OscConfig+0xde2>
 8001900:	4b7e      	ldr	r3, [pc, #504]	@ (8001afc <HAL_RCC_OscConfig+0xfd8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e027      	b.n	8001956 <HAL_RCC_OscConfig+0xe32>
 8001906:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800190e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001918:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	fa93 f2a3 	rbit	r2, r3
 8001922:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001926:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001930:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001934:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800193e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	4b6a      	ldr	r3, [pc, #424]	@ (8001afc <HAL_RCC_OscConfig+0xfd8>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800195a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800195e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001962:	6011      	str	r1, [r2, #0]
 8001964:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001968:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	fa92 f1a2 	rbit	r1, r2
 8001972:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001976:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800197a:	6011      	str	r1, [r2, #0]
  return result;
 800197c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001980:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	fab2 f282 	clz	r2, r2
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f042 0220 	orr.w	r2, r2, #32
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f002 021f 	and.w	r2, r2, #31
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d087      	beq.n	80018b2 <HAL_RCC_OscConfig+0xd8e>
 80019a2:	e0db      	b.n	8001b5c <HAL_RCC_OscConfig+0x1038>
 80019a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80019c8:	601a      	str	r2, [r3, #0]
  return result;
 80019ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ce:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80019d2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	461a      	mov	r2, r3
 80019e6:	2300      	movs	r3, #0
 80019e8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7fe fdab 	bl	8000544 <HAL_GetTick>
 80019ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f2:	e009      	b.n	8001a08 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7fe fda6 	bl	8000544 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0aa      	b.n	8001b5e <HAL_RCC_OscConfig+0x103a>
 8001a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a28:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a2c:	601a      	str	r2, [r3, #0]
  return result;
 8001a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a32:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a40:	d802      	bhi.n	8001a48 <HAL_RCC_OscConfig+0xf24>
 8001a42:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <HAL_RCC_OscConfig+0xfd8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	e027      	b.n	8001a98 <HAL_RCC_OscConfig+0xf74>
 8001a48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001a50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fa93 f2a3 	rbit	r2, r3
 8001a64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a68:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a72:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001a76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a80:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_RCC_OscConfig+0xfd8>)
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a9c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001aa0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001aa4:	6011      	str	r1, [r2, #0]
 8001aa6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aaa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	fa92 f1a2 	rbit	r1, r2
 8001ab4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ab8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001abc:	6011      	str	r1, [r2, #0]
  return result;
 8001abe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ac2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	fab2 f282 	clz	r2, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f002 021f 	and.w	r2, r2, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d187      	bne.n	80019f4 <HAL_RCC_OscConfig+0xed0>
 8001ae4:	e03a      	b.n	8001b5c <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d104      	bne.n	8001b00 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e031      	b.n	8001b5e <HAL_RCC_OscConfig+0x103a>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_RCC_OscConfig+0x1044>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <HAL_RCC_OscConfig+0x1044>)
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b14:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001b18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d117      	bne.n	8001b58 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b2c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d10b      	bne.n	8001b58 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b44:	f003 020f 	and.w	r2, r3, #15
 8001b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09e      	sub	sp, #120	@ 0x78
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e154      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b89      	ldr	r3, [pc, #548]	@ (8001dac <HAL_RCC_ClockConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d910      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b86      	ldr	r3, [pc, #536]	@ (8001dac <HAL_RCC_ClockConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4984      	ldr	r1, [pc, #528]	@ (8001dac <HAL_RCC_ClockConfig+0x240>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b82      	ldr	r3, [pc, #520]	@ (8001dac <HAL_RCC_ClockConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e13c      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b7b      	ldr	r3, [pc, #492]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4978      	ldr	r1, [pc, #480]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80cd 	beq.w	8001d7a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d137      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xec>
 8001be8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c00:	d802      	bhi.n	8001c08 <HAL_RCC_ClockConfig+0x9c>
 8001c02:	4b6b      	ldr	r3, [pc, #428]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	e00f      	b.n	8001c28 <HAL_RCC_ClockConfig+0xbc>
 8001c08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c24:	4b62      	ldr	r3, [pc, #392]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001c2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c30:	fa92 f2a2 	rbit	r2, r2
 8001c34:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001c36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c38:	fab2 f282 	clz	r2, r2
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f042 0220 	orr.w	r2, r2, #32
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f002 021f 	and.w	r2, r2, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d171      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0ea      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d137      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x164>
 8001c60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c64:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c78:	d802      	bhi.n	8001c80 <HAL_RCC_ClockConfig+0x114>
 8001c7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	e00f      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x134>
 8001c80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c9c:	4b44      	ldr	r3, [pc, #272]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ca4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001ca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ca8:	fa92 f2a2 	rbit	r2, r2
 8001cac:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001cae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f042 0220 	orr.w	r2, r2, #32
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d135      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0ae      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ce6:	d802      	bhi.n	8001cee <HAL_RCC_ClockConfig+0x182>
 8001ce8:	4b31      	ldr	r3, [pc, #196]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	e00d      	b.n	8001d0a <HAL_RCC_ClockConfig+0x19e>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	623b      	str	r3, [r7, #32]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	4b2a      	ldr	r3, [pc, #168]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	61ba      	str	r2, [r7, #24]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	fa92 f2a2 	rbit	r2, r2
 8001d14:	617a      	str	r2, [r7, #20]
  return result;
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	fab2 f282 	clz	r2, r2
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	f042 0220 	orr.w	r2, r2, #32
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f002 021f 	and.w	r2, r2, #31
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e07a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f023 0203 	bic.w	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	491a      	ldr	r1, [pc, #104]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d4a:	f7fe fbfb 	bl	8000544 <HAL_GetTick>
 8001d4e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d52:	f7fe fbf7 	bl	8000544 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e062      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 020c 	and.w	r2, r3, #12
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d1eb      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <HAL_RCC_ClockConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d215      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <HAL_RCC_ClockConfig+0x240>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 0207 	bic.w	r2, r3, #7
 8001d90:	4906      	ldr	r1, [pc, #24]	@ (8001dac <HAL_RCC_ClockConfig+0x240>)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <HAL_RCC_ClockConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d006      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e041      	b.n	8001e2e <HAL_RCC_ClockConfig+0x2c2>
 8001daa:	bf00      	nop
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e38 <HAL_RCC_ClockConfig+0x2cc>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	491a      	ldr	r1, [pc, #104]	@ (8001e38 <HAL_RCC_ClockConfig+0x2cc>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dde:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <HAL_RCC_ClockConfig+0x2cc>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4912      	ldr	r1, [pc, #72]	@ (8001e38 <HAL_RCC_ClockConfig+0x2cc>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001df2:	f000 f829 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001df6:	4601      	mov	r1, r0
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <HAL_RCC_ClockConfig+0x2cc>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e00:	22f0      	movs	r2, #240	@ 0xf0
 8001e02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	fa92 f2a2 	rbit	r2, r2
 8001e0a:	60fa      	str	r2, [r7, #12]
  return result;
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	40d3      	lsrs	r3, r2
 8001e16:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <HAL_RCC_ClockConfig+0x2d0>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e1e:	4a08      	ldr	r2, [pc, #32]	@ (8001e40 <HAL_RCC_ClockConfig+0x2d4>)
 8001e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_RCC_ClockConfig+0x2d8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb48 	bl	80004bc <HAL_InitTick>
  
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3778      	adds	r7, #120	@ 0x78
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08001f60 	.word	0x08001f60
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x30>
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x36>
 8001e76:	e029      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e7a:	613b      	str	r3, [r7, #16]
      break;
 8001e7c:	e029      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0c9b      	lsrs	r3, r3, #18
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	4a18      	ldr	r2, [pc, #96]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	4a15      	ldr	r2, [pc, #84]	@ (8001eec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e007      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	613b      	str	r3, [r7, #16]
      break;
 8001eca:	e002      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ece:	613b      	str	r3, [r7, #16]
      break;
 8001ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed2:	693b      	ldr	r3, [r7, #16]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	007a1200 	.word	0x007a1200
 8001ee8:	08001f70 	.word	0x08001f70
 8001eec:	08001f80 	.word	0x08001f80

08001ef0 <memset>:
 8001ef0:	4402      	add	r2, r0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d100      	bne.n	8001efa <memset+0xa>
 8001ef8:	4770      	bx	lr
 8001efa:	f803 1b01 	strb.w	r1, [r3], #1
 8001efe:	e7f9      	b.n	8001ef4 <memset+0x4>

08001f00 <__libc_init_array>:
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	4d0d      	ldr	r5, [pc, #52]	@ (8001f38 <__libc_init_array+0x38>)
 8001f04:	4c0d      	ldr	r4, [pc, #52]	@ (8001f3c <__libc_init_array+0x3c>)
 8001f06:	1b64      	subs	r4, r4, r5
 8001f08:	10a4      	asrs	r4, r4, #2
 8001f0a:	2600      	movs	r6, #0
 8001f0c:	42a6      	cmp	r6, r4
 8001f0e:	d109      	bne.n	8001f24 <__libc_init_array+0x24>
 8001f10:	4d0b      	ldr	r5, [pc, #44]	@ (8001f40 <__libc_init_array+0x40>)
 8001f12:	4c0c      	ldr	r4, [pc, #48]	@ (8001f44 <__libc_init_array+0x44>)
 8001f14:	f000 f818 	bl	8001f48 <_init>
 8001f18:	1b64      	subs	r4, r4, r5
 8001f1a:	10a4      	asrs	r4, r4, #2
 8001f1c:	2600      	movs	r6, #0
 8001f1e:	42a6      	cmp	r6, r4
 8001f20:	d105      	bne.n	8001f2e <__libc_init_array+0x2e>
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
 8001f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f28:	4798      	blx	r3
 8001f2a:	3601      	adds	r6, #1
 8001f2c:	e7ee      	b.n	8001f0c <__libc_init_array+0xc>
 8001f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f32:	4798      	blx	r3
 8001f34:	3601      	adds	r6, #1
 8001f36:	e7f2      	b.n	8001f1e <__libc_init_array+0x1e>
 8001f38:	08001f90 	.word	0x08001f90
 8001f3c:	08001f90 	.word	0x08001f90
 8001f40:	08001f90 	.word	0x08001f90
 8001f44:	08001f94 	.word	0x08001f94

08001f48 <_init>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	bf00      	nop
 8001f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	469e      	mov	lr, r3
 8001f52:	4770      	bx	lr

08001f54 <_fini>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	bf00      	nop
 8001f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f5a:	bc08      	pop	{r3}
 8001f5c:	469e      	mov	lr, r3
 8001f5e:	4770      	bx	lr
