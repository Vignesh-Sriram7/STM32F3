
Web_Control_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000336c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003500  08003500  00004500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035bc  080035bc  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080035bc  080035bc  000045bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035c4  080035c4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c4  080035c4  000045c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035c8  080035c8  000045c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080035cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000c0  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008be6  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014c8  00000000  00000000  0000dc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  0000f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ef  00000000  00000000  0000f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7b1  00000000  00000000  0000fc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000961a  00000000  00000000  0002f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfb86  00000000  00000000  00038a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f85a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000192c  00000000  00000000  000f85e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f9f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080034e8 	.word	0x080034e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080034e8 	.word	0x080034e8

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
char cmdBuffer[20];  // command buffer
uint8_t rxByte;      // one byte receive buffer
uint8_t idx = 0;     // index in cmdBuffer

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a49      	ldr	r2, [pc, #292]	@ (800032c <HAL_UART_RxCpltCallback+0x134>)
 8000206:	4293      	cmp	r3, r2
 8000208:	f040 808c 	bne.w	8000324 <HAL_UART_RxCpltCallback+0x12c>
        if (rxByte != '\n' && idx < sizeof(cmdBuffer)-1) {
 800020c:	4b48      	ldr	r3, [pc, #288]	@ (8000330 <HAL_UART_RxCpltCallback+0x138>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b0a      	cmp	r3, #10
 8000212:	d00f      	beq.n	8000234 <HAL_UART_RxCpltCallback+0x3c>
 8000214:	4b47      	ldr	r3, [pc, #284]	@ (8000334 <HAL_UART_RxCpltCallback+0x13c>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b12      	cmp	r3, #18
 800021a:	d80b      	bhi.n	8000234 <HAL_UART_RxCpltCallback+0x3c>
            cmdBuffer[idx++] = rxByte;
 800021c:	4b45      	ldr	r3, [pc, #276]	@ (8000334 <HAL_UART_RxCpltCallback+0x13c>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	1c5a      	adds	r2, r3, #1
 8000222:	b2d1      	uxtb	r1, r2
 8000224:	4a43      	ldr	r2, [pc, #268]	@ (8000334 <HAL_UART_RxCpltCallback+0x13c>)
 8000226:	7011      	strb	r1, [r2, #0]
 8000228:	461a      	mov	r2, r3
 800022a:	4b41      	ldr	r3, [pc, #260]	@ (8000330 <HAL_UART_RxCpltCallback+0x138>)
 800022c:	7819      	ldrb	r1, [r3, #0]
 800022e:	4b42      	ldr	r3, [pc, #264]	@ (8000338 <HAL_UART_RxCpltCallback+0x140>)
 8000230:	5499      	strb	r1, [r3, r2]
 8000232:	e072      	b.n	800031a <HAL_UART_RxCpltCallback+0x122>
        } else {
            cmdBuffer[idx] = 0;  // null terminate
 8000234:	4b3f      	ldr	r3, [pc, #252]	@ (8000334 <HAL_UART_RxCpltCallback+0x13c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	461a      	mov	r2, r3
 800023a:	4b3f      	ldr	r3, [pc, #252]	@ (8000338 <HAL_UART_RxCpltCallback+0x140>)
 800023c:	2100      	movs	r1, #0
 800023e:	5499      	strb	r1, [r3, r2]

            HAL_UART_Transmit(&huart2, (uint8_t *)"Got: ", 5, HAL_MAX_DELAY);
 8000240:	f04f 33ff 	mov.w	r3, #4294967295
 8000244:	2205      	movs	r2, #5
 8000246:	493d      	ldr	r1, [pc, #244]	@ (800033c <HAL_UART_RxCpltCallback+0x144>)
 8000248:	483d      	ldr	r0, [pc, #244]	@ (8000340 <HAL_UART_RxCpltCallback+0x148>)
 800024a:	f002 f9e9 	bl	8002620 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)cmdBuffer, strlen(cmdBuffer), HAL_MAX_DELAY);
 800024e:	483a      	ldr	r0, [pc, #232]	@ (8000338 <HAL_UART_RxCpltCallback+0x140>)
 8000250:	f7ff ffca 	bl	80001e8 <strlen>
 8000254:	4603      	mov	r3, r0
 8000256:	b29a      	uxth	r2, r3
 8000258:	f04f 33ff 	mov.w	r3, #4294967295
 800025c:	4936      	ldr	r1, [pc, #216]	@ (8000338 <HAL_UART_RxCpltCallback+0x140>)
 800025e:	4838      	ldr	r0, [pc, #224]	@ (8000340 <HAL_UART_RxCpltCallback+0x148>)
 8000260:	f002 f9de 	bl	8002620 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000264:	f04f 33ff 	mov.w	r3, #4294967295
 8000268:	2202      	movs	r2, #2
 800026a:	4936      	ldr	r1, [pc, #216]	@ (8000344 <HAL_UART_RxCpltCallback+0x14c>)
 800026c:	4834      	ldr	r0, [pc, #208]	@ (8000340 <HAL_UART_RxCpltCallback+0x148>)
 800026e:	f002 f9d7 	bl	8002620 <HAL_UART_Transmit>

            if (strcmp(cmdBuffer, "26 ON") == 0) {
 8000272:	4935      	ldr	r1, [pc, #212]	@ (8000348 <HAL_UART_RxCpltCallback+0x150>)
 8000274:	4830      	ldr	r0, [pc, #192]	@ (8000338 <HAL_UART_RxCpltCallback+0x140>)
 8000276:	f7ff ffad 	bl	80001d4 <strcmp>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d10d      	bne.n	800029c <HAL_UART_RxCpltCallback+0xa4>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000280:	2201      	movs	r2, #1
 8000282:	2120      	movs	r1, #32
 8000284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000288:	f000 fd12 	bl	8000cb0 <HAL_GPIO_WritePin>
                HAL_UART_Transmit(&huart2, (uint8_t *)"GPIO A5 is ON\r\n", strlen("GPIO A5 is ON\r\n"), HAL_MAX_DELAY);
 800028c:	f04f 33ff 	mov.w	r3, #4294967295
 8000290:	220f      	movs	r2, #15
 8000292:	492e      	ldr	r1, [pc, #184]	@ (800034c <HAL_UART_RxCpltCallback+0x154>)
 8000294:	482a      	ldr	r0, [pc, #168]	@ (8000340 <HAL_UART_RxCpltCallback+0x148>)
 8000296:	f002 f9c3 	bl	8002620 <HAL_UART_Transmit>
 800029a:	e03b      	b.n	8000314 <HAL_UART_RxCpltCallback+0x11c>
            } else if (strcmp(cmdBuffer, "26 OFF") == 0) {
 800029c:	492c      	ldr	r1, [pc, #176]	@ (8000350 <HAL_UART_RxCpltCallback+0x158>)
 800029e:	4826      	ldr	r0, [pc, #152]	@ (8000338 <HAL_UART_RxCpltCallback+0x140>)
 80002a0:	f7ff ff98 	bl	80001d4 <strcmp>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d10d      	bne.n	80002c6 <HAL_UART_RxCpltCallback+0xce>
                HAL_UART_Transmit(&huart2, (uint8_t *)"GPIO A5 is OFF\r\n", strlen("GPIO A5 is OFF\r\n"), HAL_MAX_DELAY);
 80002aa:	f04f 33ff 	mov.w	r3, #4294967295
 80002ae:	2210      	movs	r2, #16
 80002b0:	4928      	ldr	r1, [pc, #160]	@ (8000354 <HAL_UART_RxCpltCallback+0x15c>)
 80002b2:	4823      	ldr	r0, [pc, #140]	@ (8000340 <HAL_UART_RxCpltCallback+0x148>)
 80002b4:	f002 f9b4 	bl	8002620 <HAL_UART_Transmit>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2120      	movs	r1, #32
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c0:	f000 fcf6 	bl	8000cb0 <HAL_GPIO_WritePin>
 80002c4:	e026      	b.n	8000314 <HAL_UART_RxCpltCallback+0x11c>
            } else if (strcmp(cmdBuffer, "27 ON") == 0) {
 80002c6:	4924      	ldr	r1, [pc, #144]	@ (8000358 <HAL_UART_RxCpltCallback+0x160>)
 80002c8:	481b      	ldr	r0, [pc, #108]	@ (8000338 <HAL_UART_RxCpltCallback+0x140>)
 80002ca:	f7ff ff83 	bl	80001d4 <strcmp>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d10c      	bne.n	80002ee <HAL_UART_RxCpltCallback+0xf6>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2101      	movs	r1, #1
 80002d8:	4820      	ldr	r0, [pc, #128]	@ (800035c <HAL_UART_RxCpltCallback+0x164>)
 80002da:	f000 fce9 	bl	8000cb0 <HAL_GPIO_WritePin>
                HAL_UART_Transmit(&huart2, (uint8_t *)"GPIO B0 is ON\r\n", strlen("GPIO B0 is ON\r\n"), HAL_MAX_DELAY);
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	220f      	movs	r2, #15
 80002e4:	491e      	ldr	r1, [pc, #120]	@ (8000360 <HAL_UART_RxCpltCallback+0x168>)
 80002e6:	4816      	ldr	r0, [pc, #88]	@ (8000340 <HAL_UART_RxCpltCallback+0x148>)
 80002e8:	f002 f99a 	bl	8002620 <HAL_UART_Transmit>
 80002ec:	e012      	b.n	8000314 <HAL_UART_RxCpltCallback+0x11c>
            } else if (strcmp(cmdBuffer, "27 OFF") == 0) {
 80002ee:	491d      	ldr	r1, [pc, #116]	@ (8000364 <HAL_UART_RxCpltCallback+0x16c>)
 80002f0:	4811      	ldr	r0, [pc, #68]	@ (8000338 <HAL_UART_RxCpltCallback+0x140>)
 80002f2:	f7ff ff6f 	bl	80001d4 <strcmp>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10b      	bne.n	8000314 <HAL_UART_RxCpltCallback+0x11c>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2101      	movs	r1, #1
 8000300:	4816      	ldr	r0, [pc, #88]	@ (800035c <HAL_UART_RxCpltCallback+0x164>)
 8000302:	f000 fcd5 	bl	8000cb0 <HAL_GPIO_WritePin>
                HAL_UART_Transmit(&huart2, (uint8_t *)"GPIO B0 is OFF\r\n", strlen("GPIO B0 is OFF\r\n"), HAL_MAX_DELAY);
 8000306:	f04f 33ff 	mov.w	r3, #4294967295
 800030a:	2210      	movs	r2, #16
 800030c:	4916      	ldr	r1, [pc, #88]	@ (8000368 <HAL_UART_RxCpltCallback+0x170>)
 800030e:	480c      	ldr	r0, [pc, #48]	@ (8000340 <HAL_UART_RxCpltCallback+0x148>)
 8000310:	f002 f986 	bl	8002620 <HAL_UART_Transmit>
            }

            idx = 0;  // reset buffer
 8000314:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <HAL_UART_RxCpltCallback+0x13c>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800031a:	2201      	movs	r2, #1
 800031c:	4904      	ldr	r1, [pc, #16]	@ (8000330 <HAL_UART_RxCpltCallback+0x138>)
 800031e:	4808      	ldr	r0, [pc, #32]	@ (8000340 <HAL_UART_RxCpltCallback+0x148>)
 8000320:	f002 fa07 	bl	8002732 <HAL_UART_Receive_IT>
    }
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40004400 	.word	0x40004400
 8000330:	200000c4 	.word	0x200000c4
 8000334:	200000c5 	.word	0x200000c5
 8000338:	200000b0 	.word	0x200000b0
 800033c:	08003500 	.word	0x08003500
 8000340:	20000028 	.word	0x20000028
 8000344:	08003508 	.word	0x08003508
 8000348:	0800350c 	.word	0x0800350c
 800034c:	08003514 	.word	0x08003514
 8000350:	08003524 	.word	0x08003524
 8000354:	0800352c 	.word	0x0800352c
 8000358:	08003540 	.word	0x08003540
 800035c:	48000400 	.word	0x48000400
 8000360:	08003548 	.word	0x08003548
 8000364:	08003558 	.word	0x08003558
 8000368:	08003560 	.word	0x08003560

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 f9c8 	bl	8000704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f818 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f000 f898 	bl	80004ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800037c:	f000 f866 	bl	800044c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8000380:	2201      	movs	r2, #1
 8000382:	4906      	ldr	r1, [pc, #24]	@ (800039c <main+0x30>)
 8000384:	4806      	ldr	r0, [pc, #24]	@ (80003a0 <main+0x34>)
 8000386:	f002 f9d4 	bl	8002732 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, (uint8_t *)"UART Ready\r\n", strlen("UART Ready\r\n"), HAL_MAX_DELAY);
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	220c      	movs	r2, #12
 8000390:	4904      	ldr	r1, [pc, #16]	@ (80003a4 <main+0x38>)
 8000392:	4803      	ldr	r0, [pc, #12]	@ (80003a0 <main+0x34>)
 8000394:	f002 f944 	bl	8002620 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <main+0x2c>
 800039c:	200000c4 	.word	0x200000c4
 80003a0:	20000028 	.word	0x20000028
 80003a4:	08003574 	.word	0x08003574

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b0a6      	sub	sp, #152	@ 0x98
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003b2:	2228      	movs	r2, #40	@ 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 f86a 	bl	8003490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2258      	movs	r2, #88	@ 0x58
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 f85c 	bl	8003490 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d8:	2302      	movs	r3, #2
 80003da:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003dc:	2301      	movs	r3, #1
 80003de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e0:	2310      	movs	r3, #16
 80003e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fc75 	bl	8000ce0 <HAL_RCC_OscConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003fc:	f000 f8aa 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000400:	230f      	movs	r3, #15
 8000402:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000404:	2300      	movs	r3, #0
 8000406:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000414:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fc84 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000426:	f000 f895 	bl	8000554 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800042a:	2302      	movs	r3, #2
 800042c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4618      	mov	r0, r3
 8000436:	f001 fe89 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000440:	f000 f888 	bl	8000554 <Error_Handler>
  }
}
 8000444:	bf00      	nop
 8000446:	3798      	adds	r7, #152	@ 0x98
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000452:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <MX_USART2_UART_Init+0x5c>)
 8000454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000458:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800045c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000490:	f002 f878 	bl	8002584 <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800049a:	f000 f85b 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000028 	.word	0x20000028
 80004a8:	40004400 	.word	0x40004400

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b22      	ldr	r3, [pc, #136]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a21      	ldr	r2, [pc, #132]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a1b      	ldr	r2, [pc, #108]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b19      	ldr	r3, [pc, #100]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2120      	movs	r1, #32
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f000 fbd9 	bl	8000cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2101      	movs	r1, #1
 8000502:	4813      	ldr	r0, [pc, #76]	@ (8000550 <MX_GPIO_Init+0xa4>)
 8000504:	f000 fbd4 	bl	8000cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000508:	2320      	movs	r3, #32
 800050a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	4619      	mov	r1, r3
 800051e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000522:	f000 fa3b 	bl	800099c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000526:	2301      	movs	r3, #1
 8000528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	4619      	mov	r1, r3
 800053c:	4804      	ldr	r0, [pc, #16]	@ (8000550 <MX_GPIO_Init+0xa4>)
 800053e:	f000 fa2d 	bl	800099c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000542:	bf00      	nop
 8000544:	3720      	adds	r7, #32
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	48000400 	.word	0x48000400

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <Error_Handler+0x8>

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <HAL_MspInit+0x44>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <HAL_MspInit+0x44>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <HAL_MspInit+0x44>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <HAL_MspInit+0x44>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <HAL_MspInit+0x44>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_MspInit+0x44>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <HAL_UART_MspInit+0x7c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d128      	bne.n	800061c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ca:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <HAL_UART_MspInit+0x80>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a16      	ldr	r2, [pc, #88]	@ (8000628 <HAL_UART_MspInit+0x80>)
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <HAL_UART_MspInit+0x80>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <HAL_UART_MspInit+0x80>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a10      	ldr	r2, [pc, #64]	@ (8000628 <HAL_UART_MspInit+0x80>)
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <HAL_UART_MspInit+0x80>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005fa:	230c      	movs	r3, #12
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000606:	2303      	movs	r3, #3
 8000608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800060a:	2307      	movs	r3, #7
 800060c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f000 f9c0 	bl	800099c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40004400 	.word	0x40004400
 8000628:	40021000 	.word	0x40021000

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <NMI_Handler+0x4>

08000634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <MemManage_Handler+0x4>

08000644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <UsageFault_Handler+0x4>

08000654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000682:	f000 f885 	bl	8000790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <SystemInit+0x20>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <SystemInit+0x20>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b4:	f7ff ffea 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	@ (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	@ (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006de:	f002 fedf 	bl	80034a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006e2:	f7ff fe43 	bl	800036c <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f4:	080035cc 	.word	0x080035cc
  ldr r2, =_sbss
 80006f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006fc:	200000cc 	.word	0x200000cc

08000700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_2_IRQHandler>
	...

08000704 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <HAL_Init+0x28>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a07      	ldr	r2, [pc, #28]	@ (800072c <HAL_Init+0x28>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000714:	2003      	movs	r0, #3
 8000716:	f000 f90d 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071a:	200f      	movs	r0, #15
 800071c:	f000 f808 	bl	8000730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000720:	f7ff ff1e 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40022000 	.word	0x40022000

08000730 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <HAL_InitTick+0x54>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <HAL_InitTick+0x58>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f917 	bl	8000982 <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e00e      	b.n	800077c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	d80a      	bhi.n	800077a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000764:	2200      	movs	r2, #0
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f000 f8ed 	bl	800094a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000770:	4a06      	ldr	r2, [pc, #24]	@ (800078c <HAL_InitTick+0x5c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e000      	b.n	800077c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	20000008 	.word	0x20000008
 800078c:	20000004 	.word	0x20000004

08000790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <HAL_IncTick+0x20>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_IncTick+0x24>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4413      	add	r3, r2
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <HAL_IncTick+0x24>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000008 	.word	0x20000008
 80007b4:	200000c8 	.word	0x200000c8

080007b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <HAL_GetTick+0x14>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	200000c8 	.word	0x200000c8

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	@ (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	@ (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f1c3 0307 	rsb	r3, r3, #7
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	bf28      	it	cs
 80008a6:	2304      	movcs	r3, #4
 80008a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3304      	adds	r3, #4
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d902      	bls.n	80008b8 <NVIC_EncodePriority+0x30>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3b03      	subs	r3, #3
 80008b6:	e000      	b.n	80008ba <NVIC_EncodePriority+0x32>
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43da      	mvns	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	401a      	ands	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43d9      	mvns	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	4313      	orrs	r3, r2
         );
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3724      	adds	r7, #36	@ 0x24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f7ff ff8e 	bl	8000834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff47 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800095c:	f7ff ff5c 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff ff8e 	bl	8000888 <NVIC_EncodePriority>
 800096c:	4602      	mov	r2, r0
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5d 	bl	8000834 <__NVIC_SetPriority>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ffb0 	bl	80008f0 <SysTick_Config>
 8000990:	4603      	mov	r3, r0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009aa:	e160      	b.n	8000c6e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 8152 	beq.w	8000c68 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d005      	beq.n	80009dc <HAL_GPIO_Init+0x40>
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d130      	bne.n	8000a3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	f003 0201 	and.w	r2, r3, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d017      	beq.n	8000a7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d123      	bne.n	8000ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	08da      	lsrs	r2, r3, #3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3208      	adds	r2, #8
 8000a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0203 	and.w	r2, r3, #3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 80ac 	beq.w	8000c68 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b5e      	ldr	r3, [pc, #376]	@ (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a5d      	ldr	r2, [pc, #372]	@ (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b28:	4a59      	ldr	r2, [pc, #356]	@ (8000c90 <HAL_GPIO_Init+0x2f4>)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3302      	adds	r3, #2
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b52:	d025      	beq.n	8000ba0 <HAL_GPIO_Init+0x204>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a4f      	ldr	r2, [pc, #316]	@ (8000c94 <HAL_GPIO_Init+0x2f8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d01f      	beq.n	8000b9c <HAL_GPIO_Init+0x200>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8000c98 <HAL_GPIO_Init+0x2fc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d019      	beq.n	8000b98 <HAL_GPIO_Init+0x1fc>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a4d      	ldr	r2, [pc, #308]	@ (8000c9c <HAL_GPIO_Init+0x300>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d013      	beq.n	8000b94 <HAL_GPIO_Init+0x1f8>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a4c      	ldr	r2, [pc, #304]	@ (8000ca0 <HAL_GPIO_Init+0x304>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d00d      	beq.n	8000b90 <HAL_GPIO_Init+0x1f4>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a4b      	ldr	r2, [pc, #300]	@ (8000ca4 <HAL_GPIO_Init+0x308>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d007      	beq.n	8000b8c <HAL_GPIO_Init+0x1f0>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8000ca8 <HAL_GPIO_Init+0x30c>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d101      	bne.n	8000b88 <HAL_GPIO_Init+0x1ec>
 8000b84:	2306      	movs	r3, #6
 8000b86:	e00c      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b88:	2307      	movs	r3, #7
 8000b8a:	e00a      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	e008      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b90:	2304      	movs	r3, #4
 8000b92:	e006      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e004      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4093      	lsls	r3, r2
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb2:	4937      	ldr	r1, [pc, #220]	@ (8000c90 <HAL_GPIO_Init+0x2f4>)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be4:	4a31      	ldr	r2, [pc, #196]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bea:	4b30      	ldr	r3, [pc, #192]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0e:	4a27      	ldr	r2, [pc, #156]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c14:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c38:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa22 f303 	lsr.w	r3, r2, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f47f ae97 	bne.w	80009ac <HAL_GPIO_Init+0x10>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	48001000 	.word	0x48001000
 8000ca4:	48001400 	.word	0x48001400
 8000ca8:	48001800 	.word	0x48001800
 8000cac:	40010400 	.word	0x40010400

08000cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cc0:	787b      	ldrb	r3, [r7, #1]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cf0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f001 b80a 	b.w	8001d1a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8161 	beq.w	8000fde <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d1c:	4bae      	ldr	r3, [pc, #696]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d00c      	beq.n	8000d42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d28:	4bab      	ldr	r3, [pc, #684]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d157      	bne.n	8000de4 <HAL_RCC_OscConfig+0x104>
 8000d34:	4ba8      	ldr	r3, [pc, #672]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d40:	d150      	bne.n	8000de4 <HAL_RCC_OscConfig+0x104>
 8000d42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d46:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5a:	fab3 f383 	clz	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d62:	d802      	bhi.n	8000d6a <HAL_RCC_OscConfig+0x8a>
 8000d64:	4b9c      	ldr	r3, [pc, #624]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	e015      	b.n	8000d96 <HAL_RCC_OscConfig+0xb6>
 8000d6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d6e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d76:	fa93 f3a3 	rbit	r3, r3
 8000d7a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d82:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d86:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000d8a:	fa93 f3a3 	rbit	r3, r3
 8000d8e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d92:	4b91      	ldr	r3, [pc, #580]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d9a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000d9e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000da2:	fa92 f2a2 	rbit	r2, r2
 8000da6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000daa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	f042 0220 	orr.w	r2, r2, #32
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	f002 021f 	and.w	r2, r2, #31
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8108 	beq.w	8000fdc <HAL_RCC_OscConfig+0x2fc>
 8000dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f040 80ff 	bne.w	8000fdc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f000 bf9b 	b.w	8001d1a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000de8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000df4:	d106      	bne.n	8000e04 <HAL_RCC_OscConfig+0x124>
 8000df6:	4b78      	ldr	r3, [pc, #480]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a77      	ldr	r2, [pc, #476]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e036      	b.n	8000e72 <HAL_RCC_OscConfig+0x192>
 8000e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10c      	bne.n	8000e2e <HAL_RCC_OscConfig+0x14e>
 8000e14:	4b70      	ldr	r3, [pc, #448]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a6f      	ldr	r2, [pc, #444]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b6d      	ldr	r3, [pc, #436]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a6c      	ldr	r2, [pc, #432]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e021      	b.n	8000e72 <HAL_RCC_OscConfig+0x192>
 8000e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e3e:	d10c      	bne.n	8000e5a <HAL_RCC_OscConfig+0x17a>
 8000e40:	4b65      	ldr	r3, [pc, #404]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a64      	ldr	r2, [pc, #400]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b62      	ldr	r3, [pc, #392]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a61      	ldr	r2, [pc, #388]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e00b      	b.n	8000e72 <HAL_RCC_OscConfig+0x192>
 8000e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a5e      	ldr	r2, [pc, #376]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b5c      	ldr	r3, [pc, #368]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a5b      	ldr	r2, [pc, #364]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d054      	beq.n	8000f2c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fc99 	bl	80007b8 <HAL_GetTick>
 8000e86:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	e00a      	b.n	8000ea2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fc94 	bl	80007b8 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b64      	cmp	r3, #100	@ 0x64
 8000e9a:	d902      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f000 bf3c 	b.w	8001d1a <HAL_RCC_OscConfig+0x103a>
 8000ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ea6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eaa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000eb6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ec2:	d802      	bhi.n	8000eca <HAL_RCC_OscConfig+0x1ea>
 8000ec4:	4b44      	ldr	r3, [pc, #272]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	e015      	b.n	8000ef6 <HAL_RCC_OscConfig+0x216>
 8000eca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ece:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ee2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000ee6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000ef2:	4b39      	ldr	r3, [pc, #228]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000efa:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000efe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f02:	fa92 f2a2 	rbit	r2, r2
 8000f06:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000f0a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f0e:	fab2 f282 	clz	r2, r2
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	f042 0220 	orr.w	r2, r2, #32
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	f002 021f 	and.w	r2, r2, #31
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0b0      	beq.n	8000e8c <HAL_RCC_OscConfig+0x1ac>
 8000f2a:	e058      	b.n	8000fde <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fc44 	bl	80007b8 <HAL_GetTick>
 8000f30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f36:	f7ff fc3f 	bl	80007b8 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	@ 0x64
 8000f44:	d902      	bls.n	8000f4c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	f000 bee7 	b.w	8001d1a <HAL_RCC_OscConfig+0x103a>
 8000f4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f50:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000f60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f64:	fab3 f383 	clz	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f6c:	d802      	bhi.n	8000f74 <HAL_RCC_OscConfig+0x294>
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	e015      	b.n	8000fa0 <HAL_RCC_OscConfig+0x2c0>
 8000f74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f78:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000f88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f8c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000f94:	fa93 f3a3 	rbit	r3, r3
 8000f98:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_RCC_OscConfig+0x2f8>)
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fa4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000fa8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000fac:	fa92 f2a2 	rbit	r2, r2
 8000fb0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000fb4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000fb8:	fab2 f282 	clz	r2, r2
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	f042 0220 	orr.w	r2, r2, #32
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	f002 021f 	and.w	r2, r2, #31
 8000fc8:	2101      	movs	r1, #1
 8000fca:	fa01 f202 	lsl.w	r2, r1, r2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1b0      	bne.n	8000f36 <HAL_RCC_OscConfig+0x256>
 8000fd4:	e003      	b.n	8000fde <HAL_RCC_OscConfig+0x2fe>
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fe2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 816d 	beq.w	80012ce <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ff4:	4bcd      	ldr	r3, [pc, #820]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00c      	beq.n	800101a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001000:	4bca      	ldr	r3, [pc, #808]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b08      	cmp	r3, #8
 800100a:	d16e      	bne.n	80010ea <HAL_RCC_OscConfig+0x40a>
 800100c:	4bc7      	ldr	r3, [pc, #796]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001018:	d167      	bne.n	80010ea <HAL_RCC_OscConfig+0x40a>
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800102c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b3f      	cmp	r3, #63	@ 0x3f
 8001038:	d802      	bhi.n	8001040 <HAL_RCC_OscConfig+0x360>
 800103a:	4bbc      	ldr	r3, [pc, #752]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	e013      	b.n	8001068 <HAL_RCC_OscConfig+0x388>
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001058:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001064:	4bb1      	ldr	r3, [pc, #708]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 8001066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001068:	2202      	movs	r2, #2
 800106a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800106e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001072:	fa92 f2a2 	rbit	r2, r2
 8001076:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800107a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800107e:	fab2 f282 	clz	r2, r2
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	f042 0220 	orr.w	r2, r2, #32
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	f002 021f 	and.w	r2, r2, #31
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00a      	beq.n	80010b0 <HAL_RCC_OscConfig+0x3d0>
 800109a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800109e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d002      	beq.n	80010b0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f000 be35 	b.w	8001d1a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b0:	4b9e      	ldr	r3, [pc, #632]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	21f8      	movs	r1, #248	@ 0xf8
 80010c6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ca:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80010ce:	fa91 f1a1 	rbit	r1, r1
 80010d2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80010d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80010da:	fab1 f181 	clz	r1, r1
 80010de:	b2c9      	uxtb	r1, r1
 80010e0:	408b      	lsls	r3, r1
 80010e2:	4992      	ldr	r1, [pc, #584]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e8:	e0f1      	b.n	80012ce <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8083 	beq.w	8001202 <HAL_RCC_OscConfig+0x522>
 80010fc:	2301      	movs	r3, #1
 80010fe:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001102:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800110e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001112:	fab3 f383 	clz	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800111c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	461a      	mov	r2, r3
 8001124:	2301      	movs	r3, #1
 8001126:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fb46 	bl	80007b8 <HAL_GetTick>
 800112c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	e00a      	b.n	8001148 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fb41 	bl	80007b8 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d902      	bls.n	8001148 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	f000 bde9 	b.w	8001d1a <HAL_RCC_OscConfig+0x103a>
 8001148:	2302      	movs	r3, #2
 800114a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800115a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	fab3 f383 	clz	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b3f      	cmp	r3, #63	@ 0x3f
 8001166:	d802      	bhi.n	800116e <HAL_RCC_OscConfig+0x48e>
 8001168:	4b70      	ldr	r3, [pc, #448]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	e013      	b.n	8001196 <HAL_RCC_OscConfig+0x4b6>
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001186:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001192:	4b66      	ldr	r3, [pc, #408]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	2202      	movs	r2, #2
 8001198:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800119c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80011a0:	fa92 f2a2 	rbit	r2, r2
 80011a4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80011a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80011ac:	fab2 f282 	clz	r2, r2
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	f002 021f 	and.w	r2, r2, #31
 80011bc:	2101      	movs	r1, #1
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0b4      	beq.n	8001132 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b58      	ldr	r3, [pc, #352]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	21f8      	movs	r1, #248	@ 0xf8
 80011de:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80011e6:	fa91 f1a1 	rbit	r1, r1
 80011ea:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80011ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80011f2:	fab1 f181 	clz	r1, r1
 80011f6:	b2c9      	uxtb	r1, r1
 80011f8:	408b      	lsls	r3, r1
 80011fa:	494c      	ldr	r1, [pc, #304]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
 8001200:	e065      	b.n	80012ce <HAL_RCC_OscConfig+0x5ee>
 8001202:	2301      	movs	r3, #1
 8001204:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001214:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001222:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	461a      	mov	r2, r3
 800122a:	2300      	movs	r3, #0
 800122c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fac3 	bl	80007b8 <HAL_GetTick>
 8001232:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	e00a      	b.n	800124e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fabe 	bl	80007b8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d902      	bls.n	800124e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	f000 bd66 	b.w	8001d1a <HAL_RCC_OscConfig+0x103a>
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001260:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b3f      	cmp	r3, #63	@ 0x3f
 800126c:	d802      	bhi.n	8001274 <HAL_RCC_OscConfig+0x594>
 800126e:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	e013      	b.n	800129c <HAL_RCC_OscConfig+0x5bc>
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800128c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001290:	fa93 f3a3 	rbit	r3, r3
 8001294:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001298:	4b24      	ldr	r3, [pc, #144]	@ (800132c <HAL_RCC_OscConfig+0x64c>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129c:	2202      	movs	r2, #2
 800129e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80012a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80012a6:	fa92 f2a2 	rbit	r2, r2
 80012aa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80012ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012b2:	fab2 f282 	clz	r2, r2
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	f002 021f 	and.w	r2, r2, #31
 80012c2:	2101      	movs	r1, #1
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1b4      	bne.n	8001238 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8119 	beq.w	8001516 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 8082 	beq.w	80013fa <HAL_RCC_OscConfig+0x71a>
 80012f6:	2301      	movs	r3, #1
 80012f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001308:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_RCC_OscConfig+0x650>)
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	461a      	mov	r2, r3
 800131c:	2301      	movs	r3, #1
 800131e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001320:	f7ff fa4a 	bl	80007b8 <HAL_GetTick>
 8001324:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001328:	e00f      	b.n	800134a <HAL_RCC_OscConfig+0x66a>
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fa40 	bl	80007b8 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d902      	bls.n	800134a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	f000 bce8 	b.w	8001d1a <HAL_RCC_OscConfig+0x103a>
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001354:	fa93 f2a3 	rbit	r2, r3
 8001358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800136a:	2202      	movs	r2, #2
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800138a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800138e:	2202      	movs	r2, #2
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001396:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	fa93 f2a3 	rbit	r2, r3
 80013a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4bb0      	ldr	r3, [pc, #704]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 80013ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013b6:	2102      	movs	r1, #2
 80013b8:	6019      	str	r1, [r3, #0]
 80013ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fa93 f1a3 	rbit	r1, r3
 80013c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013d0:	6019      	str	r1, [r3, #0]
  return result;
 80013d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2101      	movs	r1, #1
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d09d      	beq.n	8001334 <HAL_RCC_OscConfig+0x654>
 80013f8:	e08d      	b.n	8001516 <HAL_RCC_OscConfig+0x836>
 80013fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800140a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	fa93 f2a3 	rbit	r2, r3
 8001414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001418:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800141c:	601a      	str	r2, [r3, #0]
  return result;
 800141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001422:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001426:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	4b8f      	ldr	r3, [pc, #572]	@ (8001670 <HAL_RCC_OscConfig+0x990>)
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	461a      	mov	r2, r3
 8001438:	2300      	movs	r3, #0
 800143a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff f9bc 	bl	80007b8 <HAL_GetTick>
 8001440:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff f9b7 	bl	80007b8 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d902      	bls.n	800145c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	f000 bc5f 	b.w	8001d1a <HAL_RCC_OscConfig+0x103a>
 800145c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001460:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001464:	2202      	movs	r2, #2
 8001466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800146c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fa93 f2a3 	rbit	r2, r3
 8001476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001484:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001488:	2202      	movs	r2, #2
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001490:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800149e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014ac:	2202      	movs	r2, #2
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b68      	ldr	r3, [pc, #416]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 80014ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014d4:	2102      	movs	r1, #2
 80014d6:	6019      	str	r1, [r3, #0]
 80014d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fa93 f1a3 	rbit	r1, r3
 80014e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ea:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014ee:	6019      	str	r1, [r3, #0]
  return result;
 80014f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d197      	bne.n	8001446 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 819c 	beq.w	8001864 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b4e      	ldr	r3, [pc, #312]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b4b      	ldr	r3, [pc, #300]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a4a      	ldr	r2, [pc, #296]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b48      	ldr	r3, [pc, #288]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001556:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001560:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001564:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <HAL_RCC_OscConfig+0x994>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11a      	bne.n	80015ae <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001578:	4b3e      	ldr	r3, [pc, #248]	@ (8001674 <HAL_RCC_OscConfig+0x994>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a3d      	ldr	r2, [pc, #244]	@ (8001674 <HAL_RCC_OscConfig+0x994>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001582:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001584:	f7ff f918 	bl	80007b8 <HAL_GetTick>
 8001588:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	e009      	b.n	80015a2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff f913 	bl	80007b8 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e3bb      	b.n	8001d1a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_RCC_OscConfig+0x994>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0ef      	beq.n	800158e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d106      	bne.n	80015cc <HAL_RCC_OscConfig+0x8ec>
 80015be:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	e035      	b.n	8001638 <HAL_RCC_OscConfig+0x958>
 80015cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x916>
 80015dc:	4b23      	ldr	r3, [pc, #140]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a22      	ldr	r2, [pc, #136]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a1f      	ldr	r2, [pc, #124]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e020      	b.n	8001638 <HAL_RCC_OscConfig+0x958>
 80015f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b05      	cmp	r3, #5
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x940>
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a18      	ldr	r2, [pc, #96]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a15      	ldr	r2, [pc, #84]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0x958>
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a11      	ldr	r2, [pc, #68]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a0e      	ldr	r2, [pc, #56]	@ (800166c <HAL_RCC_OscConfig+0x98c>)
 8001632:	f023 0304 	bic.w	r3, r3, #4
 8001636:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 8085 	beq.w	8001754 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff f8b5 	bl	80007b8 <HAL_GetTick>
 800164e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	e011      	b.n	8001678 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff f8b0 	bl	80007b8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d907      	bls.n	8001678 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e356      	b.n	8001d1a <HAL_RCC_OscConfig+0x103a>
 800166c:	40021000 	.word	0x40021000
 8001670:	10908120 	.word	0x10908120
 8001674:	40007000 	.word	0x40007000
 8001678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001680:	2202      	movs	r2, #2
 8001682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001688:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	fa93 f2a3 	rbit	r2, r3
 8001692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001696:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016a4:	2202      	movs	r2, #2
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	fa93 f2a3 	rbit	r2, r3
 80016b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016be:	601a      	str	r2, [r3, #0]
  return result;
 80016c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <HAL_RCC_OscConfig+0xa00>
 80016da:	4b98      	ldr	r3, [pc, #608]	@ (800193c <HAL_RCC_OscConfig+0xc5c>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	e013      	b.n	8001708 <HAL_RCC_OscConfig+0xa28>
 80016e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016e8:	2202      	movs	r2, #2
 80016ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fa93 f2a3 	rbit	r2, r3
 80016fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016fe:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4b8d      	ldr	r3, [pc, #564]	@ (800193c <HAL_RCC_OscConfig+0xc5c>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001708:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800170c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001710:	2102      	movs	r1, #2
 8001712:	6011      	str	r1, [r2, #0]
 8001714:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001718:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	fa92 f1a2 	rbit	r1, r2
 8001722:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001726:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800172a:	6011      	str	r1, [r2, #0]
  return result;
 800172c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001730:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	fab2 f282 	clz	r2, r2
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f002 021f 	and.w	r2, r2, #31
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f202 	lsl.w	r2, r1, r2
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d080      	beq.n	8001654 <HAL_RCC_OscConfig+0x974>
 8001752:	e07d      	b.n	8001850 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff f830 	bl	80007b8 <HAL_GetTick>
 8001758:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff f82b 	bl	80007b8 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e2d1      	b.n	8001d1a <HAL_RCC_OscConfig+0x103a>
 8001776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001786:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001794:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017a2:	2202      	movs	r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017aa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017bc:	601a      	str	r2, [r3, #0]
  return result;
 80017be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <HAL_RCC_OscConfig+0xafe>
 80017d8:	4b58      	ldr	r3, [pc, #352]	@ (800193c <HAL_RCC_OscConfig+0xc5c>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	e013      	b.n	8001806 <HAL_RCC_OscConfig+0xb26>
 80017de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ee:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	4b4e      	ldr	r3, [pc, #312]	@ (800193c <HAL_RCC_OscConfig+0xc5c>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800180a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800180e:	2102      	movs	r1, #2
 8001810:	6011      	str	r1, [r2, #0]
 8001812:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001816:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	fa92 f1a2 	rbit	r1, r2
 8001820:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001824:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001828:	6011      	str	r1, [r2, #0]
  return result;
 800182a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800182e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	fab2 f282 	clz	r2, r2
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f002 021f 	and.w	r2, r2, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d186      	bne.n	800175e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001850:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b38      	ldr	r3, [pc, #224]	@ (800193c <HAL_RCC_OscConfig+0xc5c>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	4a37      	ldr	r2, [pc, #220]	@ (800193c <HAL_RCC_OscConfig+0xc5c>)
 800185e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001862:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001868:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8251 	beq.w	8001d18 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001876:	4b31      	ldr	r3, [pc, #196]	@ (800193c <HAL_RCC_OscConfig+0xc5c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b08      	cmp	r3, #8
 8001880:	f000 820f 	beq.w	8001ca2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001888:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b02      	cmp	r3, #2
 8001892:	f040 8165 	bne.w	8001b60 <HAL_RCC_OscConfig+0xe80>
 8001896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800189e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018ba:	601a      	str	r2, [r3, #0]
  return result;
 80018bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	461a      	mov	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7fe ff6c 	bl	80007b8 <HAL_GetTick>
 80018e0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e6:	f7fe ff67 	bl	80007b8 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e20f      	b.n	8001d1a <HAL_RCC_OscConfig+0x103a>
 80018fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001902:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	fa93 f2a3 	rbit	r2, r3
 8001916:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800191e:	601a      	str	r2, [r3, #0]
  return result;
 8001920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001924:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001928:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b3f      	cmp	r3, #63	@ 0x3f
 8001932:	d805      	bhi.n	8001940 <HAL_RCC_OscConfig+0xc60>
 8001934:	4b01      	ldr	r3, [pc, #4]	@ (800193c <HAL_RCC_OscConfig+0xc5c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e02a      	b.n	8001990 <HAL_RCC_OscConfig+0xcb0>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001944:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001948:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800194c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001952:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001960:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800196e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001978:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001986:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	4bca      	ldr	r3, [pc, #808]	@ (8001cb8 <HAL_RCC_OscConfig+0xfd8>)
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001994:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001998:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800199c:	6011      	str	r1, [r2, #0]
 800199e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019a2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	fa92 f1a2 	rbit	r1, r2
 80019ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019b0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80019b4:	6011      	str	r1, [r2, #0]
  return result;
 80019b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ba:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	fab2 f282 	clz	r2, r2
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	f042 0220 	orr.w	r2, r2, #32
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	f002 021f 	and.w	r2, r2, #31
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d184      	bne.n	80018e6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019dc:	4bb6      	ldr	r3, [pc, #728]	@ (8001cb8 <HAL_RCC_OscConfig+0xfd8>)
 80019de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e0:	f023 020f 	bic.w	r2, r3, #15
 80019e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	49b1      	ldr	r1, [pc, #708]	@ (8001cb8 <HAL_RCC_OscConfig+0xfd8>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80019f6:	4bb0      	ldr	r3, [pc, #704]	@ (8001cb8 <HAL_RCC_OscConfig+0xfd8>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80019fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a19      	ldr	r1, [r3, #32]
 8001a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	430b      	orrs	r3, r1
 8001a18:	49a7      	ldr	r1, [pc, #668]	@ (8001cb8 <HAL_RCC_OscConfig+0xfd8>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
 8001a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a22:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a30:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a42:	601a      	str	r2, [r3, #0]
  return result;
 8001a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a48:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a4c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2301      	movs	r3, #1
 8001a62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7fe fea8 	bl	80007b8 <HAL_GetTick>
 8001a68:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6c:	e009      	b.n	8001a82 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7fe fea3 	bl	80007b8 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e14b      	b.n	8001d1a <HAL_RCC_OscConfig+0x103a>
 8001a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a86:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a94:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001aa6:	601a      	str	r2, [r3, #0]
  return result;
 8001aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ab0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aba:	d802      	bhi.n	8001ac2 <HAL_RCC_OscConfig+0xde2>
 8001abc:	4b7e      	ldr	r3, [pc, #504]	@ (8001cb8 <HAL_RCC_OscConfig+0xfd8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	e027      	b.n	8001b12 <HAL_RCC_OscConfig+0xe32>
 8001ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001aca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aec:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001af0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b08:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb8 <HAL_RCC_OscConfig+0xfd8>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b16:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b1a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b1e:	6011      	str	r1, [r2, #0]
 8001b20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b24:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	fa92 f1a2 	rbit	r1, r2
 8001b2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b32:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b36:	6011      	str	r1, [r2, #0]
  return result;
 8001b38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b3c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f042 0220 	orr.w	r2, r2, #32
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f002 021f 	and.w	r2, r2, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d087      	beq.n	8001a6e <HAL_RCC_OscConfig+0xd8e>
 8001b5e:	e0db      	b.n	8001d18 <HAL_RCC_OscConfig+0x1038>
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b72:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	fa93 f2a3 	rbit	r2, r3
 8001b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b80:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b84:	601a      	str	r2, [r3, #0]
  return result;
 8001b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b8e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b9a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7fe fe07 	bl	80007b8 <HAL_GetTick>
 8001baa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	e009      	b.n	8001bc4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7fe fe02 	bl	80007b8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0aa      	b.n	8001d1a <HAL_RCC_OscConfig+0x103a>
 8001bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001be8:	601a      	str	r2, [r3, #0]
  return result;
 8001bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001bf2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bfc:	d802      	bhi.n	8001c04 <HAL_RCC_OscConfig+0xf24>
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <HAL_RCC_OscConfig+0xfd8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e027      	b.n	8001c54 <HAL_RCC_OscConfig+0xf74>
 8001c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c08:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c16:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	fa93 f2a3 	rbit	r2, r3
 8001c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c24:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_RCC_OscConfig+0xfd8>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c58:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c5c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c60:	6011      	str	r1, [r2, #0]
 8001c62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c66:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	fa92 f1a2 	rbit	r1, r2
 8001c70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c74:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c78:	6011      	str	r1, [r2, #0]
  return result;
 8001c7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c7e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	fab2 f282 	clz	r2, r2
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f042 0220 	orr.w	r2, r2, #32
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f002 021f 	and.w	r2, r2, #31
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d187      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xed0>
 8001ca0:	e03a      	b.n	8001d18 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d104      	bne.n	8001cbc <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e031      	b.n	8001d1a <HAL_RCC_OscConfig+0x103a>
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_RCC_OscConfig+0x1044>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <HAL_RCC_OscConfig+0x1044>)
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ccc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cd0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d117      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ce4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ce8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000

08001d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b09e      	sub	sp, #120	@ 0x78
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e154      	b.n	8001fea <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b89      	ldr	r3, [pc, #548]	@ (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d910      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b86      	ldr	r3, [pc, #536]	@ (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 0207 	bic.w	r2, r3, #7
 8001d56:	4984      	ldr	r1, [pc, #528]	@ (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b82      	ldr	r3, [pc, #520]	@ (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e13c      	b.n	8001fea <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7c:	4b7b      	ldr	r3, [pc, #492]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4978      	ldr	r1, [pc, #480]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80cd 	beq.w	8001f36 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d137      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xec>
 8001da4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001da8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dbc:	d802      	bhi.n	8001dc4 <HAL_RCC_ClockConfig+0x9c>
 8001dbe:	4b6b      	ldr	r3, [pc, #428]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_ClockConfig+0xbc>
 8001dc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001de0:	4b62      	ldr	r3, [pc, #392]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001de8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001dea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dec:	fa92 f2a2 	rbit	r2, r2
 8001df0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001df2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f002 021f 	and.w	r2, r2, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d171      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0ea      	b.n	8001fea <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d137      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x164>
 8001e1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e20:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e34:	d802      	bhi.n	8001e3c <HAL_RCC_ClockConfig+0x114>
 8001e36:	4b4d      	ldr	r3, [pc, #308]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_ClockConfig+0x134>
 8001e3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e58:	4b44      	ldr	r3, [pc, #272]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e60:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e64:	fa92 f2a2 	rbit	r2, r2
 8001e68:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001e6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f002 021f 	and.w	r2, r2, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d135      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0ae      	b.n	8001fea <HAL_RCC_ClockConfig+0x2c2>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ea2:	d802      	bhi.n	8001eaa <HAL_RCC_ClockConfig+0x182>
 8001ea4:	4b31      	ldr	r3, [pc, #196]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	e00d      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x19e>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	623b      	str	r3, [r7, #32]
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	61ba      	str	r2, [r7, #24]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	617a      	str	r2, [r7, #20]
  return result;
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f002 021f 	and.w	r2, r2, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e07a      	b.n	8001fea <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 0203 	bic.w	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	491a      	ldr	r1, [pc, #104]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f06:	f7fe fc57 	bl	80007b8 <HAL_GetTick>
 8001f0a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0e:	f7fe fc53 	bl	80007b8 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e062      	b.n	8001fea <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 020c 	and.w	r2, r3, #12
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d1eb      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d215      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 0207 	bic.w	r2, r3, #7
 8001f4c:	4906      	ldr	r1, [pc, #24]	@ (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d006      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e041      	b.n	8001fea <HAL_RCC_ClockConfig+0x2c2>
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_RCC_ClockConfig+0x2cc>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	491a      	ldr	r1, [pc, #104]	@ (8001ff4 <HAL_RCC_ClockConfig+0x2cc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <HAL_RCC_ClockConfig+0x2cc>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4912      	ldr	r1, [pc, #72]	@ (8001ff4 <HAL_RCC_ClockConfig+0x2cc>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fae:	f000 f829 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <HAL_RCC_ClockConfig+0x2cc>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fbc:	22f0      	movs	r2, #240	@ 0xf0
 8001fbe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	fab2 f282 	clz	r2, r2
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	40d3      	lsrs	r3, r2
 8001fd2:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <HAL_RCC_ClockConfig+0x2d0>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fda:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <HAL_RCC_ClockConfig+0x2d4>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <HAL_RCC_ClockConfig+0x2d8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fba4 	bl	8000730 <HAL_InitTick>
  
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3778      	adds	r7, #120	@ 0x78
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08003584 	.word	0x08003584
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800201e:	4b1f      	ldr	r3, [pc, #124]	@ (800209c <HAL_RCC_GetSysClockFreq+0x98>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b04      	cmp	r3, #4
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x30>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x36>
 8002032:	e029      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002034:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002036:	613b      	str	r3, [r7, #16]
      break;
 8002038:	e029      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	0c9b      	lsrs	r3, r3, #18
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002048:	4b14      	ldr	r3, [pc, #80]	@ (800209c <HAL_RCC_GetSysClockFreq+0x98>)
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	4a15      	ldr	r2, [pc, #84]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002060:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	fbb2 f2f3 	udiv	r2, r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e007      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002072:	4a0b      	ldr	r2, [pc, #44]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	fbb2 f2f3 	udiv	r2, r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	fb02 f303 	mul.w	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	613b      	str	r3, [r7, #16]
      break;
 8002086:	e002      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800208a:	613b      	str	r3, [r7, #16]
      break;
 800208c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208e:	693b      	ldr	r3, [r7, #16]
}
 8002090:	4618      	mov	r0, r3
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000
 80020a0:	007a1200 	.word	0x007a1200
 80020a4:	0800359c 	.word	0x0800359c
 80020a8:	080035ac 	.word	0x080035ac

080020ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000

080020c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020ca:	f7ff ffef 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	fa92 f2a2 	rbit	r2, r2
 80020e4:	603a      	str	r2, [r7, #0]
  return result;
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	fab2 f282 	clz	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	40d3      	lsrs	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	08003594 	.word	0x08003594

08002108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800210e:	f7ff ffcd 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 8002112:	4601      	mov	r1, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800211c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002120:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	603a      	str	r2, [r7, #0]
  return result;
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	fab2 f282 	clz	r2, r2
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	40d3      	lsrs	r3, r2
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	08003594 	.word	0x08003594

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b092      	sub	sp, #72	@ 0x48
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80d2 	beq.w	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002170:	4b4d      	ldr	r3, [pc, #308]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10e      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b4a      	ldr	r3, [pc, #296]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	4a49      	ldr	r2, [pc, #292]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002186:	61d3      	str	r3, [r2, #28]
 8002188:	4b47      	ldr	r3, [pc, #284]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b44      	ldr	r3, [pc, #272]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a6:	4b41      	ldr	r3, [pc, #260]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a40      	ldr	r2, [pc, #256]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fb01 	bl	80007b8 <HAL_GetTick>
 80021b6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe fafd 	bl	80007b8 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	@ 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1d4      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b37      	ldr	r3, [pc, #220]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d8:	4b33      	ldr	r3, [pc, #204]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8082 	beq.w	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d07a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f8:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002202:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002206:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	461a      	mov	r2, r3
 8002222:	2301      	movs	r3, #1
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800222a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	461a      	mov	r2, r3
 8002246:	2300      	movs	r3, #0
 8002248:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800224a:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800224c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d049      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe faad 	bl	80007b8 <HAL_GetTick>
 800225e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe faa9 	bl	80007b8 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e17e      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002278:	2302      	movs	r3, #2
 800227a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
 8002284:	2302      	movs	r3, #2
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	61fb      	str	r3, [r7, #28]
  return result;
 8002290:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d108      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80022a2:	4b01      	ldr	r3, [pc, #4]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	e00d      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
 80022b0:	10908100 	.word	0x10908100
 80022b4:	2302      	movs	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	4b9a      	ldr	r3, [pc, #616]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	2202      	movs	r2, #2
 80022c6:	613a      	str	r2, [r7, #16]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	fa92 f2a2 	rbit	r2, r2
 80022ce:	60fa      	str	r2, [r7, #12]
  return result;
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	fab2 f282 	clz	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f002 021f 	and.w	r2, r2, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0b9      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022ee:	4b8f      	ldr	r3, [pc, #572]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	498c      	ldr	r1, [pc, #560]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002300:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4a87      	ldr	r2, [pc, #540]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002312:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002320:	4b82      	ldr	r3, [pc, #520]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	f023 0203 	bic.w	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	497f      	ldr	r1, [pc, #508]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800233e:	4b7b      	ldr	r3, [pc, #492]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4978      	ldr	r1, [pc, #480]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234c:	4313      	orrs	r3, r2
 800234e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800235c:	4b73      	ldr	r3, [pc, #460]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002360:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4970      	ldr	r1, [pc, #448]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236a:	4313      	orrs	r3, r2
 800236c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237a:	4b6c      	ldr	r3, [pc, #432]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f023 0210 	bic.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4969      	ldr	r1, [pc, #420]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002398:	4b64      	ldr	r3, [pc, #400]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a4:	4961      	ldr	r1, [pc, #388]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023b6:	4b5d      	ldr	r3, [pc, #372]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f023 0220 	bic.w	r2, r3, #32
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	495a      	ldr	r1, [pc, #360]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023d4:	4b55      	ldr	r3, [pc, #340]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	4952      	ldr	r1, [pc, #328]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f2:	4b4e      	ldr	r3, [pc, #312]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	494b      	ldr	r1, [pc, #300]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002410:	4b46      	ldr	r3, [pc, #280]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002414:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4943      	ldr	r1, [pc, #268]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241e:	4313      	orrs	r3, r2
 8002420:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800242e:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	493c      	ldr	r1, [pc, #240]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800244c:	4b37      	ldr	r3, [pc, #220]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	4934      	ldr	r1, [pc, #208]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245a:	4313      	orrs	r3, r2
 800245c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800246a:	4b30      	ldr	r3, [pc, #192]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	492d      	ldr	r1, [pc, #180]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002488:	4b28      	ldr	r3, [pc, #160]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002494:	4925      	ldr	r1, [pc, #148]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002496:	4313      	orrs	r3, r2
 8002498:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024a6:	4b21      	ldr	r3, [pc, #132]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	491e      	ldr	r1, [pc, #120]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d0:	4916      	ldr	r1, [pc, #88]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ee:	490f      	ldr	r1, [pc, #60]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002500:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250c:	4907      	ldr	r1, [pc, #28]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250e:	4313      	orrs	r3, r2
 8002510:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800251e:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	e002      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002532:	4913      	ldr	r1, [pc, #76]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002534:	4313      	orrs	r3, r2
 8002536:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002544:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	490b      	ldr	r1, [pc, #44]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002552:	4313      	orrs	r3, r2
 8002554:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002562:	4b07      	ldr	r3, [pc, #28]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256e:	4904      	ldr	r1, [pc, #16]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002570:	4313      	orrs	r3, r2
 8002572:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3748      	adds	r7, #72	@ 0x48
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e040      	b.n	8002618 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fd fffe 	bl	80005a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	@ 0x24
 80025b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fad6 	bl	8002b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f8ff 	bl	80027d4 <UART_SetConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e01b      	b.n	8002618 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fb55 	bl	8002cc0 <UART_CheckIdleState>
 8002616:	4603      	mov	r3, r0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002634:	2b20      	cmp	r3, #32
 8002636:	d177      	bne.n	8002728 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_UART_Transmit+0x24>
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e070      	b.n	800272a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2221      	movs	r2, #33	@ 0x21
 8002654:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002656:	f7fe f8af 	bl	80007b8 <HAL_GetTick>
 800265a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	88fa      	ldrh	r2, [r7, #6]
 8002660:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002674:	d108      	bne.n	8002688 <HAL_UART_Transmit+0x68>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d104      	bne.n	8002688 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	e003      	b.n	8002690 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002690:	e02f      	b.n	80026f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	2180      	movs	r1, #128	@ 0x80
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fbb7 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e03b      	b.n	800272a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10b      	bne.n	80026d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c4:	b292      	uxth	r2, r2
 80026c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	3302      	adds	r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e007      	b.n	80026e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	781a      	ldrb	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1c9      	bne.n	8002692 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2200      	movs	r2, #0
 8002706:	2140      	movs	r1, #64	@ 0x40
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fb81 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e005      	b.n	800272a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	e000      	b.n	800272a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002728:	2302      	movs	r3, #2
  }
}
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b08a      	sub	sp, #40	@ 0x28
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	4613      	mov	r3, r2
 800273e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002746:	2b20      	cmp	r3, #32
 8002748:	d132      	bne.n	80027b0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_UART_Receive_IT+0x24>
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e02b      	b.n	80027b2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d018      	beq.n	80027a0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	e853 3f00 	ldrex	r3, [r3]
 800277a:	613b      	str	r3, [r7, #16]
   return(result);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	69f9      	ldr	r1, [r7, #28]
 8002792:	6a3a      	ldr	r2, [r7, #32]
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	61bb      	str	r3, [r7, #24]
   return(result);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e6      	bne.n	800276e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fba0 	bl	8002eec <UART_Start_Receive_IT>
 80027ac:	4603      	mov	r3, r0
 80027ae:	e000      	b.n	80027b2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3728      	adds	r7, #40	@ 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b92      	ldr	r3, [pc, #584]	@ (8002a48 <UART_SetConfig+0x274>)
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	6979      	ldr	r1, [r7, #20]
 8002808:	430b      	orrs	r3, r1
 800280a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a80      	ldr	r2, [pc, #512]	@ (8002a4c <UART_SetConfig+0x278>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d120      	bne.n	8002892 <UART_SetConfig+0xbe>
 8002850:	4b7f      	ldr	r3, [pc, #508]	@ (8002a50 <UART_SetConfig+0x27c>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b03      	cmp	r3, #3
 800285a:	d817      	bhi.n	800288c <UART_SetConfig+0xb8>
 800285c:	a201      	add	r2, pc, #4	@ (adr r2, 8002864 <UART_SetConfig+0x90>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	08002875 	.word	0x08002875
 8002868:	08002881 	.word	0x08002881
 800286c:	08002887 	.word	0x08002887
 8002870:	0800287b 	.word	0x0800287b
 8002874:	2301      	movs	r3, #1
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e0b5      	b.n	80029e6 <UART_SetConfig+0x212>
 800287a:	2302      	movs	r3, #2
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e0b2      	b.n	80029e6 <UART_SetConfig+0x212>
 8002880:	2304      	movs	r3, #4
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e0af      	b.n	80029e6 <UART_SetConfig+0x212>
 8002886:	2308      	movs	r3, #8
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e0ac      	b.n	80029e6 <UART_SetConfig+0x212>
 800288c:	2310      	movs	r3, #16
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	e0a9      	b.n	80029e6 <UART_SetConfig+0x212>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6f      	ldr	r2, [pc, #444]	@ (8002a54 <UART_SetConfig+0x280>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d124      	bne.n	80028e6 <UART_SetConfig+0x112>
 800289c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a50 <UART_SetConfig+0x27c>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028a8:	d011      	beq.n	80028ce <UART_SetConfig+0xfa>
 80028aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028ae:	d817      	bhi.n	80028e0 <UART_SetConfig+0x10c>
 80028b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028b4:	d011      	beq.n	80028da <UART_SetConfig+0x106>
 80028b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028ba:	d811      	bhi.n	80028e0 <UART_SetConfig+0x10c>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <UART_SetConfig+0xf4>
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c4:	d006      	beq.n	80028d4 <UART_SetConfig+0x100>
 80028c6:	e00b      	b.n	80028e0 <UART_SetConfig+0x10c>
 80028c8:	2300      	movs	r3, #0
 80028ca:	77fb      	strb	r3, [r7, #31]
 80028cc:	e08b      	b.n	80029e6 <UART_SetConfig+0x212>
 80028ce:	2302      	movs	r3, #2
 80028d0:	77fb      	strb	r3, [r7, #31]
 80028d2:	e088      	b.n	80029e6 <UART_SetConfig+0x212>
 80028d4:	2304      	movs	r3, #4
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e085      	b.n	80029e6 <UART_SetConfig+0x212>
 80028da:	2308      	movs	r3, #8
 80028dc:	77fb      	strb	r3, [r7, #31]
 80028de:	e082      	b.n	80029e6 <UART_SetConfig+0x212>
 80028e0:	2310      	movs	r3, #16
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	e07f      	b.n	80029e6 <UART_SetConfig+0x212>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002a58 <UART_SetConfig+0x284>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d124      	bne.n	800293a <UART_SetConfig+0x166>
 80028f0:	4b57      	ldr	r3, [pc, #348]	@ (8002a50 <UART_SetConfig+0x27c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80028f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028fc:	d011      	beq.n	8002922 <UART_SetConfig+0x14e>
 80028fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002902:	d817      	bhi.n	8002934 <UART_SetConfig+0x160>
 8002904:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002908:	d011      	beq.n	800292e <UART_SetConfig+0x15a>
 800290a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800290e:	d811      	bhi.n	8002934 <UART_SetConfig+0x160>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <UART_SetConfig+0x148>
 8002914:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002918:	d006      	beq.n	8002928 <UART_SetConfig+0x154>
 800291a:	e00b      	b.n	8002934 <UART_SetConfig+0x160>
 800291c:	2300      	movs	r3, #0
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e061      	b.n	80029e6 <UART_SetConfig+0x212>
 8002922:	2302      	movs	r3, #2
 8002924:	77fb      	strb	r3, [r7, #31]
 8002926:	e05e      	b.n	80029e6 <UART_SetConfig+0x212>
 8002928:	2304      	movs	r3, #4
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	e05b      	b.n	80029e6 <UART_SetConfig+0x212>
 800292e:	2308      	movs	r3, #8
 8002930:	77fb      	strb	r3, [r7, #31]
 8002932:	e058      	b.n	80029e6 <UART_SetConfig+0x212>
 8002934:	2310      	movs	r3, #16
 8002936:	77fb      	strb	r3, [r7, #31]
 8002938:	e055      	b.n	80029e6 <UART_SetConfig+0x212>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a47      	ldr	r2, [pc, #284]	@ (8002a5c <UART_SetConfig+0x288>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d124      	bne.n	800298e <UART_SetConfig+0x1ba>
 8002944:	4b42      	ldr	r3, [pc, #264]	@ (8002a50 <UART_SetConfig+0x27c>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002948:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800294c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002950:	d011      	beq.n	8002976 <UART_SetConfig+0x1a2>
 8002952:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002956:	d817      	bhi.n	8002988 <UART_SetConfig+0x1b4>
 8002958:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800295c:	d011      	beq.n	8002982 <UART_SetConfig+0x1ae>
 800295e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002962:	d811      	bhi.n	8002988 <UART_SetConfig+0x1b4>
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <UART_SetConfig+0x19c>
 8002968:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800296c:	d006      	beq.n	800297c <UART_SetConfig+0x1a8>
 800296e:	e00b      	b.n	8002988 <UART_SetConfig+0x1b4>
 8002970:	2300      	movs	r3, #0
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e037      	b.n	80029e6 <UART_SetConfig+0x212>
 8002976:	2302      	movs	r3, #2
 8002978:	77fb      	strb	r3, [r7, #31]
 800297a:	e034      	b.n	80029e6 <UART_SetConfig+0x212>
 800297c:	2304      	movs	r3, #4
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	e031      	b.n	80029e6 <UART_SetConfig+0x212>
 8002982:	2308      	movs	r3, #8
 8002984:	77fb      	strb	r3, [r7, #31]
 8002986:	e02e      	b.n	80029e6 <UART_SetConfig+0x212>
 8002988:	2310      	movs	r3, #16
 800298a:	77fb      	strb	r3, [r7, #31]
 800298c:	e02b      	b.n	80029e6 <UART_SetConfig+0x212>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a33      	ldr	r2, [pc, #204]	@ (8002a60 <UART_SetConfig+0x28c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d124      	bne.n	80029e2 <UART_SetConfig+0x20e>
 8002998:	4b2d      	ldr	r3, [pc, #180]	@ (8002a50 <UART_SetConfig+0x27c>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80029a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029a4:	d011      	beq.n	80029ca <UART_SetConfig+0x1f6>
 80029a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029aa:	d817      	bhi.n	80029dc <UART_SetConfig+0x208>
 80029ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029b0:	d011      	beq.n	80029d6 <UART_SetConfig+0x202>
 80029b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029b6:	d811      	bhi.n	80029dc <UART_SetConfig+0x208>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <UART_SetConfig+0x1f0>
 80029bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029c0:	d006      	beq.n	80029d0 <UART_SetConfig+0x1fc>
 80029c2:	e00b      	b.n	80029dc <UART_SetConfig+0x208>
 80029c4:	2300      	movs	r3, #0
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e00d      	b.n	80029e6 <UART_SetConfig+0x212>
 80029ca:	2302      	movs	r3, #2
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	e00a      	b.n	80029e6 <UART_SetConfig+0x212>
 80029d0:	2304      	movs	r3, #4
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	e007      	b.n	80029e6 <UART_SetConfig+0x212>
 80029d6:	2308      	movs	r3, #8
 80029d8:	77fb      	strb	r3, [r7, #31]
 80029da:	e004      	b.n	80029e6 <UART_SetConfig+0x212>
 80029dc:	2310      	movs	r3, #16
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e001      	b.n	80029e6 <UART_SetConfig+0x212>
 80029e2:	2310      	movs	r3, #16
 80029e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ee:	d16b      	bne.n	8002ac8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80029f0:	7ffb      	ldrb	r3, [r7, #31]
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d838      	bhi.n	8002a68 <UART_SetConfig+0x294>
 80029f6:	a201      	add	r2, pc, #4	@ (adr r2, 80029fc <UART_SetConfig+0x228>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a21 	.word	0x08002a21
 8002a00:	08002a29 	.word	0x08002a29
 8002a04:	08002a31 	.word	0x08002a31
 8002a08:	08002a69 	.word	0x08002a69
 8002a0c:	08002a37 	.word	0x08002a37
 8002a10:	08002a69 	.word	0x08002a69
 8002a14:	08002a69 	.word	0x08002a69
 8002a18:	08002a69 	.word	0x08002a69
 8002a1c:	08002a3f 	.word	0x08002a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a20:	f7ff fb50 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 8002a24:	61b8      	str	r0, [r7, #24]
        break;
 8002a26:	e024      	b.n	8002a72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a28:	f7ff fb6e 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8002a2c:	61b8      	str	r0, [r7, #24]
        break;
 8002a2e:	e020      	b.n	8002a72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <UART_SetConfig+0x290>)
 8002a32:	61bb      	str	r3, [r7, #24]
        break;
 8002a34:	e01d      	b.n	8002a72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a36:	f7ff fae5 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8002a3a:	61b8      	str	r0, [r7, #24]
        break;
 8002a3c:	e019      	b.n	8002a72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a42:	61bb      	str	r3, [r7, #24]
        break;
 8002a44:	e015      	b.n	8002a72 <UART_SetConfig+0x29e>
 8002a46:	bf00      	nop
 8002a48:	efff69f3 	.word	0xefff69f3
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40004400 	.word	0x40004400
 8002a58:	40004800 	.word	0x40004800
 8002a5c:	40004c00 	.word	0x40004c00
 8002a60:	40005000 	.word	0x40005000
 8002a64:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	77bb      	strb	r3, [r7, #30]
        break;
 8002a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d073      	beq.n	8002b60 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	005a      	lsls	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	441a      	add	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b0f      	cmp	r3, #15
 8002a92:	d916      	bls.n	8002ac2 <UART_SetConfig+0x2ee>
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9a:	d212      	bcs.n	8002ac2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f023 030f 	bic.w	r3, r3, #15
 8002aa4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	89fb      	ldrh	r3, [r7, #14]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	89fa      	ldrh	r2, [r7, #14]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	e04e      	b.n	8002b60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77bb      	strb	r3, [r7, #30]
 8002ac6:	e04b      	b.n	8002b60 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d827      	bhi.n	8002b1e <UART_SetConfig+0x34a>
 8002ace:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <UART_SetConfig+0x300>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002af9 	.word	0x08002af9
 8002ad8:	08002b01 	.word	0x08002b01
 8002adc:	08002b09 	.word	0x08002b09
 8002ae0:	08002b1f 	.word	0x08002b1f
 8002ae4:	08002b0f 	.word	0x08002b0f
 8002ae8:	08002b1f 	.word	0x08002b1f
 8002aec:	08002b1f 	.word	0x08002b1f
 8002af0:	08002b1f 	.word	0x08002b1f
 8002af4:	08002b17 	.word	0x08002b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af8:	f7ff fae4 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 8002afc:	61b8      	str	r0, [r7, #24]
        break;
 8002afe:	e013      	b.n	8002b28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b00:	f7ff fb02 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8002b04:	61b8      	str	r0, [r7, #24]
        break;
 8002b06:	e00f      	b.n	8002b28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <UART_SetConfig+0x3a4>)
 8002b0a:	61bb      	str	r3, [r7, #24]
        break;
 8002b0c:	e00c      	b.n	8002b28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0e:	f7ff fa79 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8002b12:	61b8      	str	r0, [r7, #24]
        break;
 8002b14:	e008      	b.n	8002b28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b1a:	61bb      	str	r3, [r7, #24]
        break;
 8002b1c:	e004      	b.n	8002b28 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	77bb      	strb	r3, [r7, #30]
        break;
 8002b26:	bf00      	nop
    }

    if (pclk != 0U)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	085a      	lsrs	r2, r3, #1
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	441a      	add	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d909      	bls.n	8002b5c <UART_SetConfig+0x388>
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4e:	d205      	bcs.n	8002b5c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	e001      	b.n	8002b60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	007a1200 	.word	0x007a1200

08002b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01a      	beq.n	8002c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c7a:	d10a      	bne.n	8002c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b098      	sub	sp, #96	@ 0x60
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cd0:	f7fd fd72 	bl	80007b8 <HAL_GetTick>
 8002cd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d12e      	bne.n	8002d42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f88c 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d021      	beq.n	8002d42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e6      	bne.n	8002cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e062      	b.n	8002e08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d149      	bne.n	8002de4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f856 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03c      	beq.n	8002de4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	623b      	str	r3, [r7, #32]
   return(result);
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e6      	bne.n	8002d6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3308      	adds	r3, #8
 8002da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3308      	adds	r3, #8
 8002dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dbc:	61fa      	str	r2, [r7, #28]
 8002dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	69b9      	ldr	r1, [r7, #24]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e011      	b.n	8002e08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3758      	adds	r7, #88	@ 0x58
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e20:	e04f      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d04b      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7fd fcc5 	bl	80007b8 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e04e      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d037      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b80      	cmp	r3, #128	@ 0x80
 8002e56:	d034      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b40      	cmp	r3, #64	@ 0x40
 8002e5c:	d031      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d110      	bne.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2208      	movs	r2, #8
 8002e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f8ff 	bl	8003078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e029      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e9c:	d111      	bne.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f8e5 	bl	8003078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e00f      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d0a0      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b097      	sub	sp, #92	@ 0x5c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f1e:	d10e      	bne.n	8002f3e <UART_Start_Receive_IT+0x52>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <UART_Start_Receive_IT+0x48>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f32:	e02d      	b.n	8002f90 <UART_Start_Receive_IT+0xa4>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	22ff      	movs	r2, #255	@ 0xff
 8002f38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f3c:	e028      	b.n	8002f90 <UART_Start_Receive_IT+0xa4>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <UART_Start_Receive_IT+0x76>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <UART_Start_Receive_IT+0x6c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	22ff      	movs	r2, #255	@ 0xff
 8002f52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f56:	e01b      	b.n	8002f90 <UART_Start_Receive_IT+0xa4>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	227f      	movs	r2, #127	@ 0x7f
 8002f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f60:	e016      	b.n	8002f90 <UART_Start_Receive_IT+0xa4>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f6a:	d10d      	bne.n	8002f88 <UART_Start_Receive_IT+0x9c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <UART_Start_Receive_IT+0x92>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	227f      	movs	r2, #127	@ 0x7f
 8002f78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f7c:	e008      	b.n	8002f90 <UART_Start_Receive_IT+0xa4>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	223f      	movs	r2, #63	@ 0x3f
 8002f82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f86:	e003      	b.n	8002f90 <UART_Start_Receive_IT+0xa4>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2222      	movs	r2, #34	@ 0x22
 8002f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fc0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002fc2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8002fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e5      	bne.n	8002fa0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fdc:	d107      	bne.n	8002fee <UART_Start_Receive_IT+0x102>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a21      	ldr	r2, [pc, #132]	@ (8003070 <UART_Start_Receive_IT+0x184>)
 8002fea:	669a      	str	r2, [r3, #104]	@ 0x68
 8002fec:	e002      	b.n	8002ff4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	@ (8003074 <UART_Start_Receive_IT+0x188>)
 8002ff2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d019      	beq.n	8003030 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
 800301c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e6      	bne.n	8002ffc <UART_Start_Receive_IT+0x110>
 800302e:	e018      	b.n	8003062 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	613b      	str	r3, [r7, #16]
   return(result);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f043 0320 	orr.w	r3, r3, #32
 8003044:	653b      	str	r3, [r7, #80]	@ 0x50
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	69f9      	ldr	r1, [r7, #28]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	61bb      	str	r3, [r7, #24]
   return(result);
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e6      	bne.n	8003030 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	375c      	adds	r7, #92	@ 0x5c
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	080032e9 	.word	0x080032e9
 8003074:	08003141 	.word	0x08003141

08003078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003078:	b480      	push	{r7}
 800307a:	b095      	sub	sp, #84	@ 0x54
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800309e:	643b      	str	r3, [r7, #64]	@ 0x40
 80030a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030a6:	e841 2300 	strex	r3, r2, [r1]
 80030aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1e6      	bne.n	8003080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3308      	adds	r3, #8
 80030b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3308      	adds	r3, #8
 80030d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e5      	bne.n	80030b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d118      	bne.n	8003120 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f023 0310 	bic.w	r3, r3, #16
 8003102:	647b      	str	r3, [r7, #68]	@ 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	6979      	ldr	r1, [r7, #20]
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	613b      	str	r3, [r7, #16]
   return(result);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e6      	bne.n	80030ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003134:	bf00      	nop
 8003136:	3754      	adds	r7, #84	@ 0x54
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b09c      	sub	sp, #112	@ 0x70
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800314e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003158:	2b22      	cmp	r3, #34	@ 0x22
 800315a:	f040 80b9 	bne.w	80032d0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003164:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003168:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800316c:	b2d9      	uxtb	r1, r3
 800316e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003172:	b2da      	uxtb	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003178:	400a      	ands	r2, r1
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 809c 	bne.w	80032e0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e6      	bne.n	80031a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3308      	adds	r3, #8
 80031f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80031fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80031fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e5      	bne.n	80031da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d018      	beq.n	8003262 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	623b      	str	r3, [r7, #32]
   return(result);
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003244:	663b      	str	r3, [r7, #96]	@ 0x60
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800324e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003250:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e6      	bne.n	8003230 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003266:	2b01      	cmp	r3, #1
 8003268:	d12e      	bne.n	80032c8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	60fb      	str	r3, [r7, #12]
   return(result);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f023 0310 	bic.w	r3, r3, #16
 8003284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	69b9      	ldr	r1, [r7, #24]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	617b      	str	r3, [r7, #20]
   return(result);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e6      	bne.n	8003270 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d103      	bne.n	80032b8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2210      	movs	r2, #16
 80032b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fa7a 	bl	80027ba <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032c6:	e00b      	b.n	80032e0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fc ff95 	bl	80001f8 <HAL_UART_RxCpltCallback>
}
 80032ce:	e007      	b.n	80032e0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0208 	orr.w	r2, r2, #8
 80032de:	619a      	str	r2, [r3, #24]
}
 80032e0:	bf00      	nop
 80032e2:	3770      	adds	r7, #112	@ 0x70
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b09c      	sub	sp, #112	@ 0x70
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80032f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003300:	2b22      	cmp	r3, #34	@ 0x22
 8003302:	f040 80b9 	bne.w	8003478 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800330c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003316:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800331a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800331e:	4013      	ands	r3, r2
 8003320:	b29a      	uxth	r2, r3
 8003322:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003324:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332a:	1c9a      	adds	r2, r3, #2
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 809c 	bne.w	8003488 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800335e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003364:	667b      	str	r3, [r7, #100]	@ 0x64
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800336e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003370:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003374:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800337c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e6      	bne.n	8003350 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3308      	adds	r3, #8
 8003388:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	663b      	str	r3, [r7, #96]	@ 0x60
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3308      	adds	r3, #8
 80033a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80033a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80033a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d018      	beq.n	800340a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e6      	bne.n	80033d8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340e:	2b01      	cmp	r3, #1
 8003410:	d12e      	bne.n	8003470 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	60bb      	str	r3, [r7, #8]
   return(result);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f023 0310 	bic.w	r3, r3, #16
 800342c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6979      	ldr	r1, [r7, #20]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	613b      	str	r3, [r7, #16]
   return(result);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e6      	bne.n	8003418 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d103      	bne.n	8003460 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2210      	movs	r2, #16
 800345e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff f9a6 	bl	80027ba <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800346e:	e00b      	b.n	8003488 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fc fec1 	bl	80001f8 <HAL_UART_RxCpltCallback>
}
 8003476:	e007      	b.n	8003488 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0208 	orr.w	r2, r2, #8
 8003486:	619a      	str	r2, [r3, #24]
}
 8003488:	bf00      	nop
 800348a:	3770      	adds	r7, #112	@ 0x70
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <memset>:
 8003490:	4402      	add	r2, r0
 8003492:	4603      	mov	r3, r0
 8003494:	4293      	cmp	r3, r2
 8003496:	d100      	bne.n	800349a <memset+0xa>
 8003498:	4770      	bx	lr
 800349a:	f803 1b01 	strb.w	r1, [r3], #1
 800349e:	e7f9      	b.n	8003494 <memset+0x4>

080034a0 <__libc_init_array>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4d0d      	ldr	r5, [pc, #52]	@ (80034d8 <__libc_init_array+0x38>)
 80034a4:	4c0d      	ldr	r4, [pc, #52]	@ (80034dc <__libc_init_array+0x3c>)
 80034a6:	1b64      	subs	r4, r4, r5
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	2600      	movs	r6, #0
 80034ac:	42a6      	cmp	r6, r4
 80034ae:	d109      	bne.n	80034c4 <__libc_init_array+0x24>
 80034b0:	4d0b      	ldr	r5, [pc, #44]	@ (80034e0 <__libc_init_array+0x40>)
 80034b2:	4c0c      	ldr	r4, [pc, #48]	@ (80034e4 <__libc_init_array+0x44>)
 80034b4:	f000 f818 	bl	80034e8 <_init>
 80034b8:	1b64      	subs	r4, r4, r5
 80034ba:	10a4      	asrs	r4, r4, #2
 80034bc:	2600      	movs	r6, #0
 80034be:	42a6      	cmp	r6, r4
 80034c0:	d105      	bne.n	80034ce <__libc_init_array+0x2e>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c8:	4798      	blx	r3
 80034ca:	3601      	adds	r6, #1
 80034cc:	e7ee      	b.n	80034ac <__libc_init_array+0xc>
 80034ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d2:	4798      	blx	r3
 80034d4:	3601      	adds	r6, #1
 80034d6:	e7f2      	b.n	80034be <__libc_init_array+0x1e>
 80034d8:	080035c4 	.word	0x080035c4
 80034dc:	080035c4 	.word	0x080035c4
 80034e0:	080035c4 	.word	0x080035c4
 80034e4:	080035c8 	.word	0x080035c8

080034e8 <_init>:
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ea:	bf00      	nop
 80034ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ee:	bc08      	pop	{r3}
 80034f0:	469e      	mov	lr, r3
 80034f2:	4770      	bx	lr

080034f4 <_fini>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	bf00      	nop
 80034f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fa:	bc08      	pop	{r3}
 80034fc:	469e      	mov	lr, r3
 80034fe:	4770      	bx	lr
