
UART_Rx_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003988  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b1c  08003b1c  00004b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b54  08003b54  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003b54  08003b54  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003b54  08003b54  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b54  08003b54  00004b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000d8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a78b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a7e  00000000  00000000  0000f7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  00011248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b0  00000000  00000000  000119b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f95f  00000000  00000000  00011f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000adf2  00000000  00000000  000318c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf92d  00000000  00000000  0003c6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fbfe6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d28  00000000  00000000  000fc02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000fdd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b04 	.word	0x08003b04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003b04 	.word	0x08003b04

080001d4 <HAL_UART_RxCpltCallback>:
uint8_t RxData[20];
uint8_t temp[2];
int indx = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	memcpy(RxData+indx, temp, 1);
 80001dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <HAL_UART_RxCpltCallback+0x44>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b0e      	ldr	r3, [pc, #56]	@ (800021c <HAL_UART_RxCpltCallback+0x48>)
 80001e4:	4413      	add	r3, r2
 80001e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000220 <HAL_UART_RxCpltCallback+0x4c>)
 80001e8:	7812      	ldrb	r2, [r2, #0]
 80001ea:	701a      	strb	r2, [r3, #0]
	if(++indx >= 20) indx = 0;
 80001ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000218 <HAL_UART_RxCpltCallback+0x44>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	4a09      	ldr	r2, [pc, #36]	@ (8000218 <HAL_UART_RxCpltCallback+0x44>)
 80001f4:	6013      	str	r3, [r2, #0]
 80001f6:	4b08      	ldr	r3, [pc, #32]	@ (8000218 <HAL_UART_RxCpltCallback+0x44>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b13      	cmp	r3, #19
 80001fc:	dd02      	ble.n	8000204 <HAL_UART_RxCpltCallback+0x30>
 80001fe:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <HAL_UART_RxCpltCallback+0x44>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, temp, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	4906      	ldr	r1, [pc, #24]	@ (8000220 <HAL_UART_RxCpltCallback+0x4c>)
 8000208:	4806      	ldr	r0, [pc, #24]	@ (8000224 <HAL_UART_RxCpltCallback+0x50>)
 800020a:	f002 fa4f 	bl	80026ac <HAL_UART_Receive_IT>
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	200000dc 	.word	0x200000dc
 800021c:	200000c4 	.word	0x200000c4
 8000220:	200000d8 	.word	0x200000d8
 8000224:	20000028 	.word	0x20000028

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_UART_Receive_IT(&huart2, temp, 1);
 800022c:	2201      	movs	r2, #1
 800022e:	4912      	ldr	r1, [pc, #72]	@ (8000278 <main+0x50>)
 8000230:	4812      	ldr	r0, [pc, #72]	@ (800027c <main+0x54>)
 8000232:	f002 fa3b 	bl	80026ac <HAL_UART_Receive_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000236:	f000 f9c5 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023a:	f000 f827 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 f8a7 	bl	8000390 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000242:	f000 f875 	bl	8000330 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(temp[0] == '\n')
 8000246:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <main+0x50>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b0a      	cmp	r3, #10
 800024c:	d109      	bne.n	8000262 <main+0x3a>
	  {
		  memcpy(FinalData, RxData, indx);
 800024e:	4b0c      	ldr	r3, [pc, #48]	@ (8000280 <main+0x58>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	461a      	mov	r2, r3
 8000254:	490b      	ldr	r1, [pc, #44]	@ (8000284 <main+0x5c>)
 8000256:	480c      	ldr	r0, [pc, #48]	@ (8000288 <main+0x60>)
 8000258:	f003 fc46 	bl	8003ae8 <memcpy>
		  indx = 0;
 800025c:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <main+0x58>)
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000262:	2120      	movs	r1, #32
 8000264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000268:	f000 fd66 	bl	8000d38 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800026c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000270:	f000 fa0e 	bl	8000690 <HAL_Delay>
	  if(temp[0] == '\n')
 8000274:	e7e7      	b.n	8000246 <main+0x1e>
 8000276:	bf00      	nop
 8000278:	200000d8 	.word	0x200000d8
 800027c:	20000028 	.word	0x20000028
 8000280:	200000dc 	.word	0x200000dc
 8000284:	200000c4 	.word	0x200000c4
 8000288:	200000b0 	.word	0x200000b0

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b0a6      	sub	sp, #152	@ 0x98
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000296:	2228      	movs	r2, #40	@ 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f003 fbf8 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2258      	movs	r2, #88	@ 0x58
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 fbea 	bl	8003a90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002bc:	2302      	movs	r3, #2
 80002be:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c4:	2310      	movs	r3, #16
 80002c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ca:	2300      	movs	r3, #0
 80002cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fd49 	bl	8000d6c <HAL_RCC_OscConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002e0:	f000 f886 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	2300      	movs	r3, #0
 80002ea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fd58 	bl	8001db4 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800030a:	f000 f871 	bl	80003f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800030e:	2302      	movs	r3, #2
 8000310:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f001 ff5d 	bl	80021d8 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000324:	f000 f864 	bl	80003f0 <Error_Handler>
  }
}
 8000328:	bf00      	nop
 800032a:	3798      	adds	r7, #152	@ 0x98
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000334:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 8000336:	4a15      	ldr	r2, [pc, #84]	@ (800038c <MX_USART2_UART_Init+0x5c>)
 8000338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800033a:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 800033c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 800036e:	2200      	movs	r2, #0
 8000370:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_USART2_UART_Init+0x58>)
 8000374:	f002 f94c 	bl	8002610 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800037e:	f000 f837 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000028 	.word	0x20000028
 800038c:	40004400 	.word	0x40004400

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b11      	ldr	r3, [pc, #68]	@ (80003ec <MX_GPIO_Init+0x5c>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a10      	ldr	r2, [pc, #64]	@ (80003ec <MX_GPIO_Init+0x5c>)
 80003aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ae:	6153      	str	r3, [r2, #20]
 80003b0:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <MX_GPIO_Init+0x5c>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2120      	movs	r1, #32
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c4:	f000 fca0 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003c8:	2320      	movs	r3, #32
 80003ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2301      	movs	r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e0:	f000 fb08 	bl	80009f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003e4:	bf00      	nop
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <HAL_MspInit+0x44>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <HAL_MspInit+0x44>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <HAL_MspInit+0x44>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	@ 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1b      	ldr	r2, [pc, #108]	@ (80004d0 <HAL_UART_MspInit+0x8c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d130      	bne.n	80004c8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000466:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a1a      	ldr	r2, [pc, #104]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 800046c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a14      	ldr	r2, [pc, #80]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 8000484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000496:	230c      	movs	r3, #12
 8000498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049a:	2302      	movs	r3, #2
 800049c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a2:	2303      	movs	r3, #3
 80004a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004a6:	2307      	movs	r3, #7
 80004a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b4:	f000 fa9e 	bl	80009f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	2026      	movs	r0, #38	@ 0x26
 80004be:	f000 f9e6 	bl	800088e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004c2:	2026      	movs	r0, #38	@ 0x26
 80004c4:	f000 f9ff 	bl	80008c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80004c8:	bf00      	nop
 80004ca:	3728      	adds	r7, #40	@ 0x28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40004400 	.word	0x40004400
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <NMI_Handler+0x4>

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <UsageFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f88f 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800053c:	4802      	ldr	r0, [pc, #8]	@ (8000548 <USART2_IRQHandler+0x10>)
 800053e:	f002 f8f9 	bl	8002734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000028 	.word	0x20000028

0800054c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <SystemInit+0x20>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000556:	4a05      	ldr	r2, [pc, #20]	@ (800056c <SystemInit+0x20>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000574:	f7ff ffea 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	@ (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	@ (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059e:	f003 fa7f 	bl	8003aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a2:	f7ff fe41 	bl	8000228 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b4:	08003b5c 	.word	0x08003b5c
  ldr r2, =_sbss
 80005b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005bc:	200000e4 	.word	0x200000e4

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <HAL_Init+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <HAL_Init+0x28>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 f94f 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	200f      	movs	r0, #15
 80005dc:	f000 f808 	bl	80005f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e0:	f7ff ff0c 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40022000 	.word	0x40022000

080005f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_InitTick+0x54>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_InitTick+0x58>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f967 	bl	80008e2 <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e00e      	b.n	800063c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d80a      	bhi.n	800063a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f92f 	bl	800088e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4a06      	ldr	r2, [pc, #24]	@ (800064c <HAL_InitTick+0x5c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000008 	.word	0x20000008
 8000674:	200000e0 	.word	0x200000e0

08000678 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;  
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	200000e0 	.word	0x200000e0

08000690 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a8:	d005      	beq.n	80006b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <HAL_Delay+0x44>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006b6:	bf00      	nop
 80006b8:	f7ff ffde 	bl	8000678 <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d8f7      	bhi.n	80006b8 <HAL_Delay+0x28>
  {
  }
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000008 	.word	0x20000008

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db0b      	blt.n	8000766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 021f 	and.w	r2, r3, #31
 8000754:	4907      	ldr	r1, [pc, #28]	@ (8000774 <__NVIC_EnableIRQ+0x38>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	095b      	lsrs	r3, r3, #5
 800075c:	2001      	movs	r0, #1
 800075e:	fa00 f202 	lsl.w	r2, r0, r2
 8000762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e100 	.word	0xe000e100

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	@ (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	@ (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	@ 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	@ 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f7ff ff8e 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff29 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff3e 	bl	8000720 <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff8e 	bl	80007cc <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff5d 	bl	8000778 <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff31 	bl	800073c <__NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffa2 	bl	8000834 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d101      	bne.n	800090c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e02e      	b.n	800096a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000912:	2b02      	cmp	r3, #2
 8000914:	d008      	beq.n	8000928 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2204      	movs	r2, #4
 800091a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e020      	b.n	800096a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f022 020e 	bic.w	r2, r2, #14
 8000936:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 0201 	bic.w	r2, r2, #1
 8000946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f202 	lsl.w	r2, r1, r2
 8000956:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b084      	sub	sp, #16
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000988:	2b02      	cmp	r3, #2
 800098a:	d005      	beq.n	8000998 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2204      	movs	r2, #4
 8000990:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e027      	b.n	80009e8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 020e 	bic.w	r2, r2, #14
 80009a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f022 0201 	bic.w	r2, r2, #1
 80009b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009c0:	2101      	movs	r1, #1
 80009c2:	fa01 f202 	lsl.w	r2, r1, r2
 80009c6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2201      	movs	r2, #1
 80009cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	4798      	blx	r3
    }
  }
  return status;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e160      	b.n	8000cc6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 8152 	beq.w	8000cc0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d005      	beq.n	8000a34 <HAL_GPIO_Init+0x40>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d130      	bne.n	8000a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	f003 0201 	and.w	r2, r3, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d017      	beq.n	8000ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d123      	bne.n	8000b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	08da      	lsrs	r2, r3, #3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	691a      	ldr	r2, [r3, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	08da      	lsrs	r2, r3, #3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	6939      	ldr	r1, [r7, #16]
 8000b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0203 	and.w	r2, r3, #3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 80ac 	beq.w	8000cc0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b68:	4b5e      	ldr	r3, [pc, #376]	@ (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b80:	4a59      	ldr	r2, [pc, #356]	@ (8000ce8 <HAL_GPIO_Init+0x2f4>)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3302      	adds	r3, #2
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	220f      	movs	r2, #15
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000baa:	d025      	beq.n	8000bf8 <HAL_GPIO_Init+0x204>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a4f      	ldr	r2, [pc, #316]	@ (8000cec <HAL_GPIO_Init+0x2f8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d01f      	beq.n	8000bf4 <HAL_GPIO_Init+0x200>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a4e      	ldr	r2, [pc, #312]	@ (8000cf0 <HAL_GPIO_Init+0x2fc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d019      	beq.n	8000bf0 <HAL_GPIO_Init+0x1fc>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8000cf4 <HAL_GPIO_Init+0x300>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d013      	beq.n	8000bec <HAL_GPIO_Init+0x1f8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8000cf8 <HAL_GPIO_Init+0x304>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d00d      	beq.n	8000be8 <HAL_GPIO_Init+0x1f4>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4b      	ldr	r2, [pc, #300]	@ (8000cfc <HAL_GPIO_Init+0x308>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d007      	beq.n	8000be4 <HAL_GPIO_Init+0x1f0>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a4a      	ldr	r2, [pc, #296]	@ (8000d00 <HAL_GPIO_Init+0x30c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d101      	bne.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bdc:	2306      	movs	r3, #6
 8000bde:	e00c      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000be0:	2307      	movs	r3, #7
 8000be2:	e00a      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000be4:	2305      	movs	r3, #5
 8000be6:	e008      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000be8:	2304      	movs	r3, #4
 8000bea:	e006      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bec:	2303      	movs	r3, #3
 8000bee:	e004      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	f002 0203 	and.w	r2, r2, #3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0a:	4937      	ldr	r1, [pc, #220]	@ (8000ce8 <HAL_GPIO_Init+0x2f4>)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3302      	adds	r3, #2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c18:	4b3a      	ldr	r3, [pc, #232]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c3c:	4a31      	ldr	r2, [pc, #196]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c42:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c66:	4a27      	ldr	r2, [pc, #156]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c90:	4a1c      	ldr	r2, [pc, #112]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f47f ae97 	bne.w	8000a04 <HAL_GPIO_Init+0x10>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	371c      	adds	r7, #28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	48000400 	.word	0x48000400
 8000cf0:	48000800 	.word	0x48000800
 8000cf4:	48000c00 	.word	0x48000c00
 8000cf8:	48001000 	.word	0x48001000
 8000cfc:	48001400 	.word	0x48001400
 8000d00:	48001800 	.word	0x48001800
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d24:	e002      	b.n	8000d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	041a      	lsls	r2, r3, #16
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43d9      	mvns	r1, r3
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	400b      	ands	r3, r1
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	619a      	str	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f001 b80a 	b.w	8001da6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 8161 	beq.w	800106a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000da8:	4bae      	ldr	r3, [pc, #696]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d00c      	beq.n	8000dce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db4:	4bab      	ldr	r3, [pc, #684]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d157      	bne.n	8000e70 <HAL_RCC_OscConfig+0x104>
 8000dc0:	4ba8      	ldr	r3, [pc, #672]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dcc:	d150      	bne.n	8000e70 <HAL_RCC_OscConfig+0x104>
 8000dce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dd2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000dda:	fa93 f3a3 	rbit	r3, r3
 8000dde:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000de2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de6:	fab3 f383 	clz	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dee:	d802      	bhi.n	8000df6 <HAL_RCC_OscConfig+0x8a>
 8000df0:	4b9c      	ldr	r3, [pc, #624]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	e015      	b.n	8000e22 <HAL_RCC_OscConfig+0xb6>
 8000df6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dfa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000e02:	fa93 f3a3 	rbit	r3, r3
 8000e06:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000e0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e0e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e12:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000e16:	fa93 f3a3 	rbit	r3, r3
 8000e1a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e1e:	4b91      	ldr	r3, [pc, #580]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e26:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e2a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000e2e:	fa92 f2a2 	rbit	r2, r2
 8000e32:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000e36:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e3a:	fab2 f282 	clz	r2, r2
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	f042 0220 	orr.w	r2, r2, #32
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	f002 021f 	and.w	r2, r2, #31
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 8108 	beq.w	8001068 <HAL_RCC_OscConfig+0x2fc>
 8000e58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f040 80ff 	bne.w	8001068 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f000 bf9b 	b.w	8001da6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e80:	d106      	bne.n	8000e90 <HAL_RCC_OscConfig+0x124>
 8000e82:	4b78      	ldr	r3, [pc, #480]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a77      	ldr	r2, [pc, #476]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e036      	b.n	8000efe <HAL_RCC_OscConfig+0x192>
 8000e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d10c      	bne.n	8000eba <HAL_RCC_OscConfig+0x14e>
 8000ea0:	4b70      	ldr	r3, [pc, #448]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a6f      	ldr	r2, [pc, #444]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b6d      	ldr	r3, [pc, #436]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a6c      	ldr	r2, [pc, #432]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	e021      	b.n	8000efe <HAL_RCC_OscConfig+0x192>
 8000eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ebe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eca:	d10c      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x17a>
 8000ecc:	4b65      	ldr	r3, [pc, #404]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a64      	ldr	r2, [pc, #400]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000ed2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b62      	ldr	r3, [pc, #392]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a61      	ldr	r2, [pc, #388]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e00b      	b.n	8000efe <HAL_RCC_OscConfig+0x192>
 8000ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a5e      	ldr	r2, [pc, #376]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000ef8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000efc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d054      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fbb3 	bl	8000678 <HAL_GetTick>
 8000f12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	e00a      	b.n	8000f2e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fbae 	bl	8000678 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b64      	cmp	r3, #100	@ 0x64
 8000f26:	d902      	bls.n	8000f2e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	f000 bf3c 	b.w	8001da6 <HAL_RCC_OscConfig+0x103a>
 8000f2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f32:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000f42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f4e:	d802      	bhi.n	8000f56 <HAL_RCC_OscConfig+0x1ea>
 8000f50:	4b44      	ldr	r3, [pc, #272]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	e015      	b.n	8000f82 <HAL_RCC_OscConfig+0x216>
 8000f56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f5a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000f6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f6e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f7e:	4b39      	ldr	r3, [pc, #228]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f86:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000f8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f8e:	fa92 f2a2 	rbit	r2, r2
 8000f92:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000f96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f9a:	fab2 f282 	clz	r2, r2
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	f042 0220 	orr.w	r2, r2, #32
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	f002 021f 	and.w	r2, r2, #31
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0b0      	beq.n	8000f18 <HAL_RCC_OscConfig+0x1ac>
 8000fb6:	e058      	b.n	800106a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fb5e 	bl	8000678 <HAL_GetTick>
 8000fbc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc0:	e00a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc2:	f7ff fb59 	bl	8000678 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	@ 0x64
 8000fd0:	d902      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	f000 bee7 	b.w	8001da6 <HAL_RCC_OscConfig+0x103a>
 8000fd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fdc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000fec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ff8:	d802      	bhi.n	8001000 <HAL_RCC_OscConfig+0x294>
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	e015      	b.n	800102c <HAL_RCC_OscConfig+0x2c0>
 8001000:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001004:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001008:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800100c:	fa93 f3a3 	rbit	r3, r3
 8001010:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001014:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001018:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800101c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_RCC_OscConfig+0x2f8>)
 800102a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001030:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001034:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001038:	fa92 f2a2 	rbit	r2, r2
 800103c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001040:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001044:	fab2 f282 	clz	r2, r2
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	f042 0220 	orr.w	r2, r2, #32
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	f002 021f 	and.w	r2, r2, #31
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1b0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x256>
 8001060:	e003      	b.n	800106a <HAL_RCC_OscConfig+0x2fe>
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800106e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 816d 	beq.w	800135a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001080:	4bcd      	ldr	r3, [pc, #820]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00c      	beq.n	80010a6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800108c:	4bca      	ldr	r3, [pc, #808]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b08      	cmp	r3, #8
 8001096:	d16e      	bne.n	8001176 <HAL_RCC_OscConfig+0x40a>
 8001098:	4bc7      	ldr	r3, [pc, #796]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80010a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010a4:	d167      	bne.n	8001176 <HAL_RCC_OscConfig+0x40a>
 80010a6:	2302      	movs	r3, #2
 80010a8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80010b8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80010c4:	d802      	bhi.n	80010cc <HAL_RCC_OscConfig+0x360>
 80010c6:	4bbc      	ldr	r3, [pc, #752]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	e013      	b.n	80010f4 <HAL_RCC_OscConfig+0x388>
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80010e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80010f0:	4bb1      	ldr	r3, [pc, #708]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f4:	2202      	movs	r2, #2
 80010f6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80010fa:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80010fe:	fa92 f2a2 	rbit	r2, r2
 8001102:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001106:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	f042 0220 	orr.w	r2, r2, #32
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f002 021f 	and.w	r2, r2, #31
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00a      	beq.n	800113c <HAL_RCC_OscConfig+0x3d0>
 8001126:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800112a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d002      	beq.n	800113c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	f000 be35 	b.w	8001da6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b9e      	ldr	r3, [pc, #632]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001148:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	21f8      	movs	r1, #248	@ 0xf8
 8001152:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800115a:	fa91 f1a1 	rbit	r1, r1
 800115e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001162:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001166:	fab1 f181 	clz	r1, r1
 800116a:	b2c9      	uxtb	r1, r1
 800116c:	408b      	lsls	r3, r1
 800116e:	4992      	ldr	r1, [pc, #584]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001174:	e0f1      	b.n	800135a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800117a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8083 	beq.w	800128e <HAL_RCC_OscConfig+0x522>
 8001188:	2301      	movs	r3, #1
 800118a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800119a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	461a      	mov	r2, r3
 80011b0:	2301      	movs	r3, #1
 80011b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fa60 	bl	8000678 <HAL_GetTick>
 80011b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011be:	f7ff fa5b 	bl	8000678 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d902      	bls.n	80011d4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	f000 bde9 	b.w	8001da6 <HAL_RCC_OscConfig+0x103a>
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80011e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80011f2:	d802      	bhi.n	80011fa <HAL_RCC_OscConfig+0x48e>
 80011f4:	4b70      	ldr	r3, [pc, #448]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	e013      	b.n	8001222 <HAL_RCC_OscConfig+0x4b6>
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001212:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800121e:	4b66      	ldr	r3, [pc, #408]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	2202      	movs	r2, #2
 8001224:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001228:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800122c:	fa92 f2a2 	rbit	r2, r2
 8001230:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001234:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f002 021f 	and.w	r2, r2, #31
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0b4      	beq.n	80011be <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	4b58      	ldr	r3, [pc, #352]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800125c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001260:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	21f8      	movs	r1, #248	@ 0xf8
 800126a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001272:	fa91 f1a1 	rbit	r1, r1
 8001276:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800127a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800127e:	fab1 f181 	clz	r1, r1
 8001282:	b2c9      	uxtb	r1, r1
 8001284:	408b      	lsls	r3, r1
 8001286:	494c      	ldr	r1, [pc, #304]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 8001288:	4313      	orrs	r3, r2
 800128a:	600b      	str	r3, [r1, #0]
 800128c:	e065      	b.n	800135a <HAL_RCC_OscConfig+0x5ee>
 800128e:	2301      	movs	r3, #1
 8001290:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80012a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	461a      	mov	r2, r3
 80012b6:	2300      	movs	r3, #0
 80012b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff f9dd 	bl	8000678 <HAL_GetTick>
 80012be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	e00a      	b.n	80012da <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff f9d8 	bl	8000678 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d902      	bls.n	80012da <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	f000 bd66 	b.w	8001da6 <HAL_RCC_OscConfig+0x103a>
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80012ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80012f8:	d802      	bhi.n	8001300 <HAL_RCC_OscConfig+0x594>
 80012fa:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	e013      	b.n	8001328 <HAL_RCC_OscConfig+0x5bc>
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001318:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800131c:	fa93 f3a3 	rbit	r3, r3
 8001320:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001324:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <HAL_RCC_OscConfig+0x64c>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	2202      	movs	r2, #2
 800132a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800132e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001332:	fa92 f2a2 	rbit	r2, r2
 8001336:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800133a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800133e:	fab2 f282 	clz	r2, r2
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	f042 0220 	orr.w	r2, r2, #32
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	f002 021f 	and.w	r2, r2, #31
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f202 	lsl.w	r2, r1, r2
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1b4      	bne.n	80012c4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8119 	beq.w	80015a2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001374:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8082 	beq.w	8001486 <HAL_RCC_OscConfig+0x71a>
 8001382:	2301      	movs	r3, #1
 8001384:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001394:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001398:	fab3 f383 	clz	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_RCC_OscConfig+0x650>)
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	461a      	mov	r2, r3
 80013a8:	2301      	movs	r3, #1
 80013aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff f964 	bl	8000678 <HAL_GetTick>
 80013b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b4:	e00f      	b.n	80013d6 <HAL_RCC_OscConfig+0x66a>
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff f95a 	bl	8000678 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d902      	bls.n	80013d6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f000 bce8 	b.w	8001da6 <HAL_RCC_OscConfig+0x103a>
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013e0:	fa93 f2a3 	rbit	r2, r3
 80013e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013f6:	2202      	movs	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fa93 f2a3 	rbit	r2, r3
 8001408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800140c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800141a:	2202      	movs	r2, #2
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001422:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fa93 f2a3 	rbit	r2, r3
 800142c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001430:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001434:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	4bb0      	ldr	r3, [pc, #704]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 8001438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800143a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001442:	2102      	movs	r1, #2
 8001444:	6019      	str	r1, [r3, #0]
 8001446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	fa93 f1a3 	rbit	r1, r3
 8001454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001458:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800145c:	6019      	str	r1, [r3, #0]
  return result;
 800145e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001462:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d09d      	beq.n	80013c0 <HAL_RCC_OscConfig+0x654>
 8001484:	e08d      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
 8001486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001496:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fa93 f2a3 	rbit	r2, r3
 80014a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014a8:	601a      	str	r2, [r3, #0]
  return result;
 80014aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b4:	fab3 f383 	clz	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <HAL_RCC_OscConfig+0x990>)
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	461a      	mov	r2, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff f8d6 	bl	8000678 <HAL_GetTick>
 80014cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff f8d1 	bl	8000678 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d902      	bls.n	80014e8 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	f000 bc5f 	b.w	8001da6 <HAL_RCC_OscConfig+0x103a>
 80014e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014f0:	2202      	movs	r2, #2
 80014f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	fa93 f2a3 	rbit	r2, r3
 8001502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001506:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001510:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001514:	2202      	movs	r2, #2
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fa93 f2a3 	rbit	r2, r3
 8001526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001534:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001538:	2202      	movs	r2, #2
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001540:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001552:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 8001556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001560:	2102      	movs	r1, #2
 8001562:	6019      	str	r1, [r3, #0]
 8001564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001568:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	fa93 f1a3 	rbit	r1, r3
 8001572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001576:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800157a:	6019      	str	r1, [r3, #0]
  return result;
 800157c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001580:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d197      	bne.n	80014d2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 819c 	beq.w	80018f0 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b4e      	ldr	r3, [pc, #312]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b4b      	ldr	r3, [pc, #300]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a4a      	ldr	r2, [pc, #296]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b48      	ldr	r3, [pc, #288]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80015de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <HAL_RCC_OscConfig+0x994>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d11a      	bne.n	800163a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001604:	4b3e      	ldr	r3, [pc, #248]	@ (8001700 <HAL_RCC_OscConfig+0x994>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a3d      	ldr	r2, [pc, #244]	@ (8001700 <HAL_RCC_OscConfig+0x994>)
 800160a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001610:	f7ff f832 	bl	8000678 <HAL_GetTick>
 8001614:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	e009      	b.n	800162e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161a:	f7ff f82d 	bl	8000678 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	@ 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e3bb      	b.n	8001da6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <HAL_RCC_OscConfig+0x994>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0ef      	beq.n	800161a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d106      	bne.n	8001658 <HAL_RCC_OscConfig+0x8ec>
 800164a:	4b2b      	ldr	r3, [pc, #172]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a2a      	ldr	r2, [pc, #168]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	e035      	b.n	80016c4 <HAL_RCC_OscConfig+0x958>
 8001658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10c      	bne.n	8001682 <HAL_RCC_OscConfig+0x916>
 8001668:	4b23      	ldr	r3, [pc, #140]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a22      	ldr	r2, [pc, #136]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a1f      	ldr	r2, [pc, #124]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 800167a:	f023 0304 	bic.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	e020      	b.n	80016c4 <HAL_RCC_OscConfig+0x958>
 8001682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001686:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x940>
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4a18      	ldr	r2, [pc, #96]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6213      	str	r3, [r2, #32]
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4a15      	ldr	r2, [pc, #84]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6213      	str	r3, [r2, #32]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0x958>
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a11      	ldr	r2, [pc, #68]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a0e      	ldr	r2, [pc, #56]	@ (80016f8 <HAL_RCC_OscConfig+0x98c>)
 80016be:	f023 0304 	bic.w	r3, r3, #4
 80016c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8085 	beq.w	80017e0 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7fe ffcf 	bl	8000678 <HAL_GetTick>
 80016da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016de:	e011      	b.n	8001704 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7fe ffca 	bl	8000678 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d907      	bls.n	8001704 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e356      	b.n	8001da6 <HAL_RCC_OscConfig+0x103a>
 80016f8:	40021000 	.word	0x40021000
 80016fc:	10908120 	.word	0x10908120
 8001700:	40007000 	.word	0x40007000
 8001704:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001708:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800170c:	2202      	movs	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001714:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	fa93 f2a3 	rbit	r2, r3
 800171e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001722:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001730:	2202      	movs	r2, #2
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001738:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001746:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800174a:	601a      	str	r2, [r3, #0]
  return result;
 800174c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001750:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001754:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_RCC_OscConfig+0xa00>
 8001766:	4b98      	ldr	r3, [pc, #608]	@ (80019c8 <HAL_RCC_OscConfig+0xc5c>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	e013      	b.n	8001794 <HAL_RCC_OscConfig+0xa28>
 800176c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001770:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001774:	2202      	movs	r2, #2
 8001776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800178a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	4b8d      	ldr	r3, [pc, #564]	@ (80019c8 <HAL_RCC_OscConfig+0xc5c>)
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001798:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800179c:	2102      	movs	r1, #2
 800179e:	6011      	str	r1, [r2, #0]
 80017a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017a4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	fa92 f1a2 	rbit	r1, r2
 80017ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017b2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017b6:	6011      	str	r1, [r2, #0]
  return result;
 80017b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017bc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	fab2 f282 	clz	r2, r2
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	f002 021f 	and.w	r2, r2, #31
 80017d2:	2101      	movs	r1, #1
 80017d4:	fa01 f202 	lsl.w	r2, r1, r2
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d080      	beq.n	80016e0 <HAL_RCC_OscConfig+0x974>
 80017de:	e07d      	b.n	80018dc <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7fe ff4a 	bl	8000678 <HAL_GetTick>
 80017e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7fe ff45 	bl	8000678 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e2d1      	b.n	8001da6 <HAL_RCC_OscConfig+0x103a>
 8001802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001806:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800180a:	2202      	movs	r2, #2
 800180c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001812:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001820:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800182a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800182e:	2202      	movs	r2, #2
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001836:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001844:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001848:	601a      	str	r2, [r3, #0]
  return result;
 800184a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001852:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <HAL_RCC_OscConfig+0xafe>
 8001864:	4b58      	ldr	r3, [pc, #352]	@ (80019c8 <HAL_RCC_OscConfig+0xc5c>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	e013      	b.n	8001892 <HAL_RCC_OscConfig+0xb26>
 800186a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800186e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001888:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	4b4e      	ldr	r3, [pc, #312]	@ (80019c8 <HAL_RCC_OscConfig+0xc5c>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001896:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800189a:	2102      	movs	r1, #2
 800189c:	6011      	str	r1, [r2, #0]
 800189e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	fa92 f1a2 	rbit	r1, r2
 80018ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018b0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018b4:	6011      	str	r1, [r2, #0]
  return result;
 80018b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018ba:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	fab2 f282 	clz	r2, r2
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f002 021f 	and.w	r2, r2, #31
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d186      	bne.n	80017ea <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018dc:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e4:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <HAL_RCC_OscConfig+0xc5c>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a37      	ldr	r2, [pc, #220]	@ (80019c8 <HAL_RCC_OscConfig+0xc5c>)
 80018ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8251 	beq.w	8001da4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001902:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <HAL_RCC_OscConfig+0xc5c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b08      	cmp	r3, #8
 800190c:	f000 820f 	beq.w	8001d2e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001914:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b02      	cmp	r3, #2
 800191e:	f040 8165 	bne.w	8001bec <HAL_RCC_OscConfig+0xe80>
 8001922:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001926:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800192a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800192e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001934:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	fa93 f2a3 	rbit	r2, r3
 800193e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001942:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001946:	601a      	str	r2, [r3, #0]
  return result;
 8001948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001950:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800195c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	461a      	mov	r2, r3
 8001964:	2300      	movs	r3, #0
 8001966:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7fe fe86 	bl	8000678 <HAL_GetTick>
 800196c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	e009      	b.n	8001986 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001972:	f7fe fe81 	bl	8000678 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e20f      	b.n	8001da6 <HAL_RCC_OscConfig+0x103a>
 8001986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800198e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001998:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019aa:	601a      	str	r2, [r3, #0]
  return result;
 80019ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80019be:	d805      	bhi.n	80019cc <HAL_RCC_OscConfig+0xc60>
 80019c0:	4b01      	ldr	r3, [pc, #4]	@ (80019c8 <HAL_RCC_OscConfig+0xc5c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	e02a      	b.n	8001a1c <HAL_RCC_OscConfig+0xcb0>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80019fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a04:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a12:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	4bca      	ldr	r3, [pc, #808]	@ (8001d44 <HAL_RCC_OscConfig+0xfd8>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a20:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a24:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a28:	6011      	str	r1, [r2, #0]
 8001a2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a2e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fa92 f1a2 	rbit	r1, r2
 8001a38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a3c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a40:	6011      	str	r1, [r2, #0]
  return result;
 8001a42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a46:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	fab2 f282 	clz	r2, r2
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	f042 0220 	orr.w	r2, r2, #32
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f002 021f 	and.w	r2, r2, #31
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d184      	bne.n	8001972 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a68:	4bb6      	ldr	r3, [pc, #728]	@ (8001d44 <HAL_RCC_OscConfig+0xfd8>)
 8001a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6c:	f023 020f 	bic.w	r2, r3, #15
 8001a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	49b1      	ldr	r1, [pc, #708]	@ (8001d44 <HAL_RCC_OscConfig+0xfd8>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001a82:	4bb0      	ldr	r3, [pc, #704]	@ (8001d44 <HAL_RCC_OscConfig+0xfd8>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a19      	ldr	r1, [r3, #32]
 8001a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	49a7      	ldr	r1, [pc, #668]	@ (8001d44 <HAL_RCC_OscConfig+0xfd8>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
 8001aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ab2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001abc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ace:	601a      	str	r2, [r3, #0]
  return result;
 8001ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ad8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ae4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	461a      	mov	r2, r3
 8001aec:	2301      	movs	r3, #1
 8001aee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7fe fdc2 	bl	8000678 <HAL_GetTick>
 8001af4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af8:	e009      	b.n	8001b0e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7fe fdbd 	bl	8000678 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e14b      	b.n	8001da6 <HAL_RCC_OscConfig+0x103a>
 8001b0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b12:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b20:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	fa93 f2a3 	rbit	r2, r3
 8001b2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b32:	601a      	str	r2, [r3, #0]
  return result;
 8001b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b38:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b46:	d802      	bhi.n	8001b4e <HAL_RCC_OscConfig+0xde2>
 8001b48:	4b7e      	ldr	r3, [pc, #504]	@ (8001d44 <HAL_RCC_OscConfig+0xfd8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e027      	b.n	8001b9e <HAL_RCC_OscConfig+0xe32>
 8001b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b52:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b60:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b78:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b86:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b94:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d44 <HAL_RCC_OscConfig+0xfd8>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ba2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ba6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001baa:	6011      	str	r1, [r2, #0]
 8001bac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bb0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	fa92 f1a2 	rbit	r1, r2
 8001bba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bbe:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001bc2:	6011      	str	r1, [r2, #0]
  return result;
 8001bc4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bc8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	f042 0220 	orr.w	r2, r2, #32
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f002 021f 	and.w	r2, r2, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d087      	beq.n	8001afa <HAL_RCC_OscConfig+0xd8e>
 8001bea:	e0db      	b.n	8001da4 <HAL_RCC_OscConfig+0x1038>
 8001bec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bf4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c10:	601a      	str	r2, [r3, #0]
  return result;
 8001c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c16:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c1a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c26:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2300      	movs	r3, #0
 8001c30:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7fe fd21 	bl	8000678 <HAL_GetTick>
 8001c36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	e009      	b.n	8001c50 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7fe fd1c 	bl	8000678 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e0aa      	b.n	8001da6 <HAL_RCC_OscConfig+0x103a>
 8001c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c54:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c62:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c70:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c74:	601a      	str	r2, [r3, #0]
  return result;
 8001c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c88:	d802      	bhi.n	8001c90 <HAL_RCC_OscConfig+0xf24>
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <HAL_RCC_OscConfig+0xfd8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	e027      	b.n	8001ce0 <HAL_RCC_OscConfig+0xf74>
 8001c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <HAL_RCC_OscConfig+0xfd8>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ce4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ce8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cec:	6011      	str	r1, [r2, #0]
 8001cee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cf2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	fa92 f1a2 	rbit	r1, r2
 8001cfc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d00:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d04:	6011      	str	r1, [r2, #0]
  return result;
 8001d06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d0a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f002 021f 	and.w	r2, r2, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f202 	lsl.w	r2, r1, r2
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d187      	bne.n	8001c3c <HAL_RCC_OscConfig+0xed0>
 8001d2c:	e03a      	b.n	8001da4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d104      	bne.n	8001d48 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e031      	b.n	8001da6 <HAL_RCC_OscConfig+0x103a>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d48:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_RCC_OscConfig+0x1044>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d50:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <HAL_RCC_OscConfig+0x1044>)
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d5c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d117      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d74:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d8c:	f003 020f 	and.w	r2, r3, #15
 8001d90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b09e      	sub	sp, #120	@ 0x78
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e154      	b.n	8002076 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b89      	ldr	r3, [pc, #548]	@ (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d910      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b86      	ldr	r3, [pc, #536]	@ (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4984      	ldr	r1, [pc, #528]	@ (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b82      	ldr	r3, [pc, #520]	@ (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e13c      	b.n	8002076 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4978      	ldr	r1, [pc, #480]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80cd 	beq.w	8001fc2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d137      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xec>
 8001e30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e48:	d802      	bhi.n	8001e50 <HAL_RCC_ClockConfig+0x9c>
 8001e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	e00f      	b.n	8001e70 <HAL_RCC_ClockConfig+0xbc>
 8001e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e62:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e6c:	4b62      	ldr	r3, [pc, #392]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e78:	fa92 f2a2 	rbit	r2, r2
 8001e7c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f002 021f 	and.w	r2, r2, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d171      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0ea      	b.n	8002076 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d137      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x164>
 8001ea8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ec0:	d802      	bhi.n	8001ec8 <HAL_RCC_ClockConfig+0x114>
 8001ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	e00f      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x134>
 8001ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8001edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ee4:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eec:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ef0:	fa92 f2a2 	rbit	r2, r2
 8001ef4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001ef6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f042 0220 	orr.w	r2, r2, #32
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f002 021f 	and.w	r2, r2, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d135      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0ae      	b.n	8002076 <HAL_RCC_ClockConfig+0x2c2>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f2e:	d802      	bhi.n	8001f36 <HAL_RCC_ClockConfig+0x182>
 8001f30:	4b31      	ldr	r3, [pc, #196]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	e00d      	b.n	8001f52 <HAL_RCC_ClockConfig+0x19e>
 8001f36:	2302      	movs	r3, #2
 8001f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f42:	2302      	movs	r3, #2
 8001f44:	623b      	str	r3, [r7, #32]
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	2202      	movs	r2, #2
 8001f54:	61ba      	str	r2, [r7, #24]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	fa92 f2a2 	rbit	r2, r2
 8001f5c:	617a      	str	r2, [r7, #20]
  return result;
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	fab2 f282 	clz	r2, r2
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f002 021f 	and.w	r2, r2, #31
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e07a      	b.n	8002076 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 0203 	bic.w	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	491a      	ldr	r1, [pc, #104]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f92:	f7fe fb71 	bl	8000678 <HAL_GetTick>
 8001f96:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9a:	f7fe fb6d 	bl	8000678 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e062      	b.n	8002076 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 020c 	and.w	r2, r3, #12
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d1eb      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d215      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	4906      	ldr	r1, [pc, #24]	@ (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <HAL_RCC_ClockConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d006      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e041      	b.n	8002076 <HAL_RCC_ClockConfig+0x2c2>
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <HAL_RCC_ClockConfig+0x2cc>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	491a      	ldr	r1, [pc, #104]	@ (8002080 <HAL_RCC_ClockConfig+0x2cc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <HAL_RCC_ClockConfig+0x2cc>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4912      	ldr	r1, [pc, #72]	@ (8002080 <HAL_RCC_ClockConfig+0x2cc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800203a:	f000 f829 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800203e:	4601      	mov	r1, r0
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <HAL_RCC_ClockConfig+0x2cc>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002048:	22f0      	movs	r2, #240	@ 0xf0
 800204a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	fa92 f2a2 	rbit	r2, r2
 8002052:	60fa      	str	r2, [r7, #12]
  return result;
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	40d3      	lsrs	r3, r2
 800205e:	4a09      	ldr	r2, [pc, #36]	@ (8002084 <HAL_RCC_ClockConfig+0x2d0>)
 8002060:	5cd3      	ldrb	r3, [r2, r3]
 8002062:	fa21 f303 	lsr.w	r3, r1, r3
 8002066:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <HAL_RCC_ClockConfig+0x2d4>)
 8002068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800206a:	4b08      	ldr	r3, [pc, #32]	@ (800208c <HAL_RCC_ClockConfig+0x2d8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fabe 	bl	80005f0 <HAL_InitTick>
  
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3778      	adds	r7, #120	@ 0x78
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	08003b1c 	.word	0x08003b1c
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x30>
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x36>
 80020be:	e029      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020c2:	613b      	str	r3, [r7, #16]
      break;
 80020c4:	e029      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	4a18      	ldr	r2, [pc, #96]	@ (8002130 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80020d4:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	4a15      	ldr	r2, [pc, #84]	@ (8002134 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ec:	4a0f      	ldr	r2, [pc, #60]	@ (800212c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e007      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020fe:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	fbb2 f2f3 	udiv	r2, r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	613b      	str	r3, [r7, #16]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002116:	613b      	str	r3, [r7, #16]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	693b      	ldr	r3, [r7, #16]
}
 800211c:	4618      	mov	r0, r3
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40021000 	.word	0x40021000
 800212c:	007a1200 	.word	0x007a1200
 8002130:	08003b34 	.word	0x08003b34
 8002134:	08003b44 	.word	0x08003b44

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b03      	ldr	r3, [pc, #12]	@ (800214c <HAL_RCC_GetHCLKFreq+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000000 	.word	0x20000000

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002156:	f7ff ffef 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800215a:	4601      	mov	r1, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002164:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002168:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	603a      	str	r2, [r7, #0]
  return result;
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	40d3      	lsrs	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <HAL_RCC_GetPCLK1Freq+0x40>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	08003b2c 	.word	0x08003b2c

08002194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800219a:	f7ff ffcd 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80021a8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80021ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	fa92 f2a2 	rbit	r2, r2
 80021b4:	603a      	str	r2, [r7, #0]
  return result;
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	fab2 f282 	clz	r2, r2
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	40d3      	lsrs	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08003b2c 	.word	0x08003b2c

080021d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b092      	sub	sp, #72	@ 0x48
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80d2 	beq.w	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10e      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b4a      	ldr	r3, [pc, #296]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a49      	ldr	r2, [pc, #292]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b44      	ldr	r3, [pc, #272]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a40      	ldr	r2, [pc, #256]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7fe fa1b 	bl	8000678 <HAL_GetTick>
 8002242:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7fe fa17 	bl	8000678 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	@ 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1d4      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002264:	4b33      	ldr	r3, [pc, #204]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800226c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8082 	beq.w	800237a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800227e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002280:	429a      	cmp	r2, r3
 8002282:	d07a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002284:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800228e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b25      	ldr	r3, [pc, #148]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	461a      	mov	r2, r3
 80022ae:	2301      	movs	r3, #1
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b1c      	ldr	r3, [pc, #112]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	461a      	mov	r2, r3
 80022d2:	2300      	movs	r3, #0
 80022d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022d6:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d049      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe f9c7 	bl	8000678 <HAL_GetTick>
 80022ea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ec:	e00a      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe f9c3 	bl	8000678 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e17e      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002304:	2302      	movs	r3, #2
 8002306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002310:	2302      	movs	r3, #2
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	61fb      	str	r3, [r7, #28]
  return result;
 800231c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d108      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800232e:	4b01      	ldr	r3, [pc, #4]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	e00d      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
 800233c:	10908100 	.word	0x10908100
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	4b9a      	ldr	r3, [pc, #616]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	2202      	movs	r2, #2
 8002352:	613a      	str	r2, [r7, #16]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	fa92 f2a2 	rbit	r2, r2
 800235a:	60fa      	str	r2, [r7, #12]
  return result;
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	fab2 f282 	clz	r2, r2
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f002 021f 	and.w	r2, r2, #31
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0b9      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800237a:	4b8f      	ldr	r3, [pc, #572]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	498c      	ldr	r1, [pc, #560]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800238c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b88      	ldr	r3, [pc, #544]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	4a87      	ldr	r2, [pc, #540]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800239e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ac:	4b82      	ldr	r3, [pc, #520]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	f023 0203 	bic.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	497f      	ldr	r1, [pc, #508]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ca:	4b7b      	ldr	r3, [pc, #492]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4978      	ldr	r1, [pc, #480]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e8:	4b73      	ldr	r3, [pc, #460]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	4970      	ldr	r1, [pc, #448]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002406:	4b6c      	ldr	r3, [pc, #432]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	f023 0210 	bic.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4969      	ldr	r1, [pc, #420]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002424:	4b64      	ldr	r3, [pc, #400]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002430:	4961      	ldr	r1, [pc, #388]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002442:	4b5d      	ldr	r3, [pc, #372]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f023 0220 	bic.w	r2, r3, #32
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	495a      	ldr	r1, [pc, #360]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002450:	4313      	orrs	r3, r2
 8002452:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002460:	4b55      	ldr	r3, [pc, #340]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	4952      	ldr	r1, [pc, #328]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800247e:	4b4e      	ldr	r3, [pc, #312]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	494b      	ldr	r1, [pc, #300]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800249c:	4b46      	ldr	r3, [pc, #280]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4943      	ldr	r1, [pc, #268]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024ba:	4b3f      	ldr	r3, [pc, #252]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	493c      	ldr	r1, [pc, #240]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024d8:	4b37      	ldr	r3, [pc, #220]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e4:	4934      	ldr	r1, [pc, #208]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024f6:	4b30      	ldr	r3, [pc, #192]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fa:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	492d      	ldr	r1, [pc, #180]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002514:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002520:	4925      	ldr	r1, [pc, #148]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002522:	4313      	orrs	r3, r2
 8002524:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002532:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	491e      	ldr	r1, [pc, #120]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002540:	4313      	orrs	r3, r2
 8002542:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002550:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	4916      	ldr	r1, [pc, #88]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800256e:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257a:	490f      	ldr	r1, [pc, #60]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800258c:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002598:	4907      	ldr	r1, [pc, #28]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025aa:	4b03      	ldr	r3, [pc, #12]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	e002      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025be:	4913      	ldr	r1, [pc, #76]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025dc:	490b      	ldr	r1, [pc, #44]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80025ee:	4b07      	ldr	r3, [pc, #28]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fa:	4904      	ldr	r1, [pc, #16]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3748      	adds	r7, #72	@ 0x48
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e040      	b.n	80026a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fd ff06 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	@ 0x24
 800263c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fd46 	bl	80030e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fb6f 	bl	8002d40 <UART_SetConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e01b      	b.n	80026a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800267a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800268a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fdc5 	bl	800322c <UART_CheckIdleState>
 80026a2:	4603      	mov	r3, r0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	4613      	mov	r3, r2
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d132      	bne.n	800272a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_UART_Receive_IT+0x24>
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e02b      	b.n	800272c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d018      	beq.n	800271a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	613b      	str	r3, [r7, #16]
   return(result);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270a:	69f9      	ldr	r1, [r7, #28]
 800270c:	6a3a      	ldr	r2, [r7, #32]
 800270e:	e841 2300 	strex	r3, r2, [r1]
 8002712:	61bb      	str	r3, [r7, #24]
   return(result);
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1e6      	bne.n	80026e8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	461a      	mov	r2, r3
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fe99 	bl	8003458 <UART_Start_Receive_IT>
 8002726:	4603      	mov	r3, r0
 8002728:	e000      	b.n	800272c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800272a:	2302      	movs	r3, #2
  }
}
 800272c:	4618      	mov	r0, r3
 800272e:	3728      	adds	r7, #40	@ 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0ba      	sub	sp, #232	@ 0xe8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800275a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800275e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002762:	4013      	ands	r3, r2
 8002764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d115      	bne.n	800279c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00f      	beq.n	800279c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800277c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 82ab 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
      }
      return;
 800279a:	e2a5      	b.n	8002ce8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800279c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8117 	beq.w	80029d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80027b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80027b6:	4b85      	ldr	r3, [pc, #532]	@ (80029cc <HAL_UART_IRQHandler+0x298>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 810a 	beq.w	80029d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d011      	beq.n	80027f0 <HAL_UART_IRQHandler+0xbc>
 80027cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2201      	movs	r2, #1
 80027de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027e6:	f043 0201 	orr.w	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d011      	beq.n	8002820 <HAL_UART_IRQHandler+0xec>
 80027fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00b      	beq.n	8002820 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2202      	movs	r2, #2
 800280e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002816:	f043 0204 	orr.w	r2, r3, #4
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d011      	beq.n	8002850 <HAL_UART_IRQHandler+0x11c>
 800282c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2204      	movs	r2, #4
 800283e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002846:	f043 0202 	orr.w	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d017      	beq.n	800288c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800285c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800286c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2208      	movs	r2, #8
 800287a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002882:	f043 0208 	orr.w	r2, r3, #8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800288c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <HAL_UART_IRQHandler+0x18a>
 8002898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800289c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00c      	beq.n	80028be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8211 	beq.w	8002cec <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80028ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b40      	cmp	r3, #64	@ 0x40
 8002908:	d005      	beq.n	8002916 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800290a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800290e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002912:	2b00      	cmp	r3, #0
 8002914:	d04f      	beq.n	80029b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fe64 	bl	80035e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002926:	2b40      	cmp	r3, #64	@ 0x40
 8002928:	d141      	bne.n	80029ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3308      	adds	r3, #8
 8002930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002940:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3308      	adds	r3, #8
 8002952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002956:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800295a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002966:	e841 2300 	strex	r3, r2, [r1]
 800296a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800296e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1d9      	bne.n	800292a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297a:	2b00      	cmp	r3, #0
 800297c:	d013      	beq.n	80029a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002982:	4a13      	ldr	r2, [pc, #76]	@ (80029d0 <HAL_UART_IRQHandler+0x29c>)
 8002984:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fff3 	bl	8000976 <HAL_DMA_Abort_IT>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d017      	beq.n	80029c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029a0:	4610      	mov	r0, r2
 80029a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	e00f      	b.n	80029c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f9b4 	bl	8002d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	e00b      	b.n	80029c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f9b0 	bl	8002d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	e007      	b.n	80029c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f9ac 	bl	8002d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80029c4:	e192      	b.n	8002cec <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c6:	bf00      	nop
    return;
 80029c8:	e190      	b.n	8002cec <HAL_UART_IRQHandler+0x5b8>
 80029ca:	bf00      	nop
 80029cc:	04000120 	.word	0x04000120
 80029d0:	080036ad 	.word	0x080036ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d8:	2b01      	cmp	r3, #1
 80029da:	f040 814b 	bne.w	8002c74 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8144 	beq.w	8002c74 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 813d 	beq.w	8002c74 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2210      	movs	r2, #16
 8002a00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0c:	2b40      	cmp	r3, #64	@ 0x40
 8002a0e:	f040 80b5 	bne.w	8002b7c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8164 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a32:	429a      	cmp	r2, r3
 8002a34:	f080 815c 	bcs.w	8002cf0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	f000 8086 	beq.w	8002b5a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a5a:	e853 3f00 	ldrex	r3, [r3]
 8002a5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a7c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a80:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a84:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a88:	e841 2300 	strex	r3, r2, [r1]
 8002a8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1da      	bne.n	8002a4e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa2:	e853 3f00 	ldrex	r3, [r3]
 8002aa6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002aa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002abc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ac4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ace:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e1      	bne.n	8002a98 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3308      	adds	r3, #8
 8002ada:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002adc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ade:	e853 3f00 	ldrex	r3, [r3]
 8002ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3308      	adds	r3, #8
 8002af4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002af8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002afa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002afe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e3      	bne.n	8002ad4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b22:	e853 3f00 	ldrex	r3, [r3]
 8002b26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b2a:	f023 0310 	bic.w	r3, r3, #16
 8002b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b3e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b44:	e841 2300 	strex	r3, r2, [r1]
 8002b48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e4      	bne.n	8002b1a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fed0 	bl	80008fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f8d7 	bl	8002d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b7a:	e0b9      	b.n	8002cf0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80ab 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80a6 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bcc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e4      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3308      	adds	r3, #8
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	623b      	str	r3, [r7, #32]
   return(result);
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c02:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e3      	bne.n	8002bde <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	e853 3f00 	ldrex	r3, [r3]
 8002c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0310 	bic.w	r3, r3, #16
 8002c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	69b9      	ldr	r1, [r7, #24]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	617b      	str	r3, [r7, #20]
   return(result);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e4      	bne.n	8002c2a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f85b 	bl	8002d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c72:	e03f      	b.n	8002cf4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00e      	beq.n	8002c9e <HAL_UART_IRQHandler+0x56a>
 8002c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fef0 	bl	8003a7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c9c:	e02d      	b.n	8002cfa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01c      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
    }
    return;
 8002cc6:	e017      	b.n	8002cf8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <HAL_UART_IRQHandler+0x5c6>
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00c      	beq.n	8002cfa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fcf9 	bl	80036d8 <UART_EndTransmit_IT>
    return;
 8002ce6:	e008      	b.n	8002cfa <HAL_UART_IRQHandler+0x5c6>
      return;
 8002ce8:	bf00      	nop
 8002cea:	e006      	b.n	8002cfa <HAL_UART_IRQHandler+0x5c6>
    return;
 8002cec:	bf00      	nop
 8002cee:	e004      	b.n	8002cfa <HAL_UART_IRQHandler+0x5c6>
      return;
 8002cf0:	bf00      	nop
 8002cf2:	e002      	b.n	8002cfa <HAL_UART_IRQHandler+0x5c6>
      return;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_IRQHandler+0x5c6>
    return;
 8002cf8:	bf00      	nop
  }

}
 8002cfa:	37e8      	adds	r7, #232	@ 0xe8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b92      	ldr	r3, [pc, #584]	@ (8002fb4 <UART_SetConfig+0x274>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	6979      	ldr	r1, [r7, #20]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a80      	ldr	r2, [pc, #512]	@ (8002fb8 <UART_SetConfig+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d120      	bne.n	8002dfe <UART_SetConfig+0xbe>
 8002dbc:	4b7f      	ldr	r3, [pc, #508]	@ (8002fbc <UART_SetConfig+0x27c>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d817      	bhi.n	8002df8 <UART_SetConfig+0xb8>
 8002dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd0 <UART_SetConfig+0x90>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002ded 	.word	0x08002ded
 8002dd8:	08002df3 	.word	0x08002df3
 8002ddc:	08002de7 	.word	0x08002de7
 8002de0:	2301      	movs	r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]
 8002de4:	e0b5      	b.n	8002f52 <UART_SetConfig+0x212>
 8002de6:	2302      	movs	r3, #2
 8002de8:	77fb      	strb	r3, [r7, #31]
 8002dea:	e0b2      	b.n	8002f52 <UART_SetConfig+0x212>
 8002dec:	2304      	movs	r3, #4
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e0af      	b.n	8002f52 <UART_SetConfig+0x212>
 8002df2:	2308      	movs	r3, #8
 8002df4:	77fb      	strb	r3, [r7, #31]
 8002df6:	e0ac      	b.n	8002f52 <UART_SetConfig+0x212>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e0a9      	b.n	8002f52 <UART_SetConfig+0x212>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6f      	ldr	r2, [pc, #444]	@ (8002fc0 <UART_SetConfig+0x280>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d124      	bne.n	8002e52 <UART_SetConfig+0x112>
 8002e08:	4b6c      	ldr	r3, [pc, #432]	@ (8002fbc <UART_SetConfig+0x27c>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e14:	d011      	beq.n	8002e3a <UART_SetConfig+0xfa>
 8002e16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e1a:	d817      	bhi.n	8002e4c <UART_SetConfig+0x10c>
 8002e1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e20:	d011      	beq.n	8002e46 <UART_SetConfig+0x106>
 8002e22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e26:	d811      	bhi.n	8002e4c <UART_SetConfig+0x10c>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <UART_SetConfig+0xf4>
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e30:	d006      	beq.n	8002e40 <UART_SetConfig+0x100>
 8002e32:	e00b      	b.n	8002e4c <UART_SetConfig+0x10c>
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	e08b      	b.n	8002f52 <UART_SetConfig+0x212>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	77fb      	strb	r3, [r7, #31]
 8002e3e:	e088      	b.n	8002f52 <UART_SetConfig+0x212>
 8002e40:	2304      	movs	r3, #4
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e085      	b.n	8002f52 <UART_SetConfig+0x212>
 8002e46:	2308      	movs	r3, #8
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e082      	b.n	8002f52 <UART_SetConfig+0x212>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e07f      	b.n	8002f52 <UART_SetConfig+0x212>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a5b      	ldr	r2, [pc, #364]	@ (8002fc4 <UART_SetConfig+0x284>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d124      	bne.n	8002ea6 <UART_SetConfig+0x166>
 8002e5c:	4b57      	ldr	r3, [pc, #348]	@ (8002fbc <UART_SetConfig+0x27c>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e60:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002e64:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e68:	d011      	beq.n	8002e8e <UART_SetConfig+0x14e>
 8002e6a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e6e:	d817      	bhi.n	8002ea0 <UART_SetConfig+0x160>
 8002e70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e74:	d011      	beq.n	8002e9a <UART_SetConfig+0x15a>
 8002e76:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e7a:	d811      	bhi.n	8002ea0 <UART_SetConfig+0x160>
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <UART_SetConfig+0x148>
 8002e80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e84:	d006      	beq.n	8002e94 <UART_SetConfig+0x154>
 8002e86:	e00b      	b.n	8002ea0 <UART_SetConfig+0x160>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	77fb      	strb	r3, [r7, #31]
 8002e8c:	e061      	b.n	8002f52 <UART_SetConfig+0x212>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	77fb      	strb	r3, [r7, #31]
 8002e92:	e05e      	b.n	8002f52 <UART_SetConfig+0x212>
 8002e94:	2304      	movs	r3, #4
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e05b      	b.n	8002f52 <UART_SetConfig+0x212>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e058      	b.n	8002f52 <UART_SetConfig+0x212>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e055      	b.n	8002f52 <UART_SetConfig+0x212>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a47      	ldr	r2, [pc, #284]	@ (8002fc8 <UART_SetConfig+0x288>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d124      	bne.n	8002efa <UART_SetConfig+0x1ba>
 8002eb0:	4b42      	ldr	r3, [pc, #264]	@ (8002fbc <UART_SetConfig+0x27c>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002eb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ebc:	d011      	beq.n	8002ee2 <UART_SetConfig+0x1a2>
 8002ebe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ec2:	d817      	bhi.n	8002ef4 <UART_SetConfig+0x1b4>
 8002ec4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ec8:	d011      	beq.n	8002eee <UART_SetConfig+0x1ae>
 8002eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ece:	d811      	bhi.n	8002ef4 <UART_SetConfig+0x1b4>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <UART_SetConfig+0x19c>
 8002ed4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed8:	d006      	beq.n	8002ee8 <UART_SetConfig+0x1a8>
 8002eda:	e00b      	b.n	8002ef4 <UART_SetConfig+0x1b4>
 8002edc:	2300      	movs	r3, #0
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e037      	b.n	8002f52 <UART_SetConfig+0x212>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	77fb      	strb	r3, [r7, #31]
 8002ee6:	e034      	b.n	8002f52 <UART_SetConfig+0x212>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e031      	b.n	8002f52 <UART_SetConfig+0x212>
 8002eee:	2308      	movs	r3, #8
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e02e      	b.n	8002f52 <UART_SetConfig+0x212>
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e02b      	b.n	8002f52 <UART_SetConfig+0x212>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a33      	ldr	r2, [pc, #204]	@ (8002fcc <UART_SetConfig+0x28c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d124      	bne.n	8002f4e <UART_SetConfig+0x20e>
 8002f04:	4b2d      	ldr	r3, [pc, #180]	@ (8002fbc <UART_SetConfig+0x27c>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002f0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f10:	d011      	beq.n	8002f36 <UART_SetConfig+0x1f6>
 8002f12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f16:	d817      	bhi.n	8002f48 <UART_SetConfig+0x208>
 8002f18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f1c:	d011      	beq.n	8002f42 <UART_SetConfig+0x202>
 8002f1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f22:	d811      	bhi.n	8002f48 <UART_SetConfig+0x208>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <UART_SetConfig+0x1f0>
 8002f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f2c:	d006      	beq.n	8002f3c <UART_SetConfig+0x1fc>
 8002f2e:	e00b      	b.n	8002f48 <UART_SetConfig+0x208>
 8002f30:	2300      	movs	r3, #0
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e00d      	b.n	8002f52 <UART_SetConfig+0x212>
 8002f36:	2302      	movs	r3, #2
 8002f38:	77fb      	strb	r3, [r7, #31]
 8002f3a:	e00a      	b.n	8002f52 <UART_SetConfig+0x212>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e007      	b.n	8002f52 <UART_SetConfig+0x212>
 8002f42:	2308      	movs	r3, #8
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e004      	b.n	8002f52 <UART_SetConfig+0x212>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e001      	b.n	8002f52 <UART_SetConfig+0x212>
 8002f4e:	2310      	movs	r3, #16
 8002f50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f5a:	d16b      	bne.n	8003034 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d838      	bhi.n	8002fd4 <UART_SetConfig+0x294>
 8002f62:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <UART_SetConfig+0x228>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002f8d 	.word	0x08002f8d
 8002f6c:	08002f95 	.word	0x08002f95
 8002f70:	08002f9d 	.word	0x08002f9d
 8002f74:	08002fd5 	.word	0x08002fd5
 8002f78:	08002fa3 	.word	0x08002fa3
 8002f7c:	08002fd5 	.word	0x08002fd5
 8002f80:	08002fd5 	.word	0x08002fd5
 8002f84:	08002fd5 	.word	0x08002fd5
 8002f88:	08002fab 	.word	0x08002fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7ff f8e0 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8002f90:	61b8      	str	r0, [r7, #24]
        break;
 8002f92:	e024      	b.n	8002fde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f94:	f7ff f8fe 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8002f98:	61b8      	str	r0, [r7, #24]
        break;
 8002f9a:	e020      	b.n	8002fde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <UART_SetConfig+0x290>)
 8002f9e:	61bb      	str	r3, [r7, #24]
        break;
 8002fa0:	e01d      	b.n	8002fde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa2:	f7ff f875 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8002fa6:	61b8      	str	r0, [r7, #24]
        break;
 8002fa8:	e019      	b.n	8002fde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fae:	61bb      	str	r3, [r7, #24]
        break;
 8002fb0:	e015      	b.n	8002fde <UART_SetConfig+0x29e>
 8002fb2:	bf00      	nop
 8002fb4:	efff69f3 	.word	0xefff69f3
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	40004800 	.word	0x40004800
 8002fc8:	40004c00 	.word	0x40004c00
 8002fcc:	40005000 	.word	0x40005000
 8002fd0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	77bb      	strb	r3, [r7, #30]
        break;
 8002fdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d073      	beq.n	80030cc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	005a      	lsls	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	441a      	add	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b0f      	cmp	r3, #15
 8002ffe:	d916      	bls.n	800302e <UART_SetConfig+0x2ee>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003006:	d212      	bcs.n	800302e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	b29b      	uxth	r3, r3
 800300c:	f023 030f 	bic.w	r3, r3, #15
 8003010:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	b29b      	uxth	r3, r3
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	b29a      	uxth	r2, r3
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	4313      	orrs	r3, r2
 8003022:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	89fa      	ldrh	r2, [r7, #14]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	e04e      	b.n	80030cc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	77bb      	strb	r3, [r7, #30]
 8003032:	e04b      	b.n	80030cc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003034:	7ffb      	ldrb	r3, [r7, #31]
 8003036:	2b08      	cmp	r3, #8
 8003038:	d827      	bhi.n	800308a <UART_SetConfig+0x34a>
 800303a:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <UART_SetConfig+0x300>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003065 	.word	0x08003065
 8003044:	0800306d 	.word	0x0800306d
 8003048:	08003075 	.word	0x08003075
 800304c:	0800308b 	.word	0x0800308b
 8003050:	0800307b 	.word	0x0800307b
 8003054:	0800308b 	.word	0x0800308b
 8003058:	0800308b 	.word	0x0800308b
 800305c:	0800308b 	.word	0x0800308b
 8003060:	08003083 	.word	0x08003083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003064:	f7ff f874 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8003068:	61b8      	str	r0, [r7, #24]
        break;
 800306a:	e013      	b.n	8003094 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800306c:	f7ff f892 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8003070:	61b8      	str	r0, [r7, #24]
        break;
 8003072:	e00f      	b.n	8003094 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <UART_SetConfig+0x3a4>)
 8003076:	61bb      	str	r3, [r7, #24]
        break;
 8003078:	e00c      	b.n	8003094 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f809 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800307e:	61b8      	str	r0, [r7, #24]
        break;
 8003080:	e008      	b.n	8003094 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003086:	61bb      	str	r3, [r7, #24]
        break;
 8003088:	e004      	b.n	8003094 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	77bb      	strb	r3, [r7, #30]
        break;
 8003092:	bf00      	nop
    }

    if (pclk != 0U)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d018      	beq.n	80030cc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	085a      	lsrs	r2, r3, #1
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	441a      	add	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b0f      	cmp	r3, #15
 80030b2:	d909      	bls.n	80030c8 <UART_SetConfig+0x388>
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ba:	d205      	bcs.n	80030c8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	b29a      	uxth	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	e001      	b.n	80030cc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80030d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	007a1200 	.word	0x007a1200

080030e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01a      	beq.n	80031fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031e6:	d10a      	bne.n	80031fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
  }
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b098      	sub	sp, #96	@ 0x60
 8003230:	af02      	add	r7, sp, #8
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800323c:	f7fd fa1c 	bl	8000678 <HAL_GetTick>
 8003240:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b08      	cmp	r3, #8
 800324e:	d12e      	bne.n	80032ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003258:	2200      	movs	r2, #0
 800325a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f88c 	bl	800337c <UART_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d021      	beq.n	80032ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800327e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003288:	647b      	str	r3, [r7, #68]	@ 0x44
 800328a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800328e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e6      	bne.n	800326a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e062      	b.n	8003374 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d149      	bne.n	8003350 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c4:	2200      	movs	r2, #0
 80032c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f856 	bl	800337c <UART_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d03c      	beq.n	8003350 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	623b      	str	r3, [r7, #32]
   return(result);
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e6      	bne.n	80032d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3308      	adds	r3, #8
 800330e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	60fb      	str	r3, [r7, #12]
   return(result);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3308      	adds	r3, #8
 8003326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003328:	61fa      	str	r2, [r7, #28]
 800332a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	69b9      	ldr	r1, [r7, #24]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	617b      	str	r3, [r7, #20]
   return(result);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e5      	bne.n	8003308 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e011      	b.n	8003374 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3758      	adds	r7, #88	@ 0x58
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338c:	e04f      	b.n	800342e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d04b      	beq.n	800342e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003396:	f7fd f96f 	bl	8000678 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <UART_WaitOnFlagUntilTimeout+0x30>
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e04e      	b.n	800344e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d037      	beq.n	800342e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b80      	cmp	r3, #128	@ 0x80
 80033c2:	d034      	beq.n	800342e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b40      	cmp	r3, #64	@ 0x40
 80033c8:	d031      	beq.n	800342e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d110      	bne.n	80033fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2208      	movs	r2, #8
 80033de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f8ff 	bl	80035e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2208      	movs	r2, #8
 80033ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e029      	b.n	800344e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003408:	d111      	bne.n	800342e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f8e5 	bl	80035e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e00f      	b.n	800344e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	429a      	cmp	r2, r3
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	429a      	cmp	r2, r3
 800344a:	d0a0      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003458:	b480      	push	{r7}
 800345a:	b097      	sub	sp, #92	@ 0x5c
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800348a:	d10e      	bne.n	80034aa <UART_Start_Receive_IT+0x52>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <UART_Start_Receive_IT+0x48>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800349a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800349e:	e02d      	b.n	80034fc <UART_Start_Receive_IT+0xa4>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	22ff      	movs	r2, #255	@ 0xff
 80034a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034a8:	e028      	b.n	80034fc <UART_Start_Receive_IT+0xa4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <UART_Start_Receive_IT+0x76>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d104      	bne.n	80034c4 <UART_Start_Receive_IT+0x6c>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	22ff      	movs	r2, #255	@ 0xff
 80034be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034c2:	e01b      	b.n	80034fc <UART_Start_Receive_IT+0xa4>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	227f      	movs	r2, #127	@ 0x7f
 80034c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034cc:	e016      	b.n	80034fc <UART_Start_Receive_IT+0xa4>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034d6:	d10d      	bne.n	80034f4 <UART_Start_Receive_IT+0x9c>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <UART_Start_Receive_IT+0x92>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	227f      	movs	r2, #127	@ 0x7f
 80034e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034e8:	e008      	b.n	80034fc <UART_Start_Receive_IT+0xa4>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	223f      	movs	r2, #63	@ 0x3f
 80034ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034f2:	e003      	b.n	80034fc <UART_Start_Receive_IT+0xa4>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2222      	movs	r2, #34	@ 0x22
 8003508:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800351c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	657b      	str	r3, [r7, #84]	@ 0x54
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800352c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800352e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800353a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003548:	d107      	bne.n	800355a <UART_Start_Receive_IT+0x102>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a21      	ldr	r2, [pc, #132]	@ (80035dc <UART_Start_Receive_IT+0x184>)
 8003556:	669a      	str	r2, [r3, #104]	@ 0x68
 8003558:	e002      	b.n	8003560 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a20      	ldr	r2, [pc, #128]	@ (80035e0 <UART_Start_Receive_IT+0x188>)
 800355e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d019      	beq.n	800359c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800357c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34
 8003588:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800358c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e6      	bne.n	8003568 <UART_Start_Receive_IT+0x110>
 800359a:	e018      	b.n	80035ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	613b      	str	r3, [r7, #16]
   return(result);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f043 0320 	orr.w	r3, r3, #32
 80035b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ba:	623b      	str	r3, [r7, #32]
 80035bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	69f9      	ldr	r1, [r7, #28]
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e6      	bne.n	800359c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	375c      	adds	r7, #92	@ 0x5c
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	080038d5 	.word	0x080038d5
 80035e0:	0800372d 	.word	0x0800372d

080035e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b095      	sub	sp, #84	@ 0x54
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800360a:	643b      	str	r3, [r7, #64]	@ 0x40
 800360c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003610:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e6      	bne.n	80035ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3308      	adds	r3, #8
 8003624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	61fb      	str	r3, [r7, #28]
   return(result);
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800363e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e5      	bne.n	800361e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003656:	2b01      	cmp	r3, #1
 8003658:	d118      	bne.n	800368c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	60bb      	str	r3, [r7, #8]
   return(result);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f023 0310 	bic.w	r3, r3, #16
 800366e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6979      	ldr	r1, [r7, #20]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	613b      	str	r3, [r7, #16]
   return(result);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e6      	bne.n	800365a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036a0:	bf00      	nop
 80036a2:	3754      	adds	r7, #84	@ 0x54
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff fb22 	bl	8002d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	6979      	ldr	r1, [r7, #20]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	613b      	str	r3, [r7, #16]
   return(result);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e6      	bne.n	80036e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff faee 	bl	8002d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003724:	bf00      	nop
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b09c      	sub	sp, #112	@ 0x70
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800373a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003744:	2b22      	cmp	r3, #34	@ 0x22
 8003746:	f040 80b9 	bne.w	80038bc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003750:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003754:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003758:	b2d9      	uxtb	r1, r3
 800375a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800375e:	b2da      	uxtb	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003764:	400a      	ands	r2, r1
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	f040 809c 	bne.w	80038cc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1e6      	bne.n	8003794 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3308      	adds	r3, #8
 80037cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3308      	adds	r3, #8
 80037e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80037e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80037e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e5      	bne.n	80037c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d018      	beq.n	800384e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	623b      	str	r3, [r7, #32]
   return(result);
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003830:	663b      	str	r3, [r7, #96]	@ 0x60
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800383a:	633b      	str	r3, [r7, #48]	@ 0x30
 800383c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e6      	bne.n	800381c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	2b01      	cmp	r3, #1
 8003854:	d12e      	bne.n	80038b4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	60fb      	str	r3, [r7, #12]
   return(result);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f023 0310 	bic.w	r3, r3, #16
 8003870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	617b      	str	r3, [r7, #20]
   return(result);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e6      	bne.n	800385c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d103      	bne.n	80038a4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2210      	movs	r2, #16
 80038a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fa3b 	bl	8002d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038b2:	e00b      	b.n	80038cc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fc fc8d 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 80038ba:	e007      	b.n	80038cc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	619a      	str	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	3770      	adds	r7, #112	@ 0x70
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b09c      	sub	sp, #112	@ 0x70
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80038e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ec:	2b22      	cmp	r3, #34	@ 0x22
 80038ee:	f040 80b9 	bne.w	8003a64 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80038f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003900:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003902:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003906:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800390a:	4013      	ands	r3, r2
 800390c:	b29a      	uxth	r2, r3
 800390e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003910:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	1c9a      	adds	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 809c 	bne.w	8003a74 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800394a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800394c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003950:	667b      	str	r3, [r7, #100]	@ 0x64
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800395a:	657b      	str	r3, [r7, #84]	@ 0x54
 800395c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003960:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e6      	bne.n	800393c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	663b      	str	r3, [r7, #96]	@ 0x60
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3308      	adds	r3, #8
 800398c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800398e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d018      	beq.n	80039f6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e6      	bne.n	80039c4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d12e      	bne.n	8003a5c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f023 0310 	bic.w	r3, r3, #16
 8003a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6979      	ldr	r1, [r7, #20]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e6      	bne.n	8003a04 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d103      	bne.n	8003a4c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2210      	movs	r2, #16
 8003a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff f967 	bl	8002d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a5a:	e00b      	b.n	8003a74 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fc fbb9 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8003a62:	e007      	b.n	8003a74 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	619a      	str	r2, [r3, #24]
}
 8003a74:	bf00      	nop
 8003a76:	3770      	adds	r7, #112	@ 0x70
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <memset>:
 8003a90:	4402      	add	r2, r0
 8003a92:	4603      	mov	r3, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <__libc_init_array>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ad8 <__libc_init_array+0x38>)
 8003aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8003adc <__libc_init_array+0x3c>)
 8003aa6:	1b64      	subs	r4, r4, r5
 8003aa8:	10a4      	asrs	r4, r4, #2
 8003aaa:	2600      	movs	r6, #0
 8003aac:	42a6      	cmp	r6, r4
 8003aae:	d109      	bne.n	8003ac4 <__libc_init_array+0x24>
 8003ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ae0 <__libc_init_array+0x40>)
 8003ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ae4 <__libc_init_array+0x44>)
 8003ab4:	f000 f826 	bl	8003b04 <_init>
 8003ab8:	1b64      	subs	r4, r4, r5
 8003aba:	10a4      	asrs	r4, r4, #2
 8003abc:	2600      	movs	r6, #0
 8003abe:	42a6      	cmp	r6, r4
 8003ac0:	d105      	bne.n	8003ace <__libc_init_array+0x2e>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac8:	4798      	blx	r3
 8003aca:	3601      	adds	r6, #1
 8003acc:	e7ee      	b.n	8003aac <__libc_init_array+0xc>
 8003ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad2:	4798      	blx	r3
 8003ad4:	3601      	adds	r6, #1
 8003ad6:	e7f2      	b.n	8003abe <__libc_init_array+0x1e>
 8003ad8:	08003b54 	.word	0x08003b54
 8003adc:	08003b54 	.word	0x08003b54
 8003ae0:	08003b54 	.word	0x08003b54
 8003ae4:	08003b58 	.word	0x08003b58

08003ae8 <memcpy>:
 8003ae8:	440a      	add	r2, r1
 8003aea:	4291      	cmp	r1, r2
 8003aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8003af0:	d100      	bne.n	8003af4 <memcpy+0xc>
 8003af2:	4770      	bx	lr
 8003af4:	b510      	push	{r4, lr}
 8003af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003afe:	4291      	cmp	r1, r2
 8003b00:	d1f9      	bne.n	8003af6 <memcpy+0xe>
 8003b02:	bd10      	pop	{r4, pc}

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
