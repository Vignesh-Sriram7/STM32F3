
UART_Controlled_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003684  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003818  08003818  00004818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a4  080038a4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080038a4  080038a4  000048a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038ac  080038ac  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038ac  080038ac  000048ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038b0  080038b0  000048b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a77e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a90  00000000  00000000  0000f7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00011250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ab  00000000  00000000  000119b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb68  00000000  00000000  00011f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae3f  00000000  00000000  00031acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bffbd  00000000  00000000  0003c90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc8c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d00  00000000  00000000  000fc90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000fe60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003800 	.word	0x08003800

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003800 	.word	0x08003800

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b590      	push	{r4, r7, lr}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fe:	f000 fa0b 	bl	8000618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000202:	f000 f86d 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000206:	f000 f8ed 	bl	80003e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800020a:	f000 f8bb 	bl	8000384 <MX_USART2_UART_Init>

	      command_ready = 0;  // reset flag after processing
	    }*/
	  uint8_t received_char;
	      // Receive one byte at a time (blocking)
	      HAL_UART_Receive(&huart2, &received_char, 1, HAL_MAX_DELAY);
 800020e:	1df9      	adds	r1, r7, #7
 8000210:	f04f 33ff 	mov.w	r3, #4294967295
 8000214:	2201      	movs	r2, #1
 8000216:	4829      	ldr	r0, [pc, #164]	@ (80002bc <main+0xc4>)
 8000218:	f002 fabd 	bl	8002796 <HAL_UART_Receive>

	      if (received_char == '\r' || received_char == '\n')
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	2b0d      	cmp	r3, #13
 8000220:	d002      	beq.n	8000228 <main+0x30>
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	2b0a      	cmp	r3, #10
 8000226:	d13c      	bne.n	80002a2 <main+0xaa>
	      {
	          rxBuffer[rxIndex] = '\0';  // Null-terminate the string
 8000228:	4b25      	ldr	r3, [pc, #148]	@ (80002c0 <main+0xc8>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a25      	ldr	r2, [pc, #148]	@ (80002c4 <main+0xcc>)
 800022e:	2100      	movs	r1, #0
 8000230:	54d1      	strb	r1, [r2, r3]
	          rxIndex = 0;               // Reset index for next command
 8000232:	4b23      	ldr	r3, [pc, #140]	@ (80002c0 <main+0xc8>)
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]

	          if (strcmp(rxBuffer, "on") == 0)
 8000238:	4923      	ldr	r1, [pc, #140]	@ (80002c8 <main+0xd0>)
 800023a:	4822      	ldr	r0, [pc, #136]	@ (80002c4 <main+0xcc>)
 800023c:	f7ff ffca 	bl	80001d4 <strcmp>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d109      	bne.n	800025a <main+0x62>
	          {
	              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2120      	movs	r1, #32
 800024a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800024e:	f000 fd61 	bl	8000d14 <HAL_GPIO_WritePin>
	              msg = "LED turned ON\r\n";
 8000252:	4b1e      	ldr	r3, [pc, #120]	@ (80002cc <main+0xd4>)
 8000254:	4a1e      	ldr	r2, [pc, #120]	@ (80002d0 <main+0xd8>)
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	e013      	b.n	8000282 <main+0x8a>
	          }
	          else if (strcmp(rxBuffer, "off") == 0)
 800025a:	491e      	ldr	r1, [pc, #120]	@ (80002d4 <main+0xdc>)
 800025c:	4819      	ldr	r0, [pc, #100]	@ (80002c4 <main+0xcc>)
 800025e:	f7ff ffb9 	bl	80001d4 <strcmp>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d109      	bne.n	800027c <main+0x84>
	          {
	              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2120      	movs	r1, #32
 800026c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000270:	f000 fd50 	bl	8000d14 <HAL_GPIO_WritePin>
	              msg = "LED turned OFF\r\n";
 8000274:	4b15      	ldr	r3, [pc, #84]	@ (80002cc <main+0xd4>)
 8000276:	4a18      	ldr	r2, [pc, #96]	@ (80002d8 <main+0xe0>)
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	e002      	b.n	8000282 <main+0x8a>
	          }
	          else
	          {
	              msg = "Invalid command. Type 'on' or 'off'.\r\n";
 800027c:	4b13      	ldr	r3, [pc, #76]	@ (80002cc <main+0xd4>)
 800027e:	4a17      	ldr	r2, [pc, #92]	@ (80002dc <main+0xe4>)
 8000280:	601a      	str	r2, [r3, #0]
	          }

	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000282:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <main+0xd4>)
 8000284:	681c      	ldr	r4, [r3, #0]
 8000286:	4b11      	ldr	r3, [pc, #68]	@ (80002cc <main+0xd4>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ffac 	bl	80001e8 <strlen>
 8000290:	4603      	mov	r3, r0
 8000292:	b29a      	uxth	r2, r3
 8000294:	f04f 33ff 	mov.w	r3, #4294967295
 8000298:	4621      	mov	r1, r4
 800029a:	4808      	ldr	r0, [pc, #32]	@ (80002bc <main+0xc4>)
 800029c:	f002 f9f2 	bl	8002684 <HAL_UART_Transmit>
 80002a0:	e00b      	b.n	80002ba <main+0xc2>
	      }
	      else
	      {
	          if (rxIndex < RX_BUFFER_SIZE - 1)
 80002a2:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <main+0xc8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b08      	cmp	r3, #8
 80002a8:	dcb1      	bgt.n	800020e <main+0x16>
	          {
	              rxBuffer[rxIndex++] = received_char;
 80002aa:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <main+0xc8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	4903      	ldr	r1, [pc, #12]	@ (80002c0 <main+0xc8>)
 80002b2:	600a      	str	r2, [r1, #0]
 80002b4:	79f9      	ldrb	r1, [r7, #7]
 80002b6:	4a03      	ldr	r2, [pc, #12]	@ (80002c4 <main+0xcc>)
 80002b8:	54d1      	strb	r1, [r2, r3]
  {
 80002ba:	e7a8      	b.n	800020e <main+0x16>
 80002bc:	20000028 	.word	0x20000028
 80002c0:	200000bc 	.word	0x200000bc
 80002c4:	200000b0 	.word	0x200000b0
 80002c8:	08003818 	.word	0x08003818
 80002cc:	200000c0 	.word	0x200000c0
 80002d0:	0800381c 	.word	0x0800381c
 80002d4:	0800382c 	.word	0x0800382c
 80002d8:	08003830 	.word	0x08003830
 80002dc:	08003844 	.word	0x08003844

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b0a6      	sub	sp, #152	@ 0x98
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002ea:	2228      	movs	r2, #40	@ 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 fa59 	bl	80037a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2258      	movs	r2, #88	@ 0x58
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f003 fa4b 	bl	80037a6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000310:	2302      	movs	r3, #2
 8000312:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	2301      	movs	r3, #1
 8000316:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000318:	2310      	movs	r3, #16
 800031a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031e:	2300      	movs	r3, #0
 8000320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fd0b 	bl	8000d44 <HAL_RCC_OscConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000334:	f000 f886 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	230f      	movs	r3, #15
 800033a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033c:	2300      	movs	r3, #0
 800033e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fd1a 	bl	8001d8c <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800035e:	f000 f871 	bl	8000444 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000362:	2302      	movs	r3, #2
 8000364:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f001 ff1f 	bl	80021b0 <HAL_RCCEx_PeriphCLKConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000378:	f000 f864 	bl	8000444 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3798      	adds	r7, #152	@ 0x98
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000388:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 800038a:	4a15      	ldr	r2, [pc, #84]	@ (80003e0 <MX_USART2_UART_Init+0x5c>)
 800038c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800038e:	4b13      	ldr	r3, [pc, #76]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 8000390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c6:	4805      	ldr	r0, [pc, #20]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003c8:	f002 f90e 	bl	80025e8 <HAL_UART_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003d2:	f000 f837 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000028 	.word	0x20000028
 80003e0:	40004400 	.word	0x40004400

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <MX_GPIO_Init+0x5c>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a10      	ldr	r2, [pc, #64]	@ (8000440 <MX_GPIO_Init+0x5c>)
 80003fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000402:	6153      	str	r3, [r2, #20]
 8000404:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <MX_GPIO_Init+0x5c>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800040c:	603b      	str	r3, [r7, #0]
 800040e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2120      	movs	r1, #32
 8000414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000418:	f000 fc7c 	bl	8000d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800041c:	2320      	movs	r3, #32
 800041e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4619      	mov	r1, r3
 8000430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000434:	f000 fae4 	bl	8000a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000438:	bf00      	nop
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <Error_Handler+0x8>

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <HAL_MspInit+0x44>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <HAL_MspInit+0x44>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <HAL_MspInit+0x44>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <HAL_MspInit+0x44>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000478:	61d3      	str	r3, [r2, #28]
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <HAL_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	@ 0x28
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000524 <HAL_UART_MspInit+0x8c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d130      	bne.n	800051c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <HAL_UART_MspInit+0x90>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a1a      	ldr	r2, [pc, #104]	@ (8000528 <HAL_UART_MspInit+0x90>)
 80004c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <HAL_UART_MspInit+0x90>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <HAL_UART_MspInit+0x90>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a14      	ldr	r2, [pc, #80]	@ (8000528 <HAL_UART_MspInit+0x90>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <HAL_UART_MspInit+0x90>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004ea:	230c      	movs	r3, #12
 80004ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	2302      	movs	r3, #2
 80004f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f6:	2303      	movs	r3, #3
 80004f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004fa:	2307      	movs	r3, #7
 80004fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4619      	mov	r1, r3
 8000504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000508:	f000 fa7a 	bl	8000a00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	2026      	movs	r0, #38	@ 0x26
 8000512:	f000 f9c2 	bl	800089a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000516:	2026      	movs	r0, #38	@ 0x26
 8000518:	f000 f9db 	bl	80008d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800051c:	bf00      	nop
 800051e:	3728      	adds	r7, #40	@ 0x28
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40004400 	.word	0x40004400
 8000528:	40021000 	.word	0x40021000

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <NMI_Handler+0x4>

08000534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <MemManage_Handler+0x4>

08000544 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <UsageFault_Handler+0x4>

08000554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000582:	f000 f88f 	bl	80006a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000590:	4802      	ldr	r0, [pc, #8]	@ (800059c <USART2_IRQHandler+0x10>)
 8000592:	f002 f9c9 	bl	8002928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000028 	.word	0x20000028

080005a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <SystemInit+0x20>)
 80005a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005aa:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <SystemInit+0x20>)
 80005ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005fc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c8:	f7ff ffea 	bl	80005a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480c      	ldr	r0, [pc, #48]	@ (8000600 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ce:	490d      	ldr	r1, [pc, #52]	@ (8000604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <LoopForever+0xe>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000610 <LoopForever+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005f2:	f003 f8e1 	bl	80037b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005f6:	f7ff fdff 	bl	80001f8 <main>

080005fa <LoopForever>:

LoopForever:
    b LoopForever
 80005fa:	e7fe      	b.n	80005fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000608:	080038b4 	.word	0x080038b4
  ldr r2, =_sbss
 800060c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000610:	200000c8 	.word	0x200000c8

08000614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_2_IRQHandler>
	...

08000618 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <HAL_Init+0x28>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a07      	ldr	r2, [pc, #28]	@ (8000640 <HAL_Init+0x28>)
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f92b 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062e:	200f      	movs	r0, #15
 8000630:	f000 f808 	bl	8000644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f7ff ff0c 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40022000 	.word	0x40022000

08000644 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HAL_InitTick+0x54>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <HAL_InitTick+0x58>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065a:	fbb3 f3f1 	udiv	r3, r3, r1
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f943 	bl	80008ee <HAL_SYSTICK_Config>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	e00e      	b.n	8000690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d80a      	bhi.n	800068e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	f04f 30ff 	mov.w	r0, #4294967295
 8000680:	f000 f90b 	bl	800089a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000684:	4a06      	ldr	r2, [pc, #24]	@ (80006a0 <HAL_InitTick+0x5c>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800068a:	2300      	movs	r3, #0
 800068c:	e000      	b.n	8000690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000000 	.word	0x20000000
 800069c:	20000008 	.word	0x20000008
 80006a0:	20000004 	.word	0x20000004

080006a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <HAL_IncTick+0x20>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <HAL_IncTick+0x24>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <HAL_IncTick+0x24>)
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000008 	.word	0x20000008
 80006c8:	200000c4 	.word	0x200000c4

080006cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80006d0:	4b03      	ldr	r3, [pc, #12]	@ (80006e0 <HAL_GetTick+0x14>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	200000c4 	.word	0x200000c4

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	@ (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db0b      	blt.n	8000772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 021f 	and.w	r2, r3, #31
 8000760:	4907      	ldr	r1, [pc, #28]	@ (8000780 <__NVIC_EnableIRQ+0x38>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	095b      	lsrs	r3, r3, #5
 8000768:	2001      	movs	r0, #1
 800076a:	fa00 f202 	lsl.w	r2, r0, r2
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	@ (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	@ (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	@ 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ff8e 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff29 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ac:	f7ff ff3e 	bl	800072c <__NVIC_GetPriorityGrouping>
 80008b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	6978      	ldr	r0, [r7, #20]
 80008b8:	f7ff ff8e 	bl	80007d8 <NVIC_EncodePriority>
 80008bc:	4602      	mov	r2, r0
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>
}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff31 	bl	8000748 <__NVIC_EnableIRQ>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffa2 	bl	8000840 <SysTick_Config>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	e02e      	b.n	8000976 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800091e:	2b02      	cmp	r3, #2
 8000920:	d008      	beq.n	8000934 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2204      	movs	r2, #4
 8000926:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	e020      	b.n	8000976 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f022 020e 	bic.w	r2, r2, #14
 8000942:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f022 0201 	bic.w	r2, r2, #1
 8000952:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800095c:	2101      	movs	r1, #1
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000994:	2b02      	cmp	r3, #2
 8000996:	d005      	beq.n	80009a4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2204      	movs	r2, #4
 800099c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e027      	b.n	80009f4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f022 020e 	bic.w	r2, r2, #14
 80009b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f022 0201 	bic.w	r2, r2, #1
 80009c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009cc:	2101      	movs	r1, #1
 80009ce:	fa01 f202 	lsl.w	r2, r1, r2
 80009d2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2201      	movs	r2, #1
 80009d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d003      	beq.n	80009f4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	4798      	blx	r3
    }
  }
  return status;
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0e:	e160      	b.n	8000cd2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 8152 	beq.w	8000ccc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d005      	beq.n	8000a40 <HAL_GPIO_Init+0x40>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d130      	bne.n	8000aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a76:	2201      	movs	r2, #1
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	f003 0201 	and.w	r2, r3, #1
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d017      	beq.n	8000ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d123      	bne.n	8000b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	08da      	lsrs	r2, r3, #3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3208      	adds	r2, #8
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	220f      	movs	r2, #15
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	691a      	ldr	r2, [r3, #16]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	08da      	lsrs	r2, r3, #3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	6939      	ldr	r1, [r7, #16]
 8000b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0203 	and.w	r2, r3, #3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 80ac 	beq.w	8000ccc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b74:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a5d      	ldr	r2, [pc, #372]	@ (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b8c:	4a59      	ldr	r2, [pc, #356]	@ (8000cf4 <HAL_GPIO_Init+0x2f4>)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bb6:	d025      	beq.n	8000c04 <HAL_GPIO_Init+0x204>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a4f      	ldr	r2, [pc, #316]	@ (8000cf8 <HAL_GPIO_Init+0x2f8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d01f      	beq.n	8000c00 <HAL_GPIO_Init+0x200>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a4e      	ldr	r2, [pc, #312]	@ (8000cfc <HAL_GPIO_Init+0x2fc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d019      	beq.n	8000bfc <HAL_GPIO_Init+0x1fc>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a4d      	ldr	r2, [pc, #308]	@ (8000d00 <HAL_GPIO_Init+0x300>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <HAL_GPIO_Init+0x1f8>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a4c      	ldr	r2, [pc, #304]	@ (8000d04 <HAL_GPIO_Init+0x304>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00d      	beq.n	8000bf4 <HAL_GPIO_Init+0x1f4>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a4b      	ldr	r2, [pc, #300]	@ (8000d08 <HAL_GPIO_Init+0x308>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_Init+0x1f0>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a4a      	ldr	r2, [pc, #296]	@ (8000d0c <HAL_GPIO_Init+0x30c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_GPIO_Init+0x1ec>
 8000be8:	2306      	movs	r3, #6
 8000bea:	e00c      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000bec:	2307      	movs	r3, #7
 8000bee:	e00a      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	e008      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000c04:	2300      	movs	r3, #0
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c16:	4937      	ldr	r1, [pc, #220]	@ (8000cf4 <HAL_GPIO_Init+0x2f4>)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c24:	4b3a      	ldr	r3, [pc, #232]	@ (8000d10 <HAL_GPIO_Init+0x310>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c48:	4a31      	ldr	r2, [pc, #196]	@ (8000d10 <HAL_GPIO_Init+0x310>)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c4e:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <HAL_GPIO_Init+0x310>)
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c72:	4a27      	ldr	r2, [pc, #156]	@ (8000d10 <HAL_GPIO_Init+0x310>)
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c78:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <HAL_GPIO_Init+0x310>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <HAL_GPIO_Init+0x310>)
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <HAL_GPIO_Init+0x310>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <HAL_GPIO_Init+0x310>)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f47f ae97 	bne.w	8000a10 <HAL_GPIO_Init+0x10>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	371c      	adds	r7, #28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000800 	.word	0x48000800
 8000d00:	48000c00 	.word	0x48000c00
 8000d04:	48001000 	.word	0x48001000
 8000d08:	48001400 	.word	0x48001400
 8000d0c:	48001800 	.word	0x48001800
 8000d10:	40010400 	.word	0x40010400

08000d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
 8000d20:	4613      	mov	r3, r2
 8000d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d24:	787b      	ldrb	r3, [r7, #1]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d30:	e002      	b.n	8000d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	f001 b80a 	b.w	8001d7e <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8161 	beq.w	8001042 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d80:	4bae      	ldr	r3, [pc, #696]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d00c      	beq.n	8000da6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8c:	4bab      	ldr	r3, [pc, #684]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d157      	bne.n	8000e48 <HAL_RCC_OscConfig+0x104>
 8000d98:	4ba8      	ldr	r3, [pc, #672]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000da4:	d150      	bne.n	8000e48 <HAL_RCC_OscConfig+0x104>
 8000da6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000daa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbe:	fab3 f383 	clz	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dc6:	d802      	bhi.n	8000dce <HAL_RCC_OscConfig+0x8a>
 8000dc8:	4b9c      	ldr	r3, [pc, #624]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	e015      	b.n	8000dfa <HAL_RCC_OscConfig+0xb6>
 8000dce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dd2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000dda:	fa93 f3a3 	rbit	r3, r3
 8000dde:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000de2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000de6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000dea:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000dee:	fa93 f3a3 	rbit	r3, r3
 8000df2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000df6:	4b91      	ldr	r3, [pc, #580]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dfe:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e02:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000e06:	fa92 f2a2 	rbit	r2, r2
 8000e0a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000e0e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e12:	fab2 f282 	clz	r2, r2
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	f042 0220 	orr.w	r2, r2, #32
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	f002 021f 	and.w	r2, r2, #31
 8000e22:	2101      	movs	r1, #1
 8000e24:	fa01 f202 	lsl.w	r2, r1, r2
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8108 	beq.w	8001040 <HAL_RCC_OscConfig+0x2fc>
 8000e30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 80ff 	bne.w	8001040 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f000 bf9b 	b.w	8001d7e <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e58:	d106      	bne.n	8000e68 <HAL_RCC_OscConfig+0x124>
 8000e5a:	4b78      	ldr	r3, [pc, #480]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a77      	ldr	r2, [pc, #476]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e036      	b.n	8000ed6 <HAL_RCC_OscConfig+0x192>
 8000e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10c      	bne.n	8000e92 <HAL_RCC_OscConfig+0x14e>
 8000e78:	4b70      	ldr	r3, [pc, #448]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6f      	ldr	r2, [pc, #444]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b6d      	ldr	r3, [pc, #436]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a6c      	ldr	r2, [pc, #432]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e021      	b.n	8000ed6 <HAL_RCC_OscConfig+0x192>
 8000e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ea2:	d10c      	bne.n	8000ebe <HAL_RCC_OscConfig+0x17a>
 8000ea4:	4b65      	ldr	r3, [pc, #404]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a64      	ldr	r2, [pc, #400]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000eaa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b62      	ldr	r3, [pc, #392]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a61      	ldr	r2, [pc, #388]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e00b      	b.n	8000ed6 <HAL_RCC_OscConfig+0x192>
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	4b5c      	ldr	r3, [pc, #368]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a5b      	ldr	r2, [pc, #364]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d054      	beq.n	8000f90 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fbf1 	bl	80006cc <HAL_GetTick>
 8000eea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eee:	e00a      	b.n	8000f06 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fbec 	bl	80006cc <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b64      	cmp	r3, #100	@ 0x64
 8000efe:	d902      	bls.n	8000f06 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f000 bf3c 	b.w	8001d7e <HAL_RCC_OscConfig+0x103a>
 8000f06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f0a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000f1a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f26:	d802      	bhi.n	8000f2e <HAL_RCC_OscConfig+0x1ea>
 8000f28:	4b44      	ldr	r3, [pc, #272]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	e015      	b.n	8000f5a <HAL_RCC_OscConfig+0x216>
 8000f2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f32:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000f42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f46:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f4a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f56:	4b39      	ldr	r3, [pc, #228]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f5e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000f62:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f66:	fa92 f2a2 	rbit	r2, r2
 8000f6a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000f6e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f72:	fab2 f282 	clz	r2, r2
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	f042 0220 	orr.w	r2, r2, #32
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	f002 021f 	and.w	r2, r2, #31
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0b0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x1ac>
 8000f8e:	e058      	b.n	8001042 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fb9c 	bl	80006cc <HAL_GetTick>
 8000f94:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f98:	e00a      	b.n	8000fb0 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9a:	f7ff fb97 	bl	80006cc <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	@ 0x64
 8000fa8:	d902      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	f000 bee7 	b.w	8001d7e <HAL_RCC_OscConfig+0x103a>
 8000fb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fb4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000fc4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fd0:	d802      	bhi.n	8000fd8 <HAL_RCC_OscConfig+0x294>
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	e015      	b.n	8001004 <HAL_RCC_OscConfig+0x2c0>
 8000fd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fdc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000fec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000ff4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001000:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <HAL_RCC_OscConfig+0x2f8>)
 8001002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001004:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001008:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800100c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001010:	fa92 f2a2 	rbit	r2, r2
 8001014:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001018:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	f042 0220 	orr.w	r2, r2, #32
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	f002 021f 	and.w	r2, r2, #31
 800102c:	2101      	movs	r1, #1
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1b0      	bne.n	8000f9a <HAL_RCC_OscConfig+0x256>
 8001038:	e003      	b.n	8001042 <HAL_RCC_OscConfig+0x2fe>
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001046:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 816d 	beq.w	8001332 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001058:	4bcd      	ldr	r3, [pc, #820]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001064:	4bca      	ldr	r3, [pc, #808]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b08      	cmp	r3, #8
 800106e:	d16e      	bne.n	800114e <HAL_RCC_OscConfig+0x40a>
 8001070:	4bc7      	ldr	r3, [pc, #796]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800107c:	d167      	bne.n	800114e <HAL_RCC_OscConfig+0x40a>
 800107e:	2302      	movs	r3, #2
 8001080:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001090:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001094:	fab3 f383 	clz	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b3f      	cmp	r3, #63	@ 0x3f
 800109c:	d802      	bhi.n	80010a4 <HAL_RCC_OscConfig+0x360>
 800109e:	4bbc      	ldr	r3, [pc, #752]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	e013      	b.n	80010cc <HAL_RCC_OscConfig+0x388>
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80010b6:	2302      	movs	r3, #2
 80010b8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80010bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80010c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010cc:	2202      	movs	r2, #2
 80010ce:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80010d2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80010d6:	fa92 f2a2 	rbit	r2, r2
 80010da:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80010de:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80010e2:	fab2 f282 	clz	r2, r2
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	f042 0220 	orr.w	r2, r2, #32
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	f002 021f 	and.w	r2, r2, #31
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00a      	beq.n	8001114 <HAL_RCC_OscConfig+0x3d0>
 80010fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001102:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d002      	beq.n	8001114 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	f000 be35 	b.w	8001d7e <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001114:	4b9e      	ldr	r3, [pc, #632]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800111c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001120:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	21f8      	movs	r1, #248	@ 0xf8
 800112a:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001132:	fa91 f1a1 	rbit	r1, r1
 8001136:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800113a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800113e:	fab1 f181 	clz	r1, r1
 8001142:	b2c9      	uxtb	r1, r1
 8001144:	408b      	lsls	r3, r1
 8001146:	4992      	ldr	r1, [pc, #584]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114c:	e0f1      	b.n	8001332 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800114e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001152:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8083 	beq.w	8001266 <HAL_RCC_OscConfig+0x522>
 8001160:	2301      	movs	r3, #1
 8001162:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001172:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001180:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	461a      	mov	r2, r3
 8001188:	2301      	movs	r3, #1
 800118a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fa9e 	bl	80006cc <HAL_GetTick>
 8001190:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	e00a      	b.n	80011ac <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fa99 	bl	80006cc <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d902      	bls.n	80011ac <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	f000 bde9 	b.w	8001d7e <HAL_RCC_OscConfig+0x103a>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80011be:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80011ca:	d802      	bhi.n	80011d2 <HAL_RCC_OscConfig+0x48e>
 80011cc:	4b70      	ldr	r3, [pc, #448]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	e013      	b.n	80011fa <HAL_RCC_OscConfig+0x4b6>
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80011ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80011f6:	4b66      	ldr	r3, [pc, #408]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	2202      	movs	r2, #2
 80011fc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001200:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001204:	fa92 f2a2 	rbit	r2, r2
 8001208:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800120c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001210:	fab2 f282 	clz	r2, r2
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f042 0220 	orr.w	r2, r2, #32
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	f002 021f 	and.w	r2, r2, #31
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0b4      	beq.n	8001196 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122c:	4b58      	ldr	r3, [pc, #352]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001238:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	21f8      	movs	r1, #248	@ 0xf8
 8001242:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800124a:	fa91 f1a1 	rbit	r1, r1
 800124e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001252:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001256:	fab1 f181 	clz	r1, r1
 800125a:	b2c9      	uxtb	r1, r1
 800125c:	408b      	lsls	r3, r1
 800125e:	494c      	ldr	r1, [pc, #304]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
 8001264:	e065      	b.n	8001332 <HAL_RCC_OscConfig+0x5ee>
 8001266:	2301      	movs	r3, #1
 8001268:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001278:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001286:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	461a      	mov	r2, r3
 800128e:	2300      	movs	r3, #0
 8001290:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fa1b 	bl	80006cc <HAL_GetTick>
 8001296:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff fa16 	bl	80006cc <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d902      	bls.n	80012b2 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	f000 bd66 	b.w	8001d7e <HAL_RCC_OscConfig+0x103a>
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80012c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c8:	fab3 f383 	clz	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80012d0:	d802      	bhi.n	80012d8 <HAL_RCC_OscConfig+0x594>
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	e013      	b.n	8001300 <HAL_RCC_OscConfig+0x5bc>
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012f4:	fa93 f3a3 	rbit	r3, r3
 80012f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <HAL_RCC_OscConfig+0x64c>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001300:	2202      	movs	r2, #2
 8001302:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001306:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800130a:	fa92 f2a2 	rbit	r2, r2
 800130e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001312:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001316:	fab2 f282 	clz	r2, r2
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	f042 0220 	orr.w	r2, r2, #32
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	f002 021f 	and.w	r2, r2, #31
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1b4      	bne.n	800129c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001336:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8119 	beq.w	800157a <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 8082 	beq.w	800145e <HAL_RCC_OscConfig+0x71a>
 800135a:	2301      	movs	r3, #1
 800135c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800136c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_RCC_OscConfig+0x650>)
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	461a      	mov	r2, r3
 8001380:	2301      	movs	r3, #1
 8001382:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7ff f9a2 	bl	80006cc <HAL_GetTick>
 8001388:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138c:	e00f      	b.n	80013ae <HAL_RCC_OscConfig+0x66a>
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff f998 	bl	80006cc <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d902      	bls.n	80013ae <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	f000 bce8 	b.w	8001d7e <HAL_RCC_OscConfig+0x103a>
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013b8:	fa93 f2a3 	rbit	r2, r3
 80013bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013ce:	2202      	movs	r2, #2
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fa93 f2a3 	rbit	r2, r3
 80013e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013f2:	2202      	movs	r2, #2
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	fa93 f2a3 	rbit	r2, r3
 8001404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001408:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800140c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	4bb0      	ldr	r3, [pc, #704]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001416:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800141a:	2102      	movs	r1, #2
 800141c:	6019      	str	r1, [r3, #0]
 800141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001422:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fa93 f1a3 	rbit	r1, r3
 800142c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001430:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001434:	6019      	str	r1, [r3, #0]
  return result;
 8001436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2101      	movs	r1, #1
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d09d      	beq.n	8001398 <HAL_RCC_OscConfig+0x654>
 800145c:	e08d      	b.n	800157a <HAL_RCC_OscConfig+0x836>
 800145e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001462:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800146e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	fa93 f2a3 	rbit	r2, r3
 8001478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001480:	601a      	str	r2, [r3, #0]
  return result;
 8001482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001486:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800148a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	4b8f      	ldr	r3, [pc, #572]	@ (80016d4 <HAL_RCC_OscConfig+0x990>)
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	461a      	mov	r2, r3
 800149c:	2300      	movs	r3, #0
 800149e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff f914 	bl	80006cc <HAL_GetTick>
 80014a4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff f90f 	bl	80006cc <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d902      	bls.n	80014c0 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	f000 bc5f 	b.w	8001d7e <HAL_RCC_OscConfig+0x103a>
 80014c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014ec:	2202      	movs	r2, #2
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fa93 f2a3 	rbit	r2, r3
 80014fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001502:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800150c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001510:	2202      	movs	r2, #2
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001518:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001526:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800152a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152c:	4b68      	ldr	r3, [pc, #416]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 800152e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001534:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001538:	2102      	movs	r1, #2
 800153a:	6019      	str	r1, [r3, #0]
 800153c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001540:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f1a3 	rbit	r1, r3
 800154a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001552:	6019      	str	r1, [r3, #0]
  return result;
 8001554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001558:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d197      	bne.n	80014aa <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 819c 	beq.w	80018c8 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b4e      	ldr	r3, [pc, #312]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b4b      	ldr	r3, [pc, #300]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a4a      	ldr	r2, [pc, #296]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b48      	ldr	r3, [pc, #288]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80015b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <HAL_RCC_OscConfig+0x994>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d11a      	bne.n	8001612 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015dc:	4b3e      	ldr	r3, [pc, #248]	@ (80016d8 <HAL_RCC_OscConfig+0x994>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a3d      	ldr	r2, [pc, #244]	@ (80016d8 <HAL_RCC_OscConfig+0x994>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e8:	f7ff f870 	bl	80006cc <HAL_GetTick>
 80015ec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	e009      	b.n	8001606 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff f86b 	bl	80006cc <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	@ 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e3bb      	b.n	8001d7e <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <HAL_RCC_OscConfig+0x994>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ef      	beq.n	80015f2 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001612:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001616:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0x8ec>
 8001622:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a2a      	ldr	r2, [pc, #168]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	e035      	b.n	800169c <HAL_RCC_OscConfig+0x958>
 8001630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001634:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10c      	bne.n	800165a <HAL_RCC_OscConfig+0x916>
 8001640:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a22      	ldr	r2, [pc, #136]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6213      	str	r3, [r2, #32]
 800164c:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a1f      	ldr	r2, [pc, #124]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	e020      	b.n	800169c <HAL_RCC_OscConfig+0x958>
 800165a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b05      	cmp	r3, #5
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x940>
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a18      	ldr	r2, [pc, #96]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0x958>
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a11      	ldr	r2, [pc, #68]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <HAL_RCC_OscConfig+0x98c>)
 8001696:	f023 0304 	bic.w	r3, r3, #4
 800169a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800169c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 8085 	beq.w	80017b8 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f80d 	bl	80006cc <HAL_GetTick>
 80016b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b6:	e011      	b.n	80016dc <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff f808 	bl	80006cc <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d907      	bls.n	80016dc <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e356      	b.n	8001d7e <HAL_RCC_OscConfig+0x103a>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	10908120 	.word	0x10908120
 80016d8:	40007000 	.word	0x40007000
 80016dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016e4:	2202      	movs	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f2a3 	rbit	r2, r3
 80016f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016fa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001704:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001708:	2202      	movs	r2, #2
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001710:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001722:	601a      	str	r2, [r3, #0]
  return result;
 8001724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001728:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800172c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <HAL_RCC_OscConfig+0xa00>
 800173e:	4b98      	ldr	r3, [pc, #608]	@ (80019a0 <HAL_RCC_OscConfig+0xc5c>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	e013      	b.n	800176c <HAL_RCC_OscConfig+0xa28>
 8001744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001748:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800174c:	2202      	movs	r2, #2
 800174e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001754:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f2a3 	rbit	r2, r3
 800175e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001762:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	4b8d      	ldr	r3, [pc, #564]	@ (80019a0 <HAL_RCC_OscConfig+0xc5c>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001770:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001774:	2102      	movs	r1, #2
 8001776:	6011      	str	r1, [r2, #0]
 8001778:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800177c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	fa92 f1a2 	rbit	r1, r2
 8001786:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800178a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800178e:	6011      	str	r1, [r2, #0]
  return result;
 8001790:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001794:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	fab2 f282 	clz	r2, r2
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	f002 021f 	and.w	r2, r2, #31
 80017aa:	2101      	movs	r1, #1
 80017ac:	fa01 f202 	lsl.w	r2, r1, r2
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d080      	beq.n	80016b8 <HAL_RCC_OscConfig+0x974>
 80017b6:	e07d      	b.n	80018b4 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7fe ff88 	bl	80006cc <HAL_GetTick>
 80017bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	e00b      	b.n	80017da <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7fe ff83 	bl	80006cc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e2d1      	b.n	8001d7e <HAL_RCC_OscConfig+0x103a>
 80017da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017de:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ea:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001802:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001806:	2202      	movs	r2, #2
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	fa93 f2a3 	rbit	r2, r3
 8001818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800181c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001820:	601a      	str	r2, [r3, #0]
  return result;
 8001822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001826:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800182a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <HAL_RCC_OscConfig+0xafe>
 800183c:	4b58      	ldr	r3, [pc, #352]	@ (80019a0 <HAL_RCC_OscConfig+0xc5c>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	e013      	b.n	800186a <HAL_RCC_OscConfig+0xb26>
 8001842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001846:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800184a:	2202      	movs	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001852:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001860:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	4b4e      	ldr	r3, [pc, #312]	@ (80019a0 <HAL_RCC_OscConfig+0xc5c>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800186e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001872:	2102      	movs	r1, #2
 8001874:	6011      	str	r1, [r2, #0]
 8001876:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800187a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	fa92 f1a2 	rbit	r1, r2
 8001884:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001888:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800188c:	6011      	str	r1, [r2, #0]
  return result;
 800188e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001892:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	fab2 f282 	clz	r2, r2
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	f002 021f 	and.w	r2, r2, #31
 80018a8:	2101      	movs	r1, #1
 80018aa:	fa01 f202 	lsl.w	r2, r1, r2
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d186      	bne.n	80017c2 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018b4:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b38      	ldr	r3, [pc, #224]	@ (80019a0 <HAL_RCC_OscConfig+0xc5c>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	4a37      	ldr	r2, [pc, #220]	@ (80019a0 <HAL_RCC_OscConfig+0xc5c>)
 80018c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8251 	beq.w	8001d7c <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018da:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <HAL_RCC_OscConfig+0xc5c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	f000 820f 	beq.w	8001d06 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	f040 8165 	bne.w	8001bc4 <HAL_RCC_OscConfig+0xe80>
 80018fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001902:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	fa93 f2a3 	rbit	r2, r3
 8001916:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800191e:	601a      	str	r2, [r3, #0]
  return result;
 8001920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001924:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001928:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001934:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	461a      	mov	r2, r3
 800193c:	2300      	movs	r3, #0
 800193e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7fe fec4 	bl	80006cc <HAL_GetTick>
 8001944:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001948:	e009      	b.n	800195e <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194a:	f7fe febf 	bl	80006cc <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e20f      	b.n	8001d7e <HAL_RCC_OscConfig+0x103a>
 800195e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001962:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001966:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800196a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001970:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001982:	601a      	str	r2, [r3, #0]
  return result;
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800198c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b3f      	cmp	r3, #63	@ 0x3f
 8001996:	d805      	bhi.n	80019a4 <HAL_RCC_OscConfig+0xc60>
 8001998:	4b01      	ldr	r3, [pc, #4]	@ (80019a0 <HAL_RCC_OscConfig+0xc5c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	e02a      	b.n	80019f4 <HAL_RCC_OscConfig+0xcb0>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ce:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80019d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019dc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ea:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	4bca      	ldr	r3, [pc, #808]	@ (8001d1c <HAL_RCC_OscConfig+0xfd8>)
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019f8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a00:	6011      	str	r1, [r2, #0]
 8001a02:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a06:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	fa92 f1a2 	rbit	r1, r2
 8001a10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a14:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a18:	6011      	str	r1, [r2, #0]
  return result;
 8001a1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a1e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	fab2 f282 	clz	r2, r2
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	f042 0220 	orr.w	r2, r2, #32
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f002 021f 	and.w	r2, r2, #31
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d184      	bne.n	800194a <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a40:	4bb6      	ldr	r3, [pc, #728]	@ (8001d1c <HAL_RCC_OscConfig+0xfd8>)
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	f023 020f 	bic.w	r2, r3, #15
 8001a48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	49b1      	ldr	r1, [pc, #708]	@ (8001d1c <HAL_RCC_OscConfig+0xfd8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001a5a:	4bb0      	ldr	r3, [pc, #704]	@ (8001d1c <HAL_RCC_OscConfig+0xfd8>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a19      	ldr	r1, [r3, #32]
 8001a6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	49a7      	ldr	r1, [pc, #668]	@ (8001d1c <HAL_RCC_OscConfig+0xfd8>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
 8001a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a86:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a8a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a94:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001aa6:	601a      	str	r2, [r3, #0]
  return result;
 8001aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ab0:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001abc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7fe fe00 	bl	80006cc <HAL_GetTick>
 8001acc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7fe fdfb 	bl	80006cc <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e14b      	b.n	8001d7e <HAL_RCC_OscConfig+0x103a>
 8001ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001aee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b06:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b0a:	601a      	str	r2, [r3, #0]
  return result;
 8001b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b10:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b1e:	d802      	bhi.n	8001b26 <HAL_RCC_OscConfig+0xde2>
 8001b20:	4b7e      	ldr	r3, [pc, #504]	@ (8001d1c <HAL_RCC_OscConfig+0xfd8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	e027      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
 8001b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b46:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b50:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	4b6a      	ldr	r3, [pc, #424]	@ (8001d1c <HAL_RCC_OscConfig+0xfd8>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b7a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b7e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b82:	6011      	str	r1, [r2, #0]
 8001b84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b88:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	fa92 f1a2 	rbit	r1, r2
 8001b92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b96:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b9a:	6011      	str	r1, [r2, #0]
  return result;
 8001b9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ba0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	fab2 f282 	clz	r2, r2
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f042 0220 	orr.w	r2, r2, #32
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f002 021f 	and.w	r2, r2, #31
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d087      	beq.n	8001ad2 <HAL_RCC_OscConfig+0xd8e>
 8001bc2:	e0db      	b.n	8001d7c <HAL_RCC_OscConfig+0x1038>
 8001bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001be8:	601a      	str	r2, [r3, #0]
  return result;
 8001bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001bf2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bfe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	461a      	mov	r2, r3
 8001c06:	2300      	movs	r3, #0
 8001c08:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fd5f 	bl	80006cc <HAL_GetTick>
 8001c0e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	e009      	b.n	8001c28 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7fe fd5a 	bl	80006cc <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0aa      	b.n	8001d7e <HAL_RCC_OscConfig+0x103a>
 8001c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c4c:	601a      	str	r2, [r3, #0]
  return result;
 8001c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c52:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c60:	d802      	bhi.n	8001c68 <HAL_RCC_OscConfig+0xf24>
 8001c62:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <HAL_RCC_OscConfig+0xfd8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e027      	b.n	8001cb8 <HAL_RCC_OscConfig+0xf74>
 8001c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c88:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c92:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cae:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <HAL_RCC_OscConfig+0xfd8>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cbc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cc0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cc4:	6011      	str	r1, [r2, #0]
 8001cc6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	fa92 f1a2 	rbit	r1, r2
 8001cd4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cd8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001cdc:	6011      	str	r1, [r2, #0]
  return result;
 8001cde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ce2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	fab2 f282 	clz	r2, r2
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f042 0220 	orr.w	r2, r2, #32
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f002 021f 	and.w	r2, r2, #31
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d187      	bne.n	8001c14 <HAL_RCC_OscConfig+0xed0>
 8001d04:	e03a      	b.n	8001d7c <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d104      	bne.n	8001d20 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e031      	b.n	8001d7e <HAL_RCC_OscConfig+0x103a>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d20:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <HAL_RCC_OscConfig+0x1044>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_RCC_OscConfig+0x1044>)
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d34:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d117      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d4c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d10b      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d64:	f003 020f 	and.w	r2, r3, #15
 8001d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b09e      	sub	sp, #120	@ 0x78
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e154      	b.n	800204e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b89      	ldr	r3, [pc, #548]	@ (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b86      	ldr	r3, [pc, #536]	@ (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	4984      	ldr	r1, [pc, #528]	@ (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b82      	ldr	r3, [pc, #520]	@ (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e13c      	b.n	800204e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b7b      	ldr	r3, [pc, #492]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4978      	ldr	r1, [pc, #480]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80cd 	beq.w	8001f9a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d137      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xec>
 8001e08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e20:	d802      	bhi.n	8001e28 <HAL_RCC_ClockConfig+0x9c>
 8001e22:	4b6b      	ldr	r3, [pc, #428]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_ClockConfig+0xbc>
 8001e28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e44:	4b62      	ldr	r3, [pc, #392]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e50:	fa92 f2a2 	rbit	r2, r2
 8001e54:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f002 021f 	and.w	r2, r2, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d171      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0ea      	b.n	800204e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d137      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x164>
 8001e80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e84:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e98:	d802      	bhi.n	8001ea0 <HAL_RCC_ClockConfig+0x114>
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x134>
 8001ea0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ebc:	4b44      	ldr	r3, [pc, #272]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ec4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001ec6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ec8:	fa92 f2a2 	rbit	r2, r2
 8001ecc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001ece:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ed0:	fab2 f282 	clz	r2, r2
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f042 0220 	orr.w	r2, r2, #32
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f002 021f 	and.w	r2, r2, #31
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d135      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0ae      	b.n	800204e <HAL_RCC_ClockConfig+0x2c2>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f06:	d802      	bhi.n	8001f0e <HAL_RCC_ClockConfig+0x182>
 8001f08:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	e00d      	b.n	8001f2a <HAL_RCC_ClockConfig+0x19e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	623b      	str	r3, [r7, #32]
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	61ba      	str	r2, [r7, #24]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	fa92 f2a2 	rbit	r2, r2
 8001f34:	617a      	str	r2, [r7, #20]
  return result;
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e07a      	b.n	800204e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 0203 	bic.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	491a      	ldr	r1, [pc, #104]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6a:	f7fe fbaf 	bl	80006cc <HAL_GetTick>
 8001f6e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f7fe fbab 	bl	80006cc <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e062      	b.n	800204e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 020c 	and.w	r2, r3, #12
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d1eb      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d215      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 0207 	bic.w	r2, r3, #7
 8001fb0:	4906      	ldr	r1, [pc, #24]	@ (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb8:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d006      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e041      	b.n	800204e <HAL_RCC_ClockConfig+0x2c2>
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <HAL_RCC_ClockConfig+0x2cc>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	491a      	ldr	r1, [pc, #104]	@ (8002058 <HAL_RCC_ClockConfig+0x2cc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <HAL_RCC_ClockConfig+0x2cc>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4912      	ldr	r1, [pc, #72]	@ (8002058 <HAL_RCC_ClockConfig+0x2cc>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002012:	f000 f829 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002016:	4601      	mov	r1, r0
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <HAL_RCC_ClockConfig+0x2cc>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002020:	22f0      	movs	r2, #240	@ 0xf0
 8002022:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	fa92 f2a2 	rbit	r2, r2
 800202a:	60fa      	str	r2, [r7, #12]
  return result;
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	fab2 f282 	clz	r2, r2
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	40d3      	lsrs	r3, r2
 8002036:	4a09      	ldr	r2, [pc, #36]	@ (800205c <HAL_RCC_ClockConfig+0x2d0>)
 8002038:	5cd3      	ldrb	r3, [r2, r3]
 800203a:	fa21 f303 	lsr.w	r3, r1, r3
 800203e:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <HAL_RCC_ClockConfig+0x2d4>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HAL_RCC_ClockConfig+0x2d8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fafc 	bl	8000644 <HAL_InitTick>
  
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3778      	adds	r7, #120	@ 0x78
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	0800386c 	.word	0x0800386c
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002082:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x98>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d002      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x30>
 8002092:	2b08      	cmp	r3, #8
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x36>
 8002096:	e029      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002098:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x9c>)
 800209a:	613b      	str	r3, [r7, #16]
      break;
 800209c:	e029      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	0c9b      	lsrs	r3, r3, #18
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	4a18      	ldr	r2, [pc, #96]	@ (8002108 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	4a15      	ldr	r2, [pc, #84]	@ (800210c <HAL_RCC_GetSysClockFreq+0xa4>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e007      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	fbb2 f2f3 	udiv	r2, r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	613b      	str	r3, [r7, #16]
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020ee:	613b      	str	r3, [r7, #16]
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	693b      	ldr	r3, [r7, #16]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40021000 	.word	0x40021000
 8002104:	007a1200 	.word	0x007a1200
 8002108:	08003884 	.word	0x08003884
 800210c:	08003894 	.word	0x08003894

08002110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800212e:	f7ff ffef 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002132:	4601      	mov	r1, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800213c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002140:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	603a      	str	r2, [r7, #0]
  return result;
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	40d3      	lsrs	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	0800387c 	.word	0x0800387c

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002172:	f7ff ffcd 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002176:	4601      	mov	r1, r0
 8002178:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002180:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002184:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	603a      	str	r2, [r7, #0]
  return result;
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	40d3      	lsrs	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	0800387c 	.word	0x0800387c

080021b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b092      	sub	sp, #72	@ 0x48
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80d2 	beq.w	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d4:	4b4d      	ldr	r3, [pc, #308]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10e      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	4b4a      	ldr	r3, [pc, #296]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	4a49      	ldr	r2, [pc, #292]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	61d3      	str	r3, [r2, #28]
 80021ec:	4b47      	ldr	r3, [pc, #284]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b44      	ldr	r3, [pc, #272]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b41      	ldr	r3, [pc, #260]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a40      	ldr	r2, [pc, #256]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002214:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fa59 	bl	80006cc <HAL_GetTick>
 800221a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7fe fa55 	bl	80006cc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	@ 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1d4      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b37      	ldr	r3, [pc, #220]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800223c:	4b33      	ldr	r3, [pc, #204]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002244:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8082 	beq.w	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002256:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002258:	429a      	cmp	r2, r3
 800225a:	d07a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800225c:	4b2b      	ldr	r3, [pc, #172]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002266:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800226a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	461a      	mov	r2, r3
 8002286:	2301      	movs	r3, #1
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800228e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	461a      	mov	r2, r3
 80022aa:	2300      	movs	r3, #0
 80022ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ae:	4a17      	ldr	r2, [pc, #92]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d049      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fa05 	bl	80006cc <HAL_GetTick>
 80022c2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe fa01 	bl	80006cc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e17e      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80022dc:	2302      	movs	r3, #2
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e8:	2302      	movs	r3, #2
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	61fb      	str	r3, [r7, #28]
  return result;
 80022f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d108      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002306:	4b01      	ldr	r3, [pc, #4]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	e00d      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800230c:	40021000 	.word	0x40021000
 8002310:	40007000 	.word	0x40007000
 8002314:	10908100 	.word	0x10908100
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	4b9a      	ldr	r3, [pc, #616]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	2202      	movs	r2, #2
 800232a:	613a      	str	r2, [r7, #16]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	fa92 f2a2 	rbit	r2, r2
 8002332:	60fa      	str	r2, [r7, #12]
  return result;
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0b9      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002352:	4b8f      	ldr	r3, [pc, #572]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	498c      	ldr	r1, [pc, #560]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002364:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	4b88      	ldr	r3, [pc, #544]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4a87      	ldr	r2, [pc, #540]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002376:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002384:	4b82      	ldr	r3, [pc, #520]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	f023 0203 	bic.w	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	497f      	ldr	r1, [pc, #508]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023a2:	4b7b      	ldr	r3, [pc, #492]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4978      	ldr	r1, [pc, #480]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023c0:	4b73      	ldr	r3, [pc, #460]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	4970      	ldr	r1, [pc, #448]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023de:	4b6c      	ldr	r3, [pc, #432]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f023 0210 	bic.w	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4969      	ldr	r1, [pc, #420]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023fc:	4b64      	ldr	r3, [pc, #400]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	4961      	ldr	r1, [pc, #388]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800241a:	4b5d      	ldr	r3, [pc, #372]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f023 0220 	bic.w	r2, r3, #32
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	495a      	ldr	r1, [pc, #360]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002428:	4313      	orrs	r3, r2
 800242a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002438:	4b55      	ldr	r3, [pc, #340]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	4952      	ldr	r1, [pc, #328]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002446:	4313      	orrs	r3, r2
 8002448:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002456:	4b4e      	ldr	r3, [pc, #312]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	494b      	ldr	r1, [pc, #300]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002464:	4313      	orrs	r3, r2
 8002466:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002474:	4b46      	ldr	r3, [pc, #280]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4943      	ldr	r1, [pc, #268]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002482:	4313      	orrs	r3, r2
 8002484:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248e:	2b00      	cmp	r3, #0
 8002490:	d008      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002492:	4b3f      	ldr	r3, [pc, #252]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	493c      	ldr	r1, [pc, #240]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024b0:	4b37      	ldr	r3, [pc, #220]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	4934      	ldr	r1, [pc, #208]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024ce:	4b30      	ldr	r3, [pc, #192]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	492d      	ldr	r1, [pc, #180]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024ec:	4b28      	ldr	r3, [pc, #160]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f8:	4925      	ldr	r1, [pc, #148]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800250a:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	491e      	ldr	r1, [pc, #120]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002518:	4313      	orrs	r3, r2
 800251a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002528:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002534:	4916      	ldr	r1, [pc, #88]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002536:	4313      	orrs	r3, r2
 8002538:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002552:	490f      	ldr	r1, [pc, #60]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002554:	4313      	orrs	r3, r2
 8002556:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002564:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002570:	4907      	ldr	r1, [pc, #28]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002582:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	e002      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002596:	4913      	ldr	r1, [pc, #76]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002598:	4313      	orrs	r3, r2
 800259a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025a8:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b4:	490b      	ldr	r1, [pc, #44]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80025c6:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d2:	4904      	ldr	r1, [pc, #16]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3748      	adds	r7, #72	@ 0x48
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e040      	b.n	800267c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fd ff44 	bl	8000498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	@ 0x24
 8002614:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fe54 	bl	80032dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fc7d 	bl	8002f34 <UART_SetConfig>
 800263a:	4603      	mov	r3, r0
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e01b      	b.n	800267c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fed3 	bl	8003420 <UART_CheckIdleState>
 800267a:	4603      	mov	r3, r0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002698:	2b20      	cmp	r3, #32
 800269a:	d177      	bne.n	800278c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_UART_Transmit+0x24>
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e070      	b.n	800278e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2221      	movs	r2, #33	@ 0x21
 80026b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ba:	f7fe f807 	bl	80006cc <HAL_GetTick>
 80026be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d8:	d108      	bne.n	80026ec <HAL_UART_Transmit+0x68>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d104      	bne.n	80026ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e003      	b.n	80026f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026f4:	e02f      	b.n	8002756 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	@ 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 ff35 	bl	8003570 <UART_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d004      	beq.n	8002716 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e03b      	b.n	800278e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002728:	b292      	uxth	r2, r2
 800272a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	3302      	adds	r3, #2
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	e007      	b.n	8002744 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3301      	adds	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1c9      	bne.n	80026f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	2140      	movs	r1, #64	@ 0x40
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 feff 	bl	8003570 <UART_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e005      	b.n	800278e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b08a      	sub	sp, #40	@ 0x28
 800279a:	af02      	add	r7, sp, #8
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	f040 80b6 	bne.w	800291e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_UART_Receive+0x28>
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e0ae      	b.n	8002920 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2222      	movs	r2, #34	@ 0x22
 80027ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d8:	f7fd ff78 	bl	80006cc <HAL_GetTick>
 80027dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	88fa      	ldrh	r2, [r7, #6]
 80027e2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f6:	d10e      	bne.n	8002816 <HAL_UART_Receive+0x80>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_UART_Receive+0x76>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002806:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800280a:	e02d      	b.n	8002868 <HAL_UART_Receive+0xd2>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	22ff      	movs	r2, #255	@ 0xff
 8002810:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002814:	e028      	b.n	8002868 <HAL_UART_Receive+0xd2>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10d      	bne.n	800283a <HAL_UART_Receive+0xa4>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <HAL_UART_Receive+0x9a>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	22ff      	movs	r2, #255	@ 0xff
 800282a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800282e:	e01b      	b.n	8002868 <HAL_UART_Receive+0xd2>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	227f      	movs	r2, #127	@ 0x7f
 8002834:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002838:	e016      	b.n	8002868 <HAL_UART_Receive+0xd2>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002842:	d10d      	bne.n	8002860 <HAL_UART_Receive+0xca>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d104      	bne.n	8002856 <HAL_UART_Receive+0xc0>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	227f      	movs	r2, #127	@ 0x7f
 8002850:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002854:	e008      	b.n	8002868 <HAL_UART_Receive+0xd2>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	223f      	movs	r2, #63	@ 0x3f
 800285a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800285e:	e003      	b.n	8002868 <HAL_UART_Receive+0xd2>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800286e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002878:	d108      	bne.n	800288c <HAL_UART_Receive+0xf6>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	e003      	b.n	8002894 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002894:	e037      	b.n	8002906 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	2120      	movs	r1, #32
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fe65 	bl	8003570 <UART_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e033      	b.n	8002920 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10c      	bne.n	80028d8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	8a7b      	ldrh	r3, [r7, #18]
 80028c8:	4013      	ands	r3, r2
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	3302      	adds	r3, #2
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e00d      	b.n	80028f4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80028de:	b29b      	uxth	r3, r3
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	8a7b      	ldrh	r3, [r7, #18]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4013      	ands	r3, r2
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1c1      	bne.n	8002896 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b0ba      	sub	sp, #232	@ 0xe8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800294e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002952:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002956:	4013      	ands	r3, r2
 8002958:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800295c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d115      	bne.n	8002990 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00f      	beq.n	8002990 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d009      	beq.n	8002990 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 82ab 	beq.w	8002edc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
      }
      return;
 800298e:	e2a5      	b.n	8002edc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8117 	beq.w	8002bc8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800299a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80029aa:	4b85      	ldr	r3, [pc, #532]	@ (8002bc0 <HAL_UART_IRQHandler+0x298>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 810a 	beq.w	8002bc8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d011      	beq.n	80029e4 <HAL_UART_IRQHandler+0xbc>
 80029c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2201      	movs	r2, #1
 80029d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_UART_IRQHandler+0xec>
 80029f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2202      	movs	r2, #2
 8002a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d011      	beq.n	8002a44 <HAL_UART_IRQHandler+0x11c>
 8002a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2204      	movs	r2, #4
 8002a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3a:	f043 0202 	orr.w	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d017      	beq.n	8002a80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00b      	beq.n	8002a80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a76:	f043 0208 	orr.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d012      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x18a>
 8002a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00c      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002aa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8211 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afa:	2b40      	cmp	r3, #64	@ 0x40
 8002afc:	d005      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d04f      	beq.n	8002baa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fd9d 	bl	800364a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1a:	2b40      	cmp	r3, #64	@ 0x40
 8002b1c:	d141      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3308      	adds	r3, #8
 8002b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3308      	adds	r3, #8
 8002b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1d9      	bne.n	8002b1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d013      	beq.n	8002b9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b76:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <HAL_UART_IRQHandler+0x29c>)
 8002b78:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd feff 	bl	8000982 <HAL_DMA_Abort_IT>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d017      	beq.n	8002bba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b94:	4610      	mov	r0, r2
 8002b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b98:	e00f      	b.n	8002bba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9b4 	bl	8002f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba0:	e00b      	b.n	8002bba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9b0 	bl	8002f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba8:	e007      	b.n	8002bba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f9ac 	bl	8002f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002bb8:	e192      	b.n	8002ee0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bba:	bf00      	nop
    return;
 8002bbc:	e190      	b.n	8002ee0 <HAL_UART_IRQHandler+0x5b8>
 8002bbe:	bf00      	nop
 8002bc0:	04000120 	.word	0x04000120
 8002bc4:	08003713 	.word	0x08003713

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	f040 814b 	bne.w	8002e68 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8144 	beq.w	8002e68 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 813d 	beq.w	8002e68 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c00:	2b40      	cmp	r3, #64	@ 0x40
 8002c02:	f040 80b5 	bne.w	8002d70 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8164 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c26:	429a      	cmp	r2, r3
 8002c28:	f080 815c 	bcs.w	8002ee4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	f000 8086 	beq.w	8002d4e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c70:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c7c:	e841 2300 	strex	r3, r2, [r1]
 8002c80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1da      	bne.n	8002c42 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3308      	adds	r3, #8
 8002c92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3308      	adds	r3, #8
 8002cac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cb0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cbc:	e841 2300 	strex	r3, r2, [r1]
 8002cc0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e1      	bne.n	8002c8c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cf2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cf4:	e841 2300 	strex	r3, r2, [r1]
 8002cf8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e3      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d1e:	f023 0310 	bic.w	r3, r3, #16
 8002d22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e4      	bne.n	8002d0e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fddc 	bl	8000906 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f8d7 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d6e:	e0b9      	b.n	8002ee4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80ab 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002d92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80a6 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002db0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e4      	bne.n	8002d9c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	623b      	str	r3, [r7, #32]
   return(result);
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3308      	adds	r3, #8
 8002df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002df6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e3      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0310 	bic.w	r3, r3, #16
 8002e32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e44:	69b9      	ldr	r1, [r7, #24]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	e841 2300 	strex	r3, r2, [r1]
 8002e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e4      	bne.n	8002e1e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f85b 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e66:	e03f      	b.n	8002ee8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00e      	beq.n	8002e92 <HAL_UART_IRQHandler+0x56a>
 8002e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fc81 	bl	8003792 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e90:	e02d      	b.n	8002eee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01c      	beq.n	8002eec <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
    }
    return;
 8002eba:	e017      	b.n	8002eec <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <HAL_UART_IRQHandler+0x5c6>
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fc32 	bl	800373e <UART_EndTransmit_IT>
    return;
 8002eda:	e008      	b.n	8002eee <HAL_UART_IRQHandler+0x5c6>
      return;
 8002edc:	bf00      	nop
 8002ede:	e006      	b.n	8002eee <HAL_UART_IRQHandler+0x5c6>
    return;
 8002ee0:	bf00      	nop
 8002ee2:	e004      	b.n	8002eee <HAL_UART_IRQHandler+0x5c6>
      return;
 8002ee4:	bf00      	nop
 8002ee6:	e002      	b.n	8002eee <HAL_UART_IRQHandler+0x5c6>
      return;
 8002ee8:	bf00      	nop
 8002eea:	e000      	b.n	8002eee <HAL_UART_IRQHandler+0x5c6>
    return;
 8002eec:	bf00      	nop
  }

}
 8002eee:	37e8      	adds	r7, #232	@ 0xe8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b92      	ldr	r3, [pc, #584]	@ (80031a8 <UART_SetConfig+0x274>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	6979      	ldr	r1, [r7, #20]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a80      	ldr	r2, [pc, #512]	@ (80031ac <UART_SetConfig+0x278>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d120      	bne.n	8002ff2 <UART_SetConfig+0xbe>
 8002fb0:	4b7f      	ldr	r3, [pc, #508]	@ (80031b0 <UART_SetConfig+0x27c>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d817      	bhi.n	8002fec <UART_SetConfig+0xb8>
 8002fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <UART_SetConfig+0x90>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fe1 	.word	0x08002fe1
 8002fcc:	08002fe7 	.word	0x08002fe7
 8002fd0:	08002fdb 	.word	0x08002fdb
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e0b5      	b.n	8003146 <UART_SetConfig+0x212>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e0b2      	b.n	8003146 <UART_SetConfig+0x212>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e0af      	b.n	8003146 <UART_SetConfig+0x212>
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	77fb      	strb	r3, [r7, #31]
 8002fea:	e0ac      	b.n	8003146 <UART_SetConfig+0x212>
 8002fec:	2310      	movs	r3, #16
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e0a9      	b.n	8003146 <UART_SetConfig+0x212>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6f      	ldr	r2, [pc, #444]	@ (80031b4 <UART_SetConfig+0x280>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d124      	bne.n	8003046 <UART_SetConfig+0x112>
 8002ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80031b0 <UART_SetConfig+0x27c>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003004:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003008:	d011      	beq.n	800302e <UART_SetConfig+0xfa>
 800300a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800300e:	d817      	bhi.n	8003040 <UART_SetConfig+0x10c>
 8003010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003014:	d011      	beq.n	800303a <UART_SetConfig+0x106>
 8003016:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800301a:	d811      	bhi.n	8003040 <UART_SetConfig+0x10c>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <UART_SetConfig+0xf4>
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003024:	d006      	beq.n	8003034 <UART_SetConfig+0x100>
 8003026:	e00b      	b.n	8003040 <UART_SetConfig+0x10c>
 8003028:	2300      	movs	r3, #0
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e08b      	b.n	8003146 <UART_SetConfig+0x212>
 800302e:	2302      	movs	r3, #2
 8003030:	77fb      	strb	r3, [r7, #31]
 8003032:	e088      	b.n	8003146 <UART_SetConfig+0x212>
 8003034:	2304      	movs	r3, #4
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e085      	b.n	8003146 <UART_SetConfig+0x212>
 800303a:	2308      	movs	r3, #8
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e082      	b.n	8003146 <UART_SetConfig+0x212>
 8003040:	2310      	movs	r3, #16
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e07f      	b.n	8003146 <UART_SetConfig+0x212>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5b      	ldr	r2, [pc, #364]	@ (80031b8 <UART_SetConfig+0x284>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d124      	bne.n	800309a <UART_SetConfig+0x166>
 8003050:	4b57      	ldr	r3, [pc, #348]	@ (80031b0 <UART_SetConfig+0x27c>)
 8003052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003054:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003058:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800305c:	d011      	beq.n	8003082 <UART_SetConfig+0x14e>
 800305e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003062:	d817      	bhi.n	8003094 <UART_SetConfig+0x160>
 8003064:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003068:	d011      	beq.n	800308e <UART_SetConfig+0x15a>
 800306a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800306e:	d811      	bhi.n	8003094 <UART_SetConfig+0x160>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <UART_SetConfig+0x148>
 8003074:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003078:	d006      	beq.n	8003088 <UART_SetConfig+0x154>
 800307a:	e00b      	b.n	8003094 <UART_SetConfig+0x160>
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e061      	b.n	8003146 <UART_SetConfig+0x212>
 8003082:	2302      	movs	r3, #2
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e05e      	b.n	8003146 <UART_SetConfig+0x212>
 8003088:	2304      	movs	r3, #4
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e05b      	b.n	8003146 <UART_SetConfig+0x212>
 800308e:	2308      	movs	r3, #8
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e058      	b.n	8003146 <UART_SetConfig+0x212>
 8003094:	2310      	movs	r3, #16
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e055      	b.n	8003146 <UART_SetConfig+0x212>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a47      	ldr	r2, [pc, #284]	@ (80031bc <UART_SetConfig+0x288>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d124      	bne.n	80030ee <UART_SetConfig+0x1ba>
 80030a4:	4b42      	ldr	r3, [pc, #264]	@ (80031b0 <UART_SetConfig+0x27c>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80030ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030b0:	d011      	beq.n	80030d6 <UART_SetConfig+0x1a2>
 80030b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030b6:	d817      	bhi.n	80030e8 <UART_SetConfig+0x1b4>
 80030b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030bc:	d011      	beq.n	80030e2 <UART_SetConfig+0x1ae>
 80030be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030c2:	d811      	bhi.n	80030e8 <UART_SetConfig+0x1b4>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <UART_SetConfig+0x19c>
 80030c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030cc:	d006      	beq.n	80030dc <UART_SetConfig+0x1a8>
 80030ce:	e00b      	b.n	80030e8 <UART_SetConfig+0x1b4>
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]
 80030d4:	e037      	b.n	8003146 <UART_SetConfig+0x212>
 80030d6:	2302      	movs	r3, #2
 80030d8:	77fb      	strb	r3, [r7, #31]
 80030da:	e034      	b.n	8003146 <UART_SetConfig+0x212>
 80030dc:	2304      	movs	r3, #4
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e031      	b.n	8003146 <UART_SetConfig+0x212>
 80030e2:	2308      	movs	r3, #8
 80030e4:	77fb      	strb	r3, [r7, #31]
 80030e6:	e02e      	b.n	8003146 <UART_SetConfig+0x212>
 80030e8:	2310      	movs	r3, #16
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e02b      	b.n	8003146 <UART_SetConfig+0x212>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a33      	ldr	r2, [pc, #204]	@ (80031c0 <UART_SetConfig+0x28c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d124      	bne.n	8003142 <UART_SetConfig+0x20e>
 80030f8:	4b2d      	ldr	r3, [pc, #180]	@ (80031b0 <UART_SetConfig+0x27c>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003100:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003104:	d011      	beq.n	800312a <UART_SetConfig+0x1f6>
 8003106:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800310a:	d817      	bhi.n	800313c <UART_SetConfig+0x208>
 800310c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003110:	d011      	beq.n	8003136 <UART_SetConfig+0x202>
 8003112:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003116:	d811      	bhi.n	800313c <UART_SetConfig+0x208>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <UART_SetConfig+0x1f0>
 800311c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003120:	d006      	beq.n	8003130 <UART_SetConfig+0x1fc>
 8003122:	e00b      	b.n	800313c <UART_SetConfig+0x208>
 8003124:	2300      	movs	r3, #0
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e00d      	b.n	8003146 <UART_SetConfig+0x212>
 800312a:	2302      	movs	r3, #2
 800312c:	77fb      	strb	r3, [r7, #31]
 800312e:	e00a      	b.n	8003146 <UART_SetConfig+0x212>
 8003130:	2304      	movs	r3, #4
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e007      	b.n	8003146 <UART_SetConfig+0x212>
 8003136:	2308      	movs	r3, #8
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e004      	b.n	8003146 <UART_SetConfig+0x212>
 800313c:	2310      	movs	r3, #16
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e001      	b.n	8003146 <UART_SetConfig+0x212>
 8003142:	2310      	movs	r3, #16
 8003144:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800314e:	d16b      	bne.n	8003228 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003150:	7ffb      	ldrb	r3, [r7, #31]
 8003152:	2b08      	cmp	r3, #8
 8003154:	d838      	bhi.n	80031c8 <UART_SetConfig+0x294>
 8003156:	a201      	add	r2, pc, #4	@ (adr r2, 800315c <UART_SetConfig+0x228>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	08003181 	.word	0x08003181
 8003160:	08003189 	.word	0x08003189
 8003164:	08003191 	.word	0x08003191
 8003168:	080031c9 	.word	0x080031c9
 800316c:	08003197 	.word	0x08003197
 8003170:	080031c9 	.word	0x080031c9
 8003174:	080031c9 	.word	0x080031c9
 8003178:	080031c9 	.word	0x080031c9
 800317c:	0800319f 	.word	0x0800319f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003180:	f7fe ffd2 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003184:	61b8      	str	r0, [r7, #24]
        break;
 8003186:	e024      	b.n	80031d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003188:	f7fe fff0 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 800318c:	61b8      	str	r0, [r7, #24]
        break;
 800318e:	e020      	b.n	80031d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003190:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <UART_SetConfig+0x290>)
 8003192:	61bb      	str	r3, [r7, #24]
        break;
 8003194:	e01d      	b.n	80031d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003196:	f7fe ff67 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800319a:	61b8      	str	r0, [r7, #24]
        break;
 800319c:	e019      	b.n	80031d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a2:	61bb      	str	r3, [r7, #24]
        break;
 80031a4:	e015      	b.n	80031d2 <UART_SetConfig+0x29e>
 80031a6:	bf00      	nop
 80031a8:	efff69f3 	.word	0xefff69f3
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40004400 	.word	0x40004400
 80031b8:	40004800 	.word	0x40004800
 80031bc:	40004c00 	.word	0x40004c00
 80031c0:	40005000 	.word	0x40005000
 80031c4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	77bb      	strb	r3, [r7, #30]
        break;
 80031d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d073      	beq.n	80032c0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	005a      	lsls	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	441a      	add	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d916      	bls.n	8003222 <UART_SetConfig+0x2ee>
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fa:	d212      	bcs.n	8003222 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f023 030f 	bic.w	r3, r3, #15
 8003204:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	b29b      	uxth	r3, r3
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	b29a      	uxth	r2, r3
 8003212:	89fb      	ldrh	r3, [r7, #14]
 8003214:	4313      	orrs	r3, r2
 8003216:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	89fa      	ldrh	r2, [r7, #14]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	e04e      	b.n	80032c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	77bb      	strb	r3, [r7, #30]
 8003226:	e04b      	b.n	80032c0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003228:	7ffb      	ldrb	r3, [r7, #31]
 800322a:	2b08      	cmp	r3, #8
 800322c:	d827      	bhi.n	800327e <UART_SetConfig+0x34a>
 800322e:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <UART_SetConfig+0x300>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	08003259 	.word	0x08003259
 8003238:	08003261 	.word	0x08003261
 800323c:	08003269 	.word	0x08003269
 8003240:	0800327f 	.word	0x0800327f
 8003244:	0800326f 	.word	0x0800326f
 8003248:	0800327f 	.word	0x0800327f
 800324c:	0800327f 	.word	0x0800327f
 8003250:	0800327f 	.word	0x0800327f
 8003254:	08003277 	.word	0x08003277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7fe ff66 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 800325c:	61b8      	str	r0, [r7, #24]
        break;
 800325e:	e013      	b.n	8003288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003260:	f7fe ff84 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8003264:	61b8      	str	r0, [r7, #24]
        break;
 8003266:	e00f      	b.n	8003288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003268:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <UART_SetConfig+0x3a4>)
 800326a:	61bb      	str	r3, [r7, #24]
        break;
 800326c:	e00c      	b.n	8003288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326e:	f7fe fefb 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8003272:	61b8      	str	r0, [r7, #24]
        break;
 8003274:	e008      	b.n	8003288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327a:	61bb      	str	r3, [r7, #24]
        break;
 800327c:	e004      	b.n	8003288 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	77bb      	strb	r3, [r7, #30]
        break;
 8003286:	bf00      	nop
    }

    if (pclk != 0U)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	085a      	lsrs	r2, r3, #1
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	441a      	add	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b0f      	cmp	r3, #15
 80032a6:	d909      	bls.n	80032bc <UART_SetConfig+0x388>
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ae:	d205      	bcs.n	80032bc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	e001      	b.n	80032c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	007a1200 	.word	0x007a1200

080032dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01a      	beq.n	80033f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033da:	d10a      	bne.n	80033f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b098      	sub	sp, #96	@ 0x60
 8003424:	af02      	add	r7, sp, #8
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003430:	f7fd f94c 	bl	80006cc <HAL_GetTick>
 8003434:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b08      	cmp	r3, #8
 8003442:	d12e      	bne.n	80034a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003444:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344c:	2200      	movs	r2, #0
 800344e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f88c 	bl	8003570 <UART_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d021      	beq.n	80034a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800346c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003472:	653b      	str	r3, [r7, #80]	@ 0x50
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800347c:	647b      	str	r3, [r7, #68]	@ 0x44
 800347e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800348a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e6      	bne.n	800345e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e062      	b.n	8003568 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d149      	bne.n	8003544 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b8:	2200      	movs	r2, #0
 80034ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f856 	bl	8003570 <UART_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d03c      	beq.n	8003544 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	623b      	str	r3, [r7, #32]
   return(result);
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e6      	bne.n	80034ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3308      	adds	r3, #8
 8003502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	60fb      	str	r3, [r7, #12]
   return(result);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3308      	adds	r3, #8
 800351a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800351c:	61fa      	str	r2, [r7, #28]
 800351e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003520:	69b9      	ldr	r1, [r7, #24]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	e841 2300 	strex	r3, r2, [r1]
 8003528:	617b      	str	r3, [r7, #20]
   return(result);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e5      	bne.n	80034fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e011      	b.n	8003568 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3758      	adds	r7, #88	@ 0x58
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003580:	e04f      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d04b      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7fd f89f 	bl	80006cc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e04e      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d037      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b80      	cmp	r3, #128	@ 0x80
 80035b6:	d034      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b40      	cmp	r3, #64	@ 0x40
 80035bc:	d031      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d110      	bne.n	80035ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2208      	movs	r2, #8
 80035d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f838 	bl	800364a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2208      	movs	r2, #8
 80035de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e029      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035fc:	d111      	bne.n	8003622 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f81e 	bl	800364a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e00f      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	429a      	cmp	r2, r3
 800363e:	d0a0      	beq.n	8003582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800364a:	b480      	push	{r7}
 800364c:	b095      	sub	sp, #84	@ 0x54
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003670:	643b      	str	r3, [r7, #64]	@ 0x40
 8003672:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003676:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e6      	bne.n	8003652 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	61fb      	str	r3, [r7, #28]
   return(result);
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3308      	adds	r3, #8
 80036a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e5      	bne.n	8003684 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d118      	bne.n	80036f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f023 0310 	bic.w	r3, r3, #16
 80036d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6979      	ldr	r1, [r7, #20]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	613b      	str	r3, [r7, #16]
   return(result);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e6      	bne.n	80036c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003706:	bf00      	nop
 8003708:	3754      	adds	r7, #84	@ 0x54
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff fbe9 	bl	8002f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b088      	sub	sp, #32
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	60bb      	str	r3, [r7, #8]
   return(result);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6979      	ldr	r1, [r7, #20]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	613b      	str	r3, [r7, #16]
   return(result);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e6      	bne.n	8003746 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff fbb5 	bl	8002ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800378a:	bf00      	nop
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <memset>:
 80037a6:	4402      	add	r2, r0
 80037a8:	4603      	mov	r3, r0
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d100      	bne.n	80037b0 <memset+0xa>
 80037ae:	4770      	bx	lr
 80037b0:	f803 1b01 	strb.w	r1, [r3], #1
 80037b4:	e7f9      	b.n	80037aa <memset+0x4>
	...

080037b8 <__libc_init_array>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4d0d      	ldr	r5, [pc, #52]	@ (80037f0 <__libc_init_array+0x38>)
 80037bc:	4c0d      	ldr	r4, [pc, #52]	@ (80037f4 <__libc_init_array+0x3c>)
 80037be:	1b64      	subs	r4, r4, r5
 80037c0:	10a4      	asrs	r4, r4, #2
 80037c2:	2600      	movs	r6, #0
 80037c4:	42a6      	cmp	r6, r4
 80037c6:	d109      	bne.n	80037dc <__libc_init_array+0x24>
 80037c8:	4d0b      	ldr	r5, [pc, #44]	@ (80037f8 <__libc_init_array+0x40>)
 80037ca:	4c0c      	ldr	r4, [pc, #48]	@ (80037fc <__libc_init_array+0x44>)
 80037cc:	f000 f818 	bl	8003800 <_init>
 80037d0:	1b64      	subs	r4, r4, r5
 80037d2:	10a4      	asrs	r4, r4, #2
 80037d4:	2600      	movs	r6, #0
 80037d6:	42a6      	cmp	r6, r4
 80037d8:	d105      	bne.n	80037e6 <__libc_init_array+0x2e>
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e0:	4798      	blx	r3
 80037e2:	3601      	adds	r6, #1
 80037e4:	e7ee      	b.n	80037c4 <__libc_init_array+0xc>
 80037e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ea:	4798      	blx	r3
 80037ec:	3601      	adds	r6, #1
 80037ee:	e7f2      	b.n	80037d6 <__libc_init_array+0x1e>
 80037f0:	080038ac 	.word	0x080038ac
 80037f4:	080038ac 	.word	0x080038ac
 80037f8:	080038ac 	.word	0x080038ac
 80037fc:	080038b0 	.word	0x080038b0

08003800 <_init>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	bf00      	nop
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr

0800380c <_fini>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	bf00      	nop
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr
