
Basic_cmmn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800374c  0800374c  0000474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003788  08003788  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003788  08003788  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003788  08003788  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003788  08003788  00004788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003790  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a59d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3e  00000000  00000000  0000f5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00011018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005aa  00000000  00000000  00011780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f088  00000000  00000000  00011d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac52  00000000  00000000  00030db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc72f  00000000  00000000  0003ba04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f8133  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ce4  00000000  00000000  000f8178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000f9e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003734 	.word	0x08003734

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003734 	.word	0x08003734

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 f9ab 	bl	8000534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f825 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f8a5 	bl	8000330 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 f873 	bl	80002d0 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_UART_Receive(&huart2, &rx_data, 1, 100) == HAL_OK)
 80001ea:	1cf9      	adds	r1, r7, #3
 80001ec:	2364      	movs	r3, #100	@ 0x64
 80001ee:	2201      	movs	r2, #1
 80001f0:	480c      	ldr	r0, [pc, #48]	@ (8000224 <main+0x50>)
 80001f2:	f002 fa6a 	bl	80026ca <HAL_UART_Receive>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d107      	bne.n	800020c <main+0x38>
	      {
	          HAL_UART_Transmit(&huart2, &rx_data, 1, HAL_MAX_DELAY); // Echo back
 80001fc:	1cf9      	adds	r1, r7, #3
 80001fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000202:	2201      	movs	r2, #1
 8000204:	4807      	ldr	r0, [pc, #28]	@ (8000224 <main+0x50>)
 8000206:	f002 f9d7 	bl	80025b8 <HAL_UART_Transmit>
 800020a:	e007      	b.n	800021c <main+0x48>
	      }
	      else
	      {
	          // Optional debug message to confirm code is looping
	          const char* msg = ".";
 800020c:	4b06      	ldr	r3, [pc, #24]	@ (8000228 <main+0x54>)
 800020e:	607b      	str	r3, [r7, #4]
	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, 1, 10);
 8000210:	230a      	movs	r3, #10
 8000212:	2201      	movs	r2, #1
 8000214:	6879      	ldr	r1, [r7, #4]
 8000216:	4803      	ldr	r0, [pc, #12]	@ (8000224 <main+0x50>)
 8000218:	f002 f9ce 	bl	80025b8 <HAL_UART_Transmit>
	      }

	      HAL_Delay(10);
 800021c:	200a      	movs	r0, #10
 800021e:	f000 f9ef 	bl	8000600 <HAL_Delay>
	  if (HAL_UART_Receive(&huart2, &rx_data, 1, 100) == HAL_OK)
 8000222:	e7e2      	b.n	80001ea <main+0x16>
 8000224:	20000028 	.word	0x20000028
 8000228:	0800374c 	.word	0x0800374c

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b0a6      	sub	sp, #152	@ 0x98
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000236:	2228      	movs	r2, #40	@ 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 fa4d 	bl	80036da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2258      	movs	r2, #88	@ 0x58
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fa3f 	bl	80036da <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025c:	2302      	movs	r3, #2
 800025e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2310      	movs	r3, #16
 8000266:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026a:	2300      	movs	r3, #0
 800026c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fcff 	bl	8000c78 <HAL_RCC_OscConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000280:	f000 f86e 	bl	8000360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	230f      	movs	r3, #15
 8000286:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000288:	2300      	movs	r3, #0
 800028a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000298:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fd0e 	bl	8001cc0 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002aa:	f000 f859 	bl	8000360 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 ff13 	bl	80020e4 <HAL_RCCEx_PeriphCLKConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002c4:	f000 f84c 	bl	8000360 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3798      	adds	r7, #152	@ 0x98
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d4:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002d6:	4a15      	ldr	r2, [pc, #84]	@ (800032c <MX_USART2_UART_Init+0x5c>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002da:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000306:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 8000314:	f002 f902 	bl	800251c <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800031e:	f000 f81f 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000028 	.word	0x20000028
 800032c:	40004400 	.word	0x40004400

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_GPIO_Init+0x2c>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a08      	ldr	r2, [pc, #32]	@ (800035c <MX_GPIO_Init+0x2c>)
 800033c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_GPIO_Init+0x2c>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000364:	b672      	cpsid	i
}
 8000366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <Error_Handler+0x8>

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000372:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <HAL_MspInit+0x44>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a0e      	ldr	r2, [pc, #56]	@ (80003b0 <HAL_MspInit+0x44>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <HAL_MspInit+0x44>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038a:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <HAL_MspInit+0x44>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a08      	ldr	r2, [pc, #32]	@ (80003b0 <HAL_MspInit+0x44>)
 8000390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <HAL_MspInit+0x44>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	@ 0x28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000440 <HAL_UART_MspInit+0x8c>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d130      	bne.n	8000438 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <HAL_UART_MspInit+0x90>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a1a      	ldr	r2, [pc, #104]	@ (8000444 <HAL_UART_MspInit+0x90>)
 80003dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b18      	ldr	r3, [pc, #96]	@ (8000444 <HAL_UART_MspInit+0x90>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <HAL_UART_MspInit+0x90>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a14      	ldr	r2, [pc, #80]	@ (8000444 <HAL_UART_MspInit+0x90>)
 80003f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <HAL_UART_MspInit+0x90>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000406:	230c      	movs	r3, #12
 8000408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800040a:	2302      	movs	r3, #2
 800040c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000412:	2303      	movs	r3, #3
 8000414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000416:	2307      	movs	r3, #7
 8000418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041a:	f107 0314 	add.w	r3, r7, #20
 800041e:	4619      	mov	r1, r3
 8000420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000424:	f000 fa9e 	bl	8000964 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2100      	movs	r1, #0
 800042c:	2026      	movs	r0, #38	@ 0x26
 800042e:	f000 f9e6 	bl	80007fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000432:	2026      	movs	r0, #38	@ 0x26
 8000434:	f000 f9ff 	bl	8000836 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000438:	bf00      	nop
 800043a:	3728      	adds	r7, #40	@ 0x28
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40004400 	.word	0x40004400
 8000444:	40021000 	.word	0x40021000

08000448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <NMI_Handler+0x4>

08000450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <MemManage_Handler+0x4>

08000460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <UsageFault_Handler+0x4>

08000470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049e:	f000 f88f 	bl	80005c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004ac:	4802      	ldr	r0, [pc, #8]	@ (80004b8 <USART2_IRQHandler+0x10>)
 80004ae:	f002 f9d5 	bl	800285c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000028 	.word	0x20000028

080004bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <SystemInit+0x20>)
 80004c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004c6:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <SystemInit+0x20>)
 80004c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000518 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e4:	f7ff ffea 	bl	80004bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	@ (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	@ (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050e:	f003 f8ed 	bl	80036ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000512:	f7ff fe5f 	bl	80001d4 <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000518:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000524:	08003790 	.word	0x08003790
  ldr r2, =_sbss
 8000528:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800052c:	200000b4 	.word	0x200000b4

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <HAL_Init+0x28>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <HAL_Init+0x28>)
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f94f 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	200f      	movs	r0, #15
 800054c:	f000 f808 	bl	8000560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f7ff ff0c 	bl	800036c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40022000 	.word	0x40022000

08000560 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_InitTick+0x54>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <HAL_InitTick+0x58>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000576:	fbb3 f3f1 	udiv	r3, r3, r1
 800057a:	fbb2 f3f3 	udiv	r3, r2, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f967 	bl	8000852 <HAL_SYSTICK_Config>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	e00e      	b.n	80005ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	d80a      	bhi.n	80005aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000594:	2200      	movs	r2, #0
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	f000 f92f 	bl	80007fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a0:	4a06      	ldr	r2, [pc, #24]	@ (80005bc <HAL_InitTick+0x5c>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e000      	b.n	80005ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000004 	.word	0x20000004

080005c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <HAL_IncTick+0x20>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <HAL_IncTick+0x24>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a04      	ldr	r2, [pc, #16]	@ (80005e4 <HAL_IncTick+0x24>)
 80005d2:	6013      	str	r3, [r2, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000008 	.word	0x20000008
 80005e4:	200000b0 	.word	0x200000b0

080005e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80005ec:	4b03      	ldr	r3, [pc, #12]	@ (80005fc <HAL_GetTick+0x14>)
 80005ee:	681b      	ldr	r3, [r3, #0]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	200000b0 	.word	0x200000b0

08000600 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000608:	f7ff ffee 	bl	80005e8 <HAL_GetTick>
 800060c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000618:	d005      	beq.n	8000626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061a:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <HAL_Delay+0x44>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000626:	bf00      	nop
 8000628:	f7ff ffde 	bl	80005e8 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	429a      	cmp	r2, r3
 8000636:	d8f7      	bhi.n	8000628 <HAL_Delay+0x28>
  {
  }
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000008 	.word	0x20000008

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	@ (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	@ (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	@ (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	@ 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007b4:	d301      	bcc.n	80007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00f      	b.n	80007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <SysTick_Config+0x40>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c2:	210f      	movs	r1, #15
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f7ff ff8e 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <SysTick_Config+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <SysTick_Config+0x40>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff29 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000810:	f7ff ff3e 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f7ff ff8e 	bl	800073c <NVIC_EncodePriority>
 8000820:	4602      	mov	r2, r0
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff5d 	bl	80006e8 <__NVIC_SetPriority>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff31 	bl	80006ac <__NVIC_EnableIRQ>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ffa2 	bl	80007a4 <SysTick_Config>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d101      	bne.n	800087c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	e02e      	b.n	80008da <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000882:	2b02      	cmp	r3, #2
 8000884:	d008      	beq.n	8000898 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2204      	movs	r2, #4
 800088a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e020      	b.n	80008da <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 020e 	bic.w	r2, r2, #14
 80008a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f022 0201 	bic.w	r2, r2, #1
 80008b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008c0:	2101      	movs	r1, #1
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2201      	movs	r2, #1
 80008cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d005      	beq.n	8000908 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2204      	movs	r2, #4
 8000900:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	e027      	b.n	8000958 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f022 020e 	bic.w	r2, r2, #14
 8000916:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f022 0201 	bic.w	r2, r2, #1
 8000926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000930:	2101      	movs	r1, #1
 8000932:	fa01 f202 	lsl.w	r2, r1, r2
 8000936:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2201      	movs	r2, #1
 800093c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	4798      	blx	r3
    }
  }
  return status;
 8000958:	7bfb      	ldrb	r3, [r7, #15]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	b480      	push	{r7}
 8000966:	b087      	sub	sp, #28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000972:	e160      	b.n	8000c36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2101      	movs	r1, #1
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 8152 	beq.w	8000c30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	2b01      	cmp	r3, #1
 8000996:	d005      	beq.n	80009a4 <HAL_GPIO_Init+0x40>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d130      	bne.n	8000a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2203      	movs	r2, #3
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009da:	2201      	movs	r2, #1
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	091b      	lsrs	r3, r3, #4
 80009f0:	f003 0201 	and.w	r2, r3, #1
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d017      	beq.n	8000a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d123      	bne.n	8000a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	08da      	lsrs	r2, r3, #3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3208      	adds	r2, #8
 8000a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	220f      	movs	r2, #15
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	08da      	lsrs	r2, r3, #3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	6939      	ldr	r1, [r7, #16]
 8000a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0203 	and.w	r2, r3, #3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80ac 	beq.w	8000c30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a5d      	ldr	r2, [pc, #372]	@ (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af0:	4a59      	ldr	r2, [pc, #356]	@ (8000c58 <HAL_GPIO_Init+0x2f4>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b1a:	d025      	beq.n	8000b68 <HAL_GPIO_Init+0x204>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a4f      	ldr	r2, [pc, #316]	@ (8000c5c <HAL_GPIO_Init+0x2f8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d01f      	beq.n	8000b64 <HAL_GPIO_Init+0x200>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a4e      	ldr	r2, [pc, #312]	@ (8000c60 <HAL_GPIO_Init+0x2fc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d019      	beq.n	8000b60 <HAL_GPIO_Init+0x1fc>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8000c64 <HAL_GPIO_Init+0x300>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d013      	beq.n	8000b5c <HAL_GPIO_Init+0x1f8>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a4c      	ldr	r2, [pc, #304]	@ (8000c68 <HAL_GPIO_Init+0x304>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d00d      	beq.n	8000b58 <HAL_GPIO_Init+0x1f4>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a4b      	ldr	r2, [pc, #300]	@ (8000c6c <HAL_GPIO_Init+0x308>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a4a      	ldr	r2, [pc, #296]	@ (8000c70 <HAL_GPIO_Init+0x30c>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_GPIO_Init+0x1ec>
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	e00c      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b50:	2307      	movs	r3, #7
 8000b52:	e00a      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b54:	2305      	movs	r3, #5
 8000b56:	e008      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b58:	2304      	movs	r3, #4
 8000b5a:	e006      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e004      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	f002 0203 	and.w	r2, r2, #3
 8000b70:	0092      	lsls	r2, r2, #2
 8000b72:	4093      	lsls	r3, r2
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b7a:	4937      	ldr	r1, [pc, #220]	@ (8000c58 <HAL_GPIO_Init+0x2f4>)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	3302      	adds	r3, #2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b88:	4b3a      	ldr	r3, [pc, #232]	@ (8000c74 <HAL_GPIO_Init+0x310>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bac:	4a31      	ldr	r2, [pc, #196]	@ (8000c74 <HAL_GPIO_Init+0x310>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb2:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <HAL_GPIO_Init+0x310>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bd6:	4a27      	ldr	r2, [pc, #156]	@ (8000c74 <HAL_GPIO_Init+0x310>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <HAL_GPIO_Init+0x310>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c00:	4a1c      	ldr	r2, [pc, #112]	@ (8000c74 <HAL_GPIO_Init+0x310>)
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <HAL_GPIO_Init+0x310>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c2a:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <HAL_GPIO_Init+0x310>)
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f47f ae97 	bne.w	8000974 <HAL_GPIO_Init+0x10>
  }
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	48000800 	.word	0x48000800
 8000c64:	48000c00 	.word	0x48000c00
 8000c68:	48001000 	.word	0x48001000
 8000c6c:	48001400 	.word	0x48001400
 8000c70:	48001800 	.word	0x48001800
 8000c74:	40010400 	.word	0x40010400

08000c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f001 b80a 	b.w	8001cb2 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ca2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8161 	beq.w	8000f76 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb4:	4bae      	ldr	r3, [pc, #696]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d00c      	beq.n	8000cda <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc0:	4bab      	ldr	r3, [pc, #684]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d157      	bne.n	8000d7c <HAL_RCC_OscConfig+0x104>
 8000ccc:	4ba8      	ldr	r3, [pc, #672]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd8:	d150      	bne.n	8000d7c <HAL_RCC_OscConfig+0x104>
 8000cda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cde:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000ce6:	fa93 f3a3 	rbit	r3, r3
 8000cea:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf2:	fab3 f383 	clz	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cfa:	d802      	bhi.n	8000d02 <HAL_RCC_OscConfig+0x8a>
 8000cfc:	4b9c      	ldr	r3, [pc, #624]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	e015      	b.n	8000d2e <HAL_RCC_OscConfig+0xb6>
 8000d02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d06:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d0e:	fa93 f3a3 	rbit	r3, r3
 8000d12:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d1a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d1e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d2a:	4b91      	ldr	r3, [pc, #580]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d32:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000d36:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000d42:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	f002 021f 	and.w	r2, r2, #31
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8108 	beq.w	8000f74 <HAL_RCC_OscConfig+0x2fc>
 8000d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f040 80ff 	bne.w	8000f74 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	f000 bf9b 	b.w	8001cb2 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d8c:	d106      	bne.n	8000d9c <HAL_RCC_OscConfig+0x124>
 8000d8e:	4b78      	ldr	r3, [pc, #480]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a77      	ldr	r2, [pc, #476]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e036      	b.n	8000e0a <HAL_RCC_OscConfig+0x192>
 8000d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000da0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d10c      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x14e>
 8000dac:	4b70      	ldr	r3, [pc, #448]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a6f      	ldr	r2, [pc, #444]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b6d      	ldr	r3, [pc, #436]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a6c      	ldr	r2, [pc, #432]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e021      	b.n	8000e0a <HAL_RCC_OscConfig+0x192>
 8000dc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dd6:	d10c      	bne.n	8000df2 <HAL_RCC_OscConfig+0x17a>
 8000dd8:	4b65      	ldr	r3, [pc, #404]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a64      	ldr	r2, [pc, #400]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000dde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b62      	ldr	r3, [pc, #392]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a61      	ldr	r2, [pc, #388]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e00b      	b.n	8000e0a <HAL_RCC_OscConfig+0x192>
 8000df2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a5e      	ldr	r2, [pc, #376]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a5b      	ldr	r2, [pc, #364]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000e04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d054      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fbe5 	bl	80005e8 <HAL_GetTick>
 8000e1e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e22:	e00a      	b.n	8000e3a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff fbe0 	bl	80005e8 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b64      	cmp	r3, #100	@ 0x64
 8000e32:	d902      	bls.n	8000e3a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	f000 bf3c 	b.w	8001cb2 <HAL_RCC_OscConfig+0x103a>
 8000e3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e3e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e42:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000e46:	fa93 f3a3 	rbit	r3, r3
 8000e4a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000e4e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	fab3 f383 	clz	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e5a:	d802      	bhi.n	8000e62 <HAL_RCC_OscConfig+0x1ea>
 8000e5c:	4b44      	ldr	r3, [pc, #272]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	e015      	b.n	8000e8e <HAL_RCC_OscConfig+0x216>
 8000e62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e66:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000e76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e7a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000e7e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000e8a:	4b39      	ldr	r3, [pc, #228]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e92:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000e96:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000e9a:	fa92 f2a2 	rbit	r2, r2
 8000e9e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000ea2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000ea6:	fab2 f282 	clz	r2, r2
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	f042 0220 	orr.w	r2, r2, #32
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	f002 021f 	and.w	r2, r2, #31
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0b0      	beq.n	8000e24 <HAL_RCC_OscConfig+0x1ac>
 8000ec2:	e058      	b.n	8000f76 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fb90 	bl	80005e8 <HAL_GetTick>
 8000ec8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ece:	f7ff fb8b 	bl	80005e8 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	@ 0x64
 8000edc:	d902      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	f000 bee7 	b.w	8001cb2 <HAL_RCC_OscConfig+0x103a>
 8000ee4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ee8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000ef8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f04:	d802      	bhi.n	8000f0c <HAL_RCC_OscConfig+0x294>
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	e015      	b.n	8000f38 <HAL_RCC_OscConfig+0x2c0>
 8000f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f10:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000f20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f24:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000f2c:	fa93 f3a3 	rbit	r3, r3
 8000f30:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_RCC_OscConfig+0x2f8>)
 8000f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f3c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000f40:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000f44:	fa92 f2a2 	rbit	r2, r2
 8000f48:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000f4c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000f50:	fab2 f282 	clz	r2, r2
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	f042 0220 	orr.w	r2, r2, #32
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	f002 021f 	and.w	r2, r2, #31
 8000f60:	2101      	movs	r1, #1
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1b0      	bne.n	8000ece <HAL_RCC_OscConfig+0x256>
 8000f6c:	e003      	b.n	8000f76 <HAL_RCC_OscConfig+0x2fe>
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 816d 	beq.w	8001266 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f8c:	4bcd      	ldr	r3, [pc, #820]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00c      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f98:	4bca      	ldr	r3, [pc, #808]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d16e      	bne.n	8001082 <HAL_RCC_OscConfig+0x40a>
 8000fa4:	4bc7      	ldr	r3, [pc, #796]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000fb0:	d167      	bne.n	8001082 <HAL_RCC_OscConfig+0x40a>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000fc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fd0:	d802      	bhi.n	8000fd8 <HAL_RCC_OscConfig+0x360>
 8000fd2:	4bbc      	ldr	r3, [pc, #752]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	e013      	b.n	8001000 <HAL_RCC_OscConfig+0x388>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000fe2:	fa93 f3a3 	rbit	r3, r3
 8000fe6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000ff0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000ffc:	4bb1      	ldr	r3, [pc, #708]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001000:	2202      	movs	r2, #2
 8001002:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001006:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800100a:	fa92 f2a2 	rbit	r2, r2
 800100e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001012:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001016:	fab2 f282 	clz	r2, r2
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	f042 0220 	orr.w	r2, r2, #32
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	f002 021f 	and.w	r2, r2, #31
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f202 	lsl.w	r2, r1, r2
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00a      	beq.n	8001048 <HAL_RCC_OscConfig+0x3d0>
 8001032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001036:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	f000 be35 	b.w	8001cb2 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b9e      	ldr	r3, [pc, #632]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001054:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	21f8      	movs	r1, #248	@ 0xf8
 800105e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001066:	fa91 f1a1 	rbit	r1, r1
 800106a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800106e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001072:	fab1 f181 	clz	r1, r1
 8001076:	b2c9      	uxtb	r1, r1
 8001078:	408b      	lsls	r3, r1
 800107a:	4992      	ldr	r1, [pc, #584]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001080:	e0f1      	b.n	8001266 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001082:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001086:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8083 	beq.w	800119a <HAL_RCC_OscConfig+0x522>
 8001094:	2301      	movs	r3, #1
 8001096:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800109e:	fa93 f3a3 	rbit	r3, r3
 80010a2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80010a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	461a      	mov	r2, r3
 80010bc:	2301      	movs	r3, #1
 80010be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fa92 	bl	80005e8 <HAL_GetTick>
 80010c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	e00a      	b.n	80010e0 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ca:	f7ff fa8d 	bl	80005e8 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d902      	bls.n	80010e0 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	f000 bde9 	b.w	8001cb2 <HAL_RCC_OscConfig+0x103a>
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80010f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80010fe:	d802      	bhi.n	8001106 <HAL_RCC_OscConfig+0x48e>
 8001100:	4b70      	ldr	r3, [pc, #448]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	e013      	b.n	800112e <HAL_RCC_OscConfig+0x4b6>
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800111e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800112a:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112e:	2202      	movs	r2, #2
 8001130:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001134:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001138:	fa92 f2a2 	rbit	r2, r2
 800113c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001140:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001144:	fab2 f282 	clz	r2, r2
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	f042 0220 	orr.w	r2, r2, #32
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	f002 021f 	and.w	r2, r2, #31
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0b4      	beq.n	80010ca <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b58      	ldr	r3, [pc, #352]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800116c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	21f8      	movs	r1, #248	@ 0xf8
 8001176:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800117e:	fa91 f1a1 	rbit	r1, r1
 8001182:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001186:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800118a:	fab1 f181 	clz	r1, r1
 800118e:	b2c9      	uxtb	r1, r1
 8001190:	408b      	lsls	r3, r1
 8001192:	494c      	ldr	r1, [pc, #304]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
 8001198:	e065      	b.n	8001266 <HAL_RCC_OscConfig+0x5ee>
 800119a:	2301      	movs	r3, #1
 800119c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80011ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b0:	fab3 f383 	clz	r3, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	461a      	mov	r2, r3
 80011c2:	2300      	movs	r3, #0
 80011c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fa0f 	bl	80005e8 <HAL_GetTick>
 80011ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff fa0a 	bl	80005e8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d902      	bls.n	80011e6 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f000 bd66 	b.w	8001cb2 <HAL_RCC_OscConfig+0x103a>
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80011f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b3f      	cmp	r3, #63	@ 0x3f
 8001204:	d802      	bhi.n	800120c <HAL_RCC_OscConfig+0x594>
 8001206:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	e013      	b.n	8001234 <HAL_RCC_OscConfig+0x5bc>
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001224:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001230:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <HAL_RCC_OscConfig+0x64c>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001234:	2202      	movs	r2, #2
 8001236:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800123a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800123e:	fa92 f2a2 	rbit	r2, r2
 8001242:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001246:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f002 021f 	and.w	r2, r2, #31
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1b4      	bne.n	80011d0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800126a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8119 	beq.w	80014ae <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001280:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8082 	beq.w	8001392 <HAL_RCC_OscConfig+0x71a>
 800128e:	2301      	movs	r3, #1
 8001290:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80012a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_RCC_OscConfig+0x650>)
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	461a      	mov	r2, r3
 80012b4:	2301      	movs	r3, #1
 80012b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff f996 	bl	80005e8 <HAL_GetTick>
 80012bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c0:	e00f      	b.n	80012e2 <HAL_RCC_OscConfig+0x66a>
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff f98c 	bl	80005e8 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d902      	bls.n	80012e2 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	f000 bce8 	b.w	8001cb2 <HAL_RCC_OscConfig+0x103a>
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012ec:	fa93 f2a3 	rbit	r2, r3
 80012f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001302:	2202      	movs	r2, #2
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800130a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	fa93 f2a3 	rbit	r2, r3
 8001314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001322:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001326:	2202      	movs	r2, #2
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800132e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	fa93 f2a3 	rbit	r2, r3
 8001338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800133c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001340:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	4bb0      	ldr	r3, [pc, #704]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 8001344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800134e:	2102      	movs	r1, #2
 8001350:	6019      	str	r1, [r3, #0]
 8001352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001356:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	fa93 f1a3 	rbit	r1, r3
 8001360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001364:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001368:	6019      	str	r1, [r3, #0]
  return result;
 800136a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800136e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d09d      	beq.n	80012cc <HAL_RCC_OscConfig+0x654>
 8001390:	e08d      	b.n	80014ae <HAL_RCC_OscConfig+0x836>
 8001392:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001396:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	fa93 f2a3 	rbit	r2, r3
 80013ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013b4:	601a      	str	r2, [r3, #0]
  return result;
 80013b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001608 <HAL_RCC_OscConfig+0x990>)
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	461a      	mov	r2, r3
 80013d0:	2300      	movs	r3, #0
 80013d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff f908 	bl	80005e8 <HAL_GetTick>
 80013d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff f903 	bl	80005e8 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d902      	bls.n	80013f4 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f000 bc5f 	b.w	8001cb2 <HAL_RCC_OscConfig+0x103a>
 80013f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013fc:	2202      	movs	r2, #2
 80013fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001404:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	fa93 f2a3 	rbit	r2, r3
 800140e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001412:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001420:	2202      	movs	r2, #2
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001428:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fa93 f2a3 	rbit	r2, r3
 8001432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001436:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001440:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001444:	2202      	movs	r2, #2
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fa93 f2a3 	rbit	r2, r3
 8001456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800145e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b68      	ldr	r3, [pc, #416]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 8001462:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001468:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800146c:	2102      	movs	r1, #2
 800146e:	6019      	str	r1, [r3, #0]
 8001470:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001474:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa93 f1a3 	rbit	r1, r3
 800147e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001482:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001486:	6019      	str	r1, [r3, #0]
  return result;
 8001488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d197      	bne.n	80013de <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 819c 	beq.w	80017fc <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a4a      	ldr	r2, [pc, #296]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b48      	ldr	r3, [pc, #288]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80014ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014fc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014fe:	2301      	movs	r3, #1
 8001500:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b41      	ldr	r3, [pc, #260]	@ (800160c <HAL_RCC_OscConfig+0x994>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d11a      	bne.n	8001546 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001510:	4b3e      	ldr	r3, [pc, #248]	@ (800160c <HAL_RCC_OscConfig+0x994>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a3d      	ldr	r2, [pc, #244]	@ (800160c <HAL_RCC_OscConfig+0x994>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151c:	f7ff f864 	bl	80005e8 <HAL_GetTick>
 8001520:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	e009      	b.n	800153a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001526:	f7ff f85f 	bl	80005e8 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	@ 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e3bb      	b.n	8001cb2 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b34      	ldr	r3, [pc, #208]	@ (800160c <HAL_RCC_OscConfig+0x994>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ef      	beq.n	8001526 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d106      	bne.n	8001564 <HAL_RCC_OscConfig+0x8ec>
 8001556:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4a2a      	ldr	r2, [pc, #168]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6213      	str	r3, [r2, #32]
 8001562:	e035      	b.n	80015d0 <HAL_RCC_OscConfig+0x958>
 8001564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001568:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10c      	bne.n	800158e <HAL_RCC_OscConfig+0x916>
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4a22      	ldr	r2, [pc, #136]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6213      	str	r3, [r2, #32]
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 8001586:	f023 0304 	bic.w	r3, r3, #4
 800158a:	6213      	str	r3, [r2, #32]
 800158c:	e020      	b.n	80015d0 <HAL_RCC_OscConfig+0x958>
 800158e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001592:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x940>
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6213      	str	r3, [r2, #32]
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4a15      	ldr	r2, [pc, #84]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6213      	str	r3, [r2, #32]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0x958>
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6213      	str	r3, [r2, #32]
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <HAL_RCC_OscConfig+0x98c>)
 80015ca:	f023 0304 	bic.w	r3, r3, #4
 80015ce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8085 	beq.w	80016ec <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff f801 	bl	80005e8 <HAL_GetTick>
 80015e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	e011      	b.n	8001610 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7fe fffc 	bl	80005e8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d907      	bls.n	8001610 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e356      	b.n	8001cb2 <HAL_RCC_OscConfig+0x103a>
 8001604:	40021000 	.word	0x40021000
 8001608:	10908120 	.word	0x10908120
 800160c:	40007000 	.word	0x40007000
 8001610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001614:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001618:	2202      	movs	r2, #2
 800161a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001620:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fa93 f2a3 	rbit	r2, r3
 800162a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001638:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800163c:	2202      	movs	r2, #2
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001644:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001652:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001656:	601a      	str	r2, [r3, #0]
  return result;
 8001658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001660:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_RCC_OscConfig+0xa00>
 8001672:	4b98      	ldr	r3, [pc, #608]	@ (80018d4 <HAL_RCC_OscConfig+0xc5c>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	e013      	b.n	80016a0 <HAL_RCC_OscConfig+0xa28>
 8001678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001680:	2202      	movs	r2, #2
 8001682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001688:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	fa93 f2a3 	rbit	r2, r3
 8001692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001696:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	4b8d      	ldr	r3, [pc, #564]	@ (80018d4 <HAL_RCC_OscConfig+0xc5c>)
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016a4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80016a8:	2102      	movs	r1, #2
 80016aa:	6011      	str	r1, [r2, #0]
 80016ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016b0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	fa92 f1a2 	rbit	r1, r2
 80016ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016be:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80016c2:	6011      	str	r1, [r2, #0]
  return result;
 80016c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016c8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	fab2 f282 	clz	r2, r2
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f002 021f 	and.w	r2, r2, #31
 80016de:	2101      	movs	r1, #1
 80016e0:	fa01 f202 	lsl.w	r2, r1, r2
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d080      	beq.n	80015ec <HAL_RCC_OscConfig+0x974>
 80016ea:	e07d      	b.n	80017e8 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7fe ff7c 	bl	80005e8 <HAL_GetTick>
 80016f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7fe ff77 	bl	80005e8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e2d1      	b.n	8001cb2 <HAL_RCC_OscConfig+0x103a>
 800170e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001712:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001716:	2202      	movs	r2, #2
 8001718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f2a3 	rbit	r2, r3
 8001728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001736:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800173a:	2202      	movs	r2, #2
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001742:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f2a3 	rbit	r2, r3
 800174c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001750:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001754:	601a      	str	r2, [r3, #0]
  return result;
 8001756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800175e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <HAL_RCC_OscConfig+0xafe>
 8001770:	4b58      	ldr	r3, [pc, #352]	@ (80018d4 <HAL_RCC_OscConfig+0xc5c>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	e013      	b.n	800179e <HAL_RCC_OscConfig+0xb26>
 8001776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001786:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001794:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	4b4e      	ldr	r3, [pc, #312]	@ (80018d4 <HAL_RCC_OscConfig+0xc5c>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80017a6:	2102      	movs	r1, #2
 80017a8:	6011      	str	r1, [r2, #0]
 80017aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017ae:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	fa92 f1a2 	rbit	r1, r2
 80017b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017bc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80017c0:	6011      	str	r1, [r2, #0]
  return result;
 80017c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017c6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	fab2 f282 	clz	r2, r2
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	f002 021f 	and.w	r2, r2, #31
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d186      	bne.n	80016f6 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017e8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f0:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <HAL_RCC_OscConfig+0xc5c>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <HAL_RCC_OscConfig+0xc5c>)
 80017f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001800:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8251 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <HAL_RCC_OscConfig+0xc5c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	f000 820f 	beq.w	8001c3a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001820:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b02      	cmp	r3, #2
 800182a:	f040 8165 	bne.w	8001af8 <HAL_RCC_OscConfig+0xe80>
 800182e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001832:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001836:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800183a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001840:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	fa93 f2a3 	rbit	r2, r3
 800184a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001852:	601a      	str	r2, [r3, #0]
  return result;
 8001854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001858:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800185c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001868:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	461a      	mov	r2, r3
 8001870:	2300      	movs	r3, #0
 8001872:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7fe feb8 	bl	80005e8 <HAL_GetTick>
 8001878:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187c:	e009      	b.n	8001892 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187e:	f7fe feb3 	bl	80005e8 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e20f      	b.n	8001cb2 <HAL_RCC_OscConfig+0x103a>
 8001892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001896:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800189a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800189e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018b6:	601a      	str	r2, [r3, #0]
  return result;
 80018b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018bc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80018ca:	d805      	bhi.n	80018d8 <HAL_RCC_OscConfig+0xc60>
 80018cc:	4b01      	ldr	r3, [pc, #4]	@ (80018d4 <HAL_RCC_OscConfig+0xc5c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e02a      	b.n	8001928 <HAL_RCC_OscConfig+0xcb0>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018dc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f2a3 	rbit	r2, r3
 80018f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001902:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001906:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001910:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	fa93 f2a3 	rbit	r2, r3
 800191a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	4bca      	ldr	r3, [pc, #808]	@ (8001c50 <HAL_RCC_OscConfig+0xfd8>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800192c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001930:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001934:	6011      	str	r1, [r2, #0]
 8001936:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800193a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	fa92 f1a2 	rbit	r1, r2
 8001944:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001948:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800194c:	6011      	str	r1, [r2, #0]
  return result;
 800194e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001952:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	fab2 f282 	clz	r2, r2
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f042 0220 	orr.w	r2, r2, #32
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f002 021f 	and.w	r2, r2, #31
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d184      	bne.n	800187e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001974:	4bb6      	ldr	r3, [pc, #728]	@ (8001c50 <HAL_RCC_OscConfig+0xfd8>)
 8001976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001978:	f023 020f 	bic.w	r2, r3, #15
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001988:	49b1      	ldr	r1, [pc, #708]	@ (8001c50 <HAL_RCC_OscConfig+0xfd8>)
 800198a:	4313      	orrs	r3, r2
 800198c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800198e:	4bb0      	ldr	r3, [pc, #704]	@ (8001c50 <HAL_RCC_OscConfig+0xfd8>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a19      	ldr	r1, [r3, #32]
 80019a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	430b      	orrs	r3, r1
 80019b0:	49a7      	ldr	r1, [pc, #668]	@ (8001c50 <HAL_RCC_OscConfig+0xfd8>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
 80019b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80019be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019da:	601a      	str	r2, [r3, #0]
  return result;
 80019dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019e4:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	461a      	mov	r2, r3
 80019f8:	2301      	movs	r3, #1
 80019fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7fe fdf4 	bl	80005e8 <HAL_GetTick>
 8001a00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a06:	f7fe fdef 	bl	80005e8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e14b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x103a>
 8001a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a3e:	601a      	str	r2, [r3, #0]
  return result;
 8001a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a44:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a52:	d802      	bhi.n	8001a5a <HAL_RCC_OscConfig+0xde2>
 8001a54:	4b7e      	ldr	r3, [pc, #504]	@ (8001c50 <HAL_RCC_OscConfig+0xfd8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	e027      	b.n	8001aaa <HAL_RCC_OscConfig+0xe32>
 8001a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a84:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a92:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <HAL_RCC_OscConfig+0xfd8>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aae:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ab2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ab6:	6011      	str	r1, [r2, #0]
 8001ab8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001abc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	fa92 f1a2 	rbit	r1, r2
 8001ac6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aca:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001ace:	6011      	str	r1, [r2, #0]
  return result;
 8001ad0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ad4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f002 021f 	and.w	r2, r2, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d087      	beq.n	8001a06 <HAL_RCC_OscConfig+0xd8e>
 8001af6:	e0db      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1038>
 8001af8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fa93 f2a3 	rbit	r2, r3
 8001b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b18:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b1c:	601a      	str	r2, [r3, #0]
  return result;
 8001b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b22:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b26:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b32:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7fe fd53 	bl	80005e8 <HAL_GetTick>
 8001b42:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b46:	e009      	b.n	8001b5c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7fe fd4e 	bl	80005e8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0aa      	b.n	8001cb2 <HAL_RCC_OscConfig+0x103a>
 8001b5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b60:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b80:	601a      	str	r2, [r3, #0]
  return result;
 8001b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b86:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b94:	d802      	bhi.n	8001b9c <HAL_RCC_OscConfig+0xf24>
 8001b96:	4b2e      	ldr	r3, [pc, #184]	@ (8001c50 <HAL_RCC_OscConfig+0xfd8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e027      	b.n	8001bec <HAL_RCC_OscConfig+0xf74>
 8001b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bbc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001bca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be2:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_RCC_OscConfig+0xfd8>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bf0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bf4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bf8:	6011      	str	r1, [r2, #0]
 8001bfa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bfe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fa92 f1a2 	rbit	r1, r2
 8001c08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c0c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c10:	6011      	str	r1, [r2, #0]
  return result;
 8001c12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c16:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f002 021f 	and.w	r2, r2, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d187      	bne.n	8001b48 <HAL_RCC_OscConfig+0xed0>
 8001c38:	e03a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d104      	bne.n	8001c54 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e031      	b.n	8001cb2 <HAL_RCC_OscConfig+0x103a>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c54:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_RCC_OscConfig+0x1044>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <HAL_RCC_OscConfig+0x1044>)
 8001c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c60:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001c68:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d117      	bne.n	8001cac <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001c80:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d10b      	bne.n	8001cac <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b09e      	sub	sp, #120	@ 0x78
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e154      	b.n	8001f82 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b89      	ldr	r3, [pc, #548]	@ (8001f00 <HAL_RCC_ClockConfig+0x240>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d910      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b86      	ldr	r3, [pc, #536]	@ (8001f00 <HAL_RCC_ClockConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4984      	ldr	r1, [pc, #528]	@ (8001f00 <HAL_RCC_ClockConfig+0x240>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b82      	ldr	r3, [pc, #520]	@ (8001f00 <HAL_RCC_ClockConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e13c      	b.n	8001f82 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b7b      	ldr	r3, [pc, #492]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4978      	ldr	r1, [pc, #480]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80cd 	beq.w	8001ece <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d137      	bne.n	8001dac <HAL_RCC_ClockConfig+0xec>
 8001d3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d40:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001d4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d54:	d802      	bhi.n	8001d5c <HAL_RCC_ClockConfig+0x9c>
 8001d56:	4b6b      	ldr	r3, [pc, #428]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e00f      	b.n	8001d7c <HAL_RCC_ClockConfig+0xbc>
 8001d5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d78:	4b62      	ldr	r3, [pc, #392]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001d82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d84:	fa92 f2a2 	rbit	r2, r2
 8001d88:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001d8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d8c:	fab2 f282 	clz	r2, r2
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f042 0220 	orr.w	r2, r2, #32
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f002 021f 	and.w	r2, r2, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d171      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0ea      	b.n	8001f82 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d137      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x164>
 8001db4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_RCC_ClockConfig+0x114>
 8001dce:	4b4d      	ldr	r3, [pc, #308]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	e00f      	b.n	8001df4 <HAL_RCC_ClockConfig+0x134>
 8001dd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001de2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001de6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001df0:	4b44      	ldr	r3, [pc, #272]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001df8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001dfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dfc:	fa92 f2a2 	rbit	r2, r2
 8001e00:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001e02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e04:	fab2 f282 	clz	r2, r2
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	f042 0220 	orr.w	r2, r2, #32
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	f002 021f 	and.w	r2, r2, #31
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d135      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0ae      	b.n	8001f82 <HAL_RCC_ClockConfig+0x2c2>
 8001e24:	2302      	movs	r3, #2
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e3a:	d802      	bhi.n	8001e42 <HAL_RCC_ClockConfig+0x182>
 8001e3c:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	e00d      	b.n	8001e5e <HAL_RCC_ClockConfig+0x19e>
 8001e42:	2302      	movs	r3, #2
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4e:	2302      	movs	r3, #2
 8001e50:	623b      	str	r3, [r7, #32]
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	2202      	movs	r2, #2
 8001e60:	61ba      	str	r2, [r7, #24]
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	fa92 f2a2 	rbit	r2, r2
 8001e68:	617a      	str	r2, [r7, #20]
  return result;
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f002 021f 	and.w	r2, r2, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e07a      	b.n	8001f82 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 0203 	bic.w	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	491a      	ldr	r1, [pc, #104]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e9e:	f7fe fba3 	bl	80005e8 <HAL_GetTick>
 8001ea2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea6:	f7fe fb9f 	bl	80005e8 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e062      	b.n	8001f82 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 020c 	and.w	r2, r3, #12
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d1eb      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ece:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <HAL_RCC_ClockConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d215      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <HAL_RCC_ClockConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 0207 	bic.w	r2, r3, #7
 8001ee4:	4906      	ldr	r1, [pc, #24]	@ (8001f00 <HAL_RCC_ClockConfig+0x240>)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <HAL_RCC_ClockConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d006      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e041      	b.n	8001f82 <HAL_RCC_ClockConfig+0x2c2>
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_RCC_ClockConfig+0x2cc>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	491a      	ldr	r1, [pc, #104]	@ (8001f8c <HAL_RCC_ClockConfig+0x2cc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <HAL_RCC_ClockConfig+0x2cc>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4912      	ldr	r1, [pc, #72]	@ (8001f8c <HAL_RCC_ClockConfig+0x2cc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f46:	f000 f829 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <HAL_RCC_ClockConfig+0x2cc>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f54:	22f0      	movs	r2, #240	@ 0xf0
 8001f56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	fa92 f2a2 	rbit	r2, r2
 8001f5e:	60fa      	str	r2, [r7, #12]
  return result;
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	fab2 f282 	clz	r2, r2
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	40d3      	lsrs	r3, r2
 8001f6a:	4a09      	ldr	r2, [pc, #36]	@ (8001f90 <HAL_RCC_ClockConfig+0x2d0>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f72:	4a08      	ldr	r2, [pc, #32]	@ (8001f94 <HAL_RCC_ClockConfig+0x2d4>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f76:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <HAL_RCC_ClockConfig+0x2d8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe faf0 	bl	8000560 <HAL_InitTick>
  
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3778      	adds	r7, #120	@ 0x78
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08003750 	.word	0x08003750
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x30>
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x36>
 8001fca:	e029      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fce:	613b      	str	r3, [r7, #16]
      break;
 8001fd0:	e029      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0c9b      	lsrs	r3, r3, #18
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	4a18      	ldr	r2, [pc, #96]	@ (800203c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	4a15      	ldr	r2, [pc, #84]	@ (8002040 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e007      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800200a:	4a0b      	ldr	r2, [pc, #44]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x9c>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	613b      	str	r3, [r7, #16]
      break;
 800201e:	e002      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002022:	613b      	str	r3, [r7, #16]
      break;
 8002024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002026:	693b      	ldr	r3, [r7, #16]
}
 8002028:	4618      	mov	r0, r3
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40021000 	.word	0x40021000
 8002038:	007a1200 	.word	0x007a1200
 800203c:	08003768 	.word	0x08003768
 8002040:	08003778 	.word	0x08003778

08002044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_RCC_GetHCLKFreq+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000000 	.word	0x20000000

0800205c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002062:	f7ff ffef 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002066:	4601      	mov	r1, r0
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002070:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002074:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	fa92 f2a2 	rbit	r2, r2
 800207c:	603a      	str	r2, [r7, #0]
  return result;
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	fab2 f282 	clz	r2, r2
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	40d3      	lsrs	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <HAL_RCC_GetPCLK1Freq+0x40>)
 800208a:	5cd3      	ldrb	r3, [r2, r3]
 800208c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	08003760 	.word	0x08003760

080020a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020a6:	f7ff ffcd 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 80020aa:	4601      	mov	r1, r0
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80020b4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80020b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	fa92 f2a2 	rbit	r2, r2
 80020c0:	603a      	str	r2, [r7, #0]
  return result;
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	fab2 f282 	clz	r2, r2
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	40d3      	lsrs	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08003760 	.word	0x08003760

080020e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	@ 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80d2 	beq.w	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002108:	4b4d      	ldr	r3, [pc, #308]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10e      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	4b4a      	ldr	r3, [pc, #296]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	4a49      	ldr	r2, [pc, #292]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800211a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211e:	61d3      	str	r3, [r2, #28]
 8002120:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212c:	2301      	movs	r3, #1
 800212e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a40      	ldr	r2, [pc, #256]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002148:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7fe fa4d 	bl	80005e8 <HAL_GetTick>
 800214e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe fa49 	bl	80005e8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	@ 0x64
 800215e:	d901      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1d4      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b37      	ldr	r3, [pc, #220]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002170:	4b33      	ldr	r3, [pc, #204]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002178:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800217a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8082 	beq.w	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800218a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800218c:	429a      	cmp	r2, r3
 800218e:	d07a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002190:	4b2b      	ldr	r3, [pc, #172]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800219a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800219e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80021a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	461a      	mov	r2, r3
 80021ba:	2301      	movs	r3, #1
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80021cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	461a      	mov	r2, r3
 80021de:	2300      	movs	r3, #0
 80021e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021e2:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d049      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe f9f9 	bl	80005e8 <HAL_GetTick>
 80021f6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe f9f5 	bl	80005e8 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e17e      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002210:	2302      	movs	r3, #2
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
 800221c:	2302      	movs	r3, #2
 800221e:	623b      	str	r3, [r7, #32]
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	61fb      	str	r3, [r7, #28]
  return result;
 8002228:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800223a:	4b01      	ldr	r3, [pc, #4]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	e00d      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
 8002248:	10908100 	.word	0x10908100
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	4b9a      	ldr	r3, [pc, #616]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	2202      	movs	r2, #2
 800225e:	613a      	str	r2, [r7, #16]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	fa92 f2a2 	rbit	r2, r2
 8002266:	60fa      	str	r2, [r7, #12]
  return result;
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	fab2 f282 	clz	r2, r2
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	f002 021f 	and.w	r2, r2, #31
 800227a:	2101      	movs	r1, #1
 800227c:	fa01 f202 	lsl.w	r2, r1, r2
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0b9      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002286:	4b8f      	ldr	r3, [pc, #572]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	498c      	ldr	r1, [pc, #560]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002294:	4313      	orrs	r3, r2
 8002296:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002298:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	4b88      	ldr	r3, [pc, #544]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	4a87      	ldr	r2, [pc, #540]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b8:	4b82      	ldr	r3, [pc, #520]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	f023 0203 	bic.w	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	497f      	ldr	r1, [pc, #508]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d6:	4b7b      	ldr	r3, [pc, #492]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4978      	ldr	r1, [pc, #480]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022f4:	4b73      	ldr	r3, [pc, #460]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	4970      	ldr	r1, [pc, #448]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002312:	4b6c      	ldr	r3, [pc, #432]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	f023 0210 	bic.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4969      	ldr	r1, [pc, #420]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002330:	4b64      	ldr	r3, [pc, #400]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233c:	4961      	ldr	r1, [pc, #388]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800234e:	4b5d      	ldr	r3, [pc, #372]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f023 0220 	bic.w	r2, r3, #32
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	495a      	ldr	r1, [pc, #360]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800236c:	4b55      	ldr	r3, [pc, #340]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	4952      	ldr	r1, [pc, #328]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237a:	4313      	orrs	r3, r2
 800237c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800238a:	4b4e      	ldr	r3, [pc, #312]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	494b      	ldr	r1, [pc, #300]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002398:	4313      	orrs	r3, r2
 800239a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023a8:	4b46      	ldr	r3, [pc, #280]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4943      	ldr	r1, [pc, #268]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023c6:	4b3f      	ldr	r3, [pc, #252]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	493c      	ldr	r1, [pc, #240]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023e4:	4b37      	ldr	r3, [pc, #220]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	4934      	ldr	r1, [pc, #208]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002402:	4b30      	ldr	r3, [pc, #192]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240e:	492d      	ldr	r1, [pc, #180]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002420:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242c:	4925      	ldr	r1, [pc, #148]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800243e:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	491e      	ldr	r1, [pc, #120]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800245c:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002468:	4916      	ldr	r1, [pc, #88]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002486:	490f      	ldr	r1, [pc, #60]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a4:	4907      	ldr	r1, [pc, #28]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80024b6:	4b03      	ldr	r3, [pc, #12]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	e002      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ca:	4913      	ldr	r1, [pc, #76]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80024dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e8:	490b      	ldr	r1, [pc, #44]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002506:	4904      	ldr	r1, [pc, #16]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002508:	4313      	orrs	r3, r2
 800250a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3748      	adds	r7, #72	@ 0x48
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e040      	b.n	80025b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fd ff38 	bl	80003b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	@ 0x24
 8002548:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fe54 	bl	8003210 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fc7d 	bl	8002e68 <UART_SetConfig>
 800256e:	4603      	mov	r3, r0
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e01b      	b.n	80025b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fed3 	bl	8003354 <UART_CheckIdleState>
 80025ae:	4603      	mov	r3, r0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d177      	bne.n	80026c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_UART_Transmit+0x24>
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e070      	b.n	80026c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2221      	movs	r2, #33	@ 0x21
 80025ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ee:	f7fd fffb 	bl	80005e8 <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800260c:	d108      	bne.n	8002620 <HAL_UART_Transmit+0x68>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e003      	b.n	8002628 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002628:	e02f      	b.n	800268a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	2180      	movs	r1, #128	@ 0x80
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 ff35 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e03b      	b.n	80026c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	881a      	ldrh	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800265c:	b292      	uxth	r2, r2
 800265e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	3302      	adds	r3, #2
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	e007      	b.n	8002678 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3301      	adds	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1c9      	bne.n	800262a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	2140      	movs	r1, #64	@ 0x40
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 feff 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e005      	b.n	80026c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	e000      	b.n	80026c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
  }
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b08a      	sub	sp, #40	@ 0x28
 80026ce:	af02      	add	r7, sp, #8
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	f040 80b6 	bne.w	8002852 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_UART_Receive+0x28>
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0ae      	b.n	8002854 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2222      	movs	r2, #34	@ 0x22
 8002702:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800270c:	f7fd ff6c 	bl	80005e8 <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272a:	d10e      	bne.n	800274a <HAL_UART_Receive+0x80>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_UART_Receive+0x76>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800273a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800273e:	e02d      	b.n	800279c <HAL_UART_Receive+0xd2>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	22ff      	movs	r2, #255	@ 0xff
 8002744:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002748:	e028      	b.n	800279c <HAL_UART_Receive+0xd2>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <HAL_UART_Receive+0xa4>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <HAL_UART_Receive+0x9a>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	22ff      	movs	r2, #255	@ 0xff
 800275e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002762:	e01b      	b.n	800279c <HAL_UART_Receive+0xd2>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	227f      	movs	r2, #127	@ 0x7f
 8002768:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800276c:	e016      	b.n	800279c <HAL_UART_Receive+0xd2>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002776:	d10d      	bne.n	8002794 <HAL_UART_Receive+0xca>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <HAL_UART_Receive+0xc0>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	227f      	movs	r2, #127	@ 0x7f
 8002784:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002788:	e008      	b.n	800279c <HAL_UART_Receive+0xd2>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	223f      	movs	r2, #63	@ 0x3f
 800278e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002792:	e003      	b.n	800279c <HAL_UART_Receive+0xd2>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80027a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ac:	d108      	bne.n	80027c0 <HAL_UART_Receive+0xf6>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d104      	bne.n	80027c0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	e003      	b.n	80027c8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80027c8:	e037      	b.n	800283a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2200      	movs	r2, #0
 80027d2:	2120      	movs	r1, #32
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fe65 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e033      	b.n	8002854 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	8a7b      	ldrh	r3, [r7, #18]
 80027fc:	4013      	ands	r3, r2
 80027fe:	b29a      	uxth	r2, r3
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	3302      	adds	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e00d      	b.n	8002828 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002812:	b29b      	uxth	r3, r3
 8002814:	b2da      	uxtb	r2, r3
 8002816:	8a7b      	ldrh	r3, [r7, #18]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4013      	ands	r3, r2
 800281c:	b2da      	uxtb	r2, r3
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1c1      	bne.n	80027ca <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0ba      	sub	sp, #232	@ 0xe8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002882:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002886:	f640 030f 	movw	r3, #2063	@ 0x80f
 800288a:	4013      	ands	r3, r2
 800288c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d115      	bne.n	80028c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00f      	beq.n	80028c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 82ab 	beq.w	8002e10 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
      }
      return;
 80028c2:	e2a5      	b.n	8002e10 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8117 	beq.w	8002afc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80028de:	4b85      	ldr	r3, [pc, #532]	@ (8002af4 <HAL_UART_IRQHandler+0x298>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 810a 	beq.w	8002afc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d011      	beq.n	8002918 <HAL_UART_IRQHandler+0xbc>
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d011      	beq.n	8002948 <HAL_UART_IRQHandler+0xec>
 8002924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2202      	movs	r2, #2
 8002936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800293e:	f043 0204 	orr.w	r2, r3, #4
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d011      	beq.n	8002978 <HAL_UART_IRQHandler+0x11c>
 8002954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2204      	movs	r2, #4
 8002966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002994:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2208      	movs	r2, #8
 80029a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029aa:	f043 0208 	orr.w	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <HAL_UART_IRQHandler+0x18a>
 80029c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00c      	beq.n	80029e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8211 	beq.w	8002e14 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2e:	2b40      	cmp	r3, #64	@ 0x40
 8002a30:	d005      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d04f      	beq.n	8002ade <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fd9d 	bl	800357e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	d141      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3308      	adds	r3, #8
 8002a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3308      	adds	r3, #8
 8002a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1d9      	bne.n	8002a52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d013      	beq.n	8002ace <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aaa:	4a13      	ldr	r2, [pc, #76]	@ (8002af8 <HAL_UART_IRQHandler+0x29c>)
 8002aac:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd ff17 	bl	80008e6 <HAL_DMA_Abort_IT>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d017      	beq.n	8002aee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002acc:	e00f      	b.n	8002aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f9b4 	bl	8002e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	e00b      	b.n	8002aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f9b0 	bl	8002e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002adc:	e007      	b.n	8002aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9ac 	bl	8002e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002aec:	e192      	b.n	8002e14 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aee:	bf00      	nop
    return;
 8002af0:	e190      	b.n	8002e14 <HAL_UART_IRQHandler+0x5b8>
 8002af2:	bf00      	nop
 8002af4:	04000120 	.word	0x04000120
 8002af8:	08003647 	.word	0x08003647

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	f040 814b 	bne.w	8002d9c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8144 	beq.w	8002d9c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 813d 	beq.w	8002d9c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2210      	movs	r2, #16
 8002b28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b34:	2b40      	cmp	r3, #64	@ 0x40
 8002b36:	f040 80b5 	bne.w	8002ca4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8164 	beq.w	8002e18 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	f080 815c 	bcs.w	8002e18 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	f000 8086 	beq.w	8002c82 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b82:	e853 3f00 	ldrex	r3, [r3]
 8002b86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ba0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ba4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002bac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bb0:	e841 2300 	strex	r3, r2, [r1]
 8002bb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1da      	bne.n	8002b76 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002bd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3308      	adds	r3, #8
 8002be0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002be4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bf0:	e841 2300 	strex	r3, r2, [r1]
 8002bf4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e1      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3308      	adds	r3, #8
 8002c02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c06:	e853 3f00 	ldrex	r3, [r3]
 8002c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e3      	bne.n	8002bfc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c52:	f023 0310 	bic.w	r3, r3, #16
 8002c56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e4      	bne.n	8002c42 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fdf4 	bl	800086a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f8d7 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ca2:	e0b9      	b.n	8002e18 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80ab 	beq.w	8002e1c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80a6 	beq.w	8002e1c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cf4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e4      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	623b      	str	r3, [r7, #32]
   return(result);
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3308      	adds	r3, #8
 8002d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e3      	bne.n	8002d06 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0310 	bic.w	r3, r3, #16
 8002d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	69b9      	ldr	r1, [r7, #24]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	617b      	str	r3, [r7, #20]
   return(result);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e4      	bne.n	8002d52 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f85b 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d9a:	e03f      	b.n	8002e1c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00e      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x56a>
 8002da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fc81 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dc4:	e02d      	b.n	8002e22 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00e      	beq.n	8002df0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01c      	beq.n	8002e20 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	4798      	blx	r3
    }
    return;
 8002dee:	e017      	b.n	8002e20 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d012      	beq.n	8002e22 <HAL_UART_IRQHandler+0x5c6>
 8002dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00c      	beq.n	8002e22 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fc32 	bl	8003672 <UART_EndTransmit_IT>
    return;
 8002e0e:	e008      	b.n	8002e22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e10:	bf00      	nop
 8002e12:	e006      	b.n	8002e22 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e14:	bf00      	nop
 8002e16:	e004      	b.n	8002e22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e18:	bf00      	nop
 8002e1a:	e002      	b.n	8002e22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e1c:	bf00      	nop
 8002e1e:	e000      	b.n	8002e22 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e20:	bf00      	nop
  }

}
 8002e22:	37e8      	adds	r7, #232	@ 0xe8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b92      	ldr	r3, [pc, #584]	@ (80030dc <UART_SetConfig+0x274>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	6979      	ldr	r1, [r7, #20]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a80      	ldr	r2, [pc, #512]	@ (80030e0 <UART_SetConfig+0x278>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d120      	bne.n	8002f26 <UART_SetConfig+0xbe>
 8002ee4:	4b7f      	ldr	r3, [pc, #508]	@ (80030e4 <UART_SetConfig+0x27c>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d817      	bhi.n	8002f20 <UART_SetConfig+0xb8>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <UART_SetConfig+0x90>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f09 	.word	0x08002f09
 8002efc:	08002f15 	.word	0x08002f15
 8002f00:	08002f1b 	.word	0x08002f1b
 8002f04:	08002f0f 	.word	0x08002f0f
 8002f08:	2301      	movs	r3, #1
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e0b5      	b.n	800307a <UART_SetConfig+0x212>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e0b2      	b.n	800307a <UART_SetConfig+0x212>
 8002f14:	2304      	movs	r3, #4
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	e0af      	b.n	800307a <UART_SetConfig+0x212>
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	77fb      	strb	r3, [r7, #31]
 8002f1e:	e0ac      	b.n	800307a <UART_SetConfig+0x212>
 8002f20:	2310      	movs	r3, #16
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e0a9      	b.n	800307a <UART_SetConfig+0x212>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6f      	ldr	r2, [pc, #444]	@ (80030e8 <UART_SetConfig+0x280>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d124      	bne.n	8002f7a <UART_SetConfig+0x112>
 8002f30:	4b6c      	ldr	r3, [pc, #432]	@ (80030e4 <UART_SetConfig+0x27c>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f3c:	d011      	beq.n	8002f62 <UART_SetConfig+0xfa>
 8002f3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f42:	d817      	bhi.n	8002f74 <UART_SetConfig+0x10c>
 8002f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f48:	d011      	beq.n	8002f6e <UART_SetConfig+0x106>
 8002f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f4e:	d811      	bhi.n	8002f74 <UART_SetConfig+0x10c>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <UART_SetConfig+0xf4>
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f58:	d006      	beq.n	8002f68 <UART_SetConfig+0x100>
 8002f5a:	e00b      	b.n	8002f74 <UART_SetConfig+0x10c>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	77fb      	strb	r3, [r7, #31]
 8002f60:	e08b      	b.n	800307a <UART_SetConfig+0x212>
 8002f62:	2302      	movs	r3, #2
 8002f64:	77fb      	strb	r3, [r7, #31]
 8002f66:	e088      	b.n	800307a <UART_SetConfig+0x212>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	e085      	b.n	800307a <UART_SetConfig+0x212>
 8002f6e:	2308      	movs	r3, #8
 8002f70:	77fb      	strb	r3, [r7, #31]
 8002f72:	e082      	b.n	800307a <UART_SetConfig+0x212>
 8002f74:	2310      	movs	r3, #16
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e07f      	b.n	800307a <UART_SetConfig+0x212>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80030ec <UART_SetConfig+0x284>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d124      	bne.n	8002fce <UART_SetConfig+0x166>
 8002f84:	4b57      	ldr	r3, [pc, #348]	@ (80030e4 <UART_SetConfig+0x27c>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002f8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f90:	d011      	beq.n	8002fb6 <UART_SetConfig+0x14e>
 8002f92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f96:	d817      	bhi.n	8002fc8 <UART_SetConfig+0x160>
 8002f98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f9c:	d011      	beq.n	8002fc2 <UART_SetConfig+0x15a>
 8002f9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fa2:	d811      	bhi.n	8002fc8 <UART_SetConfig+0x160>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <UART_SetConfig+0x148>
 8002fa8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fac:	d006      	beq.n	8002fbc <UART_SetConfig+0x154>
 8002fae:	e00b      	b.n	8002fc8 <UART_SetConfig+0x160>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e061      	b.n	800307a <UART_SetConfig+0x212>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e05e      	b.n	800307a <UART_SetConfig+0x212>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e05b      	b.n	800307a <UART_SetConfig+0x212>
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e058      	b.n	800307a <UART_SetConfig+0x212>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e055      	b.n	800307a <UART_SetConfig+0x212>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a47      	ldr	r2, [pc, #284]	@ (80030f0 <UART_SetConfig+0x288>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d124      	bne.n	8003022 <UART_SetConfig+0x1ba>
 8002fd8:	4b42      	ldr	r3, [pc, #264]	@ (80030e4 <UART_SetConfig+0x27c>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002fe0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002fe4:	d011      	beq.n	800300a <UART_SetConfig+0x1a2>
 8002fe6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002fea:	d817      	bhi.n	800301c <UART_SetConfig+0x1b4>
 8002fec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ff0:	d011      	beq.n	8003016 <UART_SetConfig+0x1ae>
 8002ff2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ff6:	d811      	bhi.n	800301c <UART_SetConfig+0x1b4>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <UART_SetConfig+0x19c>
 8002ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003000:	d006      	beq.n	8003010 <UART_SetConfig+0x1a8>
 8003002:	e00b      	b.n	800301c <UART_SetConfig+0x1b4>
 8003004:	2300      	movs	r3, #0
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e037      	b.n	800307a <UART_SetConfig+0x212>
 800300a:	2302      	movs	r3, #2
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e034      	b.n	800307a <UART_SetConfig+0x212>
 8003010:	2304      	movs	r3, #4
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e031      	b.n	800307a <UART_SetConfig+0x212>
 8003016:	2308      	movs	r3, #8
 8003018:	77fb      	strb	r3, [r7, #31]
 800301a:	e02e      	b.n	800307a <UART_SetConfig+0x212>
 800301c:	2310      	movs	r3, #16
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	e02b      	b.n	800307a <UART_SetConfig+0x212>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a33      	ldr	r2, [pc, #204]	@ (80030f4 <UART_SetConfig+0x28c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d124      	bne.n	8003076 <UART_SetConfig+0x20e>
 800302c:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <UART_SetConfig+0x27c>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003034:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003038:	d011      	beq.n	800305e <UART_SetConfig+0x1f6>
 800303a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800303e:	d817      	bhi.n	8003070 <UART_SetConfig+0x208>
 8003040:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003044:	d011      	beq.n	800306a <UART_SetConfig+0x202>
 8003046:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800304a:	d811      	bhi.n	8003070 <UART_SetConfig+0x208>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <UART_SetConfig+0x1f0>
 8003050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003054:	d006      	beq.n	8003064 <UART_SetConfig+0x1fc>
 8003056:	e00b      	b.n	8003070 <UART_SetConfig+0x208>
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e00d      	b.n	800307a <UART_SetConfig+0x212>
 800305e:	2302      	movs	r3, #2
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e00a      	b.n	800307a <UART_SetConfig+0x212>
 8003064:	2304      	movs	r3, #4
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e007      	b.n	800307a <UART_SetConfig+0x212>
 800306a:	2308      	movs	r3, #8
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	e004      	b.n	800307a <UART_SetConfig+0x212>
 8003070:	2310      	movs	r3, #16
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e001      	b.n	800307a <UART_SetConfig+0x212>
 8003076:	2310      	movs	r3, #16
 8003078:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003082:	d16b      	bne.n	800315c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003084:	7ffb      	ldrb	r3, [r7, #31]
 8003086:	2b08      	cmp	r3, #8
 8003088:	d838      	bhi.n	80030fc <UART_SetConfig+0x294>
 800308a:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <UART_SetConfig+0x228>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030b5 	.word	0x080030b5
 8003094:	080030bd 	.word	0x080030bd
 8003098:	080030c5 	.word	0x080030c5
 800309c:	080030fd 	.word	0x080030fd
 80030a0:	080030cb 	.word	0x080030cb
 80030a4:	080030fd 	.word	0x080030fd
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	080030fd 	.word	0x080030fd
 80030b0:	080030d3 	.word	0x080030d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7fe ffd2 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 80030b8:	61b8      	str	r0, [r7, #24]
        break;
 80030ba:	e024      	b.n	8003106 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030bc:	f7fe fff0 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 80030c0:	61b8      	str	r0, [r7, #24]
        break;
 80030c2:	e020      	b.n	8003106 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <UART_SetConfig+0x290>)
 80030c6:	61bb      	str	r3, [r7, #24]
        break;
 80030c8:	e01d      	b.n	8003106 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ca:	f7fe ff67 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 80030ce:	61b8      	str	r0, [r7, #24]
        break;
 80030d0:	e019      	b.n	8003106 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030d6:	61bb      	str	r3, [r7, #24]
        break;
 80030d8:	e015      	b.n	8003106 <UART_SetConfig+0x29e>
 80030da:	bf00      	nop
 80030dc:	efff69f3 	.word	0xefff69f3
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40004400 	.word	0x40004400
 80030ec:	40004800 	.word	0x40004800
 80030f0:	40004c00 	.word	0x40004c00
 80030f4:	40005000 	.word	0x40005000
 80030f8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	77bb      	strb	r3, [r7, #30]
        break;
 8003104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d073      	beq.n	80031f4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	005a      	lsls	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	441a      	add	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b0f      	cmp	r3, #15
 8003126:	d916      	bls.n	8003156 <UART_SetConfig+0x2ee>
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800312e:	d212      	bcs.n	8003156 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	b29b      	uxth	r3, r3
 8003134:	f023 030f 	bic.w	r3, r3, #15
 8003138:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	b29b      	uxth	r3, r3
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	b29a      	uxth	r2, r3
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	4313      	orrs	r3, r2
 800314a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	89fa      	ldrh	r2, [r7, #14]
 8003152:	60da      	str	r2, [r3, #12]
 8003154:	e04e      	b.n	80031f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	77bb      	strb	r3, [r7, #30]
 800315a:	e04b      	b.n	80031f4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800315c:	7ffb      	ldrb	r3, [r7, #31]
 800315e:	2b08      	cmp	r3, #8
 8003160:	d827      	bhi.n	80031b2 <UART_SetConfig+0x34a>
 8003162:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <UART_SetConfig+0x300>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	0800318d 	.word	0x0800318d
 800316c:	08003195 	.word	0x08003195
 8003170:	0800319d 	.word	0x0800319d
 8003174:	080031b3 	.word	0x080031b3
 8003178:	080031a3 	.word	0x080031a3
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031b3 	.word	0x080031b3
 8003184:	080031b3 	.word	0x080031b3
 8003188:	080031ab 	.word	0x080031ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800318c:	f7fe ff66 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8003190:	61b8      	str	r0, [r7, #24]
        break;
 8003192:	e013      	b.n	80031bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7fe ff84 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 8003198:	61b8      	str	r0, [r7, #24]
        break;
 800319a:	e00f      	b.n	80031bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <UART_SetConfig+0x3a4>)
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e00c      	b.n	80031bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7fe fefb 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 80031a6:	61b8      	str	r0, [r7, #24]
        break;
 80031a8:	e008      	b.n	80031bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ae:	61bb      	str	r3, [r7, #24]
        break;
 80031b0:	e004      	b.n	80031bc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	77bb      	strb	r3, [r7, #30]
        break;
 80031ba:	bf00      	nop
    }

    if (pclk != 0U)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d018      	beq.n	80031f4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	085a      	lsrs	r2, r3, #1
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	441a      	add	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d909      	bls.n	80031f0 <UART_SetConfig+0x388>
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e2:	d205      	bcs.n	80031f0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	e001      	b.n	80031f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003200:	7fbb      	ldrb	r3, [r7, #30]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	007a1200 	.word	0x007a1200

08003210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01a      	beq.n	8003326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800330e:	d10a      	bne.n	8003326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
  }
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b098      	sub	sp, #96	@ 0x60
 8003358:	af02      	add	r7, sp, #8
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003364:	f7fd f940 	bl	80005e8 <HAL_GetTick>
 8003368:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b08      	cmp	r3, #8
 8003376:	d12e      	bne.n	80033d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003378:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003380:	2200      	movs	r2, #0
 8003382:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f88c 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d021      	beq.n	80033d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e6      	bne.n	8003392 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e062      	b.n	800349c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d149      	bne.n	8003478 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ec:	2200      	movs	r2, #0
 80033ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f856 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d03c      	beq.n	8003478 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	623b      	str	r3, [r7, #32]
   return(result);
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800341c:	633b      	str	r3, [r7, #48]	@ 0x30
 800341e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e6      	bne.n	80033fe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3308      	adds	r3, #8
 8003436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3308      	adds	r3, #8
 800344e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003450:	61fa      	str	r2, [r7, #28]
 8003452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	69b9      	ldr	r1, [r7, #24]
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	617b      	str	r3, [r7, #20]
   return(result);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e5      	bne.n	8003430 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e011      	b.n	800349c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3758      	adds	r7, #88	@ 0x58
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b4:	e04f      	b.n	8003556 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d04b      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fd f893 	bl	80005e8 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e04e      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d037      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b80      	cmp	r3, #128	@ 0x80
 80034ea:	d034      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b40      	cmp	r3, #64	@ 0x40
 80034f0:	d031      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d110      	bne.n	8003522 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2208      	movs	r2, #8
 8003506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f838 	bl	800357e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2208      	movs	r2, #8
 8003512:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e029      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800352c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003530:	d111      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800353a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f81e 	bl	800357e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e00f      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4013      	ands	r3, r2
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	429a      	cmp	r2, r3
 8003572:	d0a0      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800357e:	b480      	push	{r7}
 8003580:	b095      	sub	sp, #84	@ 0x54
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800359a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80035a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e6      	bne.n	8003586 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3308      	adds	r3, #8
 80035be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3308      	adds	r3, #8
 80035d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e5      	bne.n	80035b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d118      	bne.n	8003626 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	60bb      	str	r3, [r7, #8]
   return(result);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f023 0310 	bic.w	r3, r3, #16
 8003608:	647b      	str	r3, [r7, #68]	@ 0x44
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6979      	ldr	r1, [r7, #20]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	613b      	str	r3, [r7, #16]
   return(result);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e6      	bne.n	80035f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800363a:	bf00      	nop
 800363c:	3754      	adds	r7, #84	@ 0x54
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7ff fbe9 	bl	8002e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b088      	sub	sp, #32
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	60bb      	str	r3, [r7, #8]
   return(result);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6979      	ldr	r1, [r7, #20]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	613b      	str	r3, [r7, #16]
   return(result);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e6      	bne.n	800367a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fbb5 	bl	8002e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <memset>:
 80036da:	4402      	add	r2, r0
 80036dc:	4603      	mov	r3, r0
 80036de:	4293      	cmp	r3, r2
 80036e0:	d100      	bne.n	80036e4 <memset+0xa>
 80036e2:	4770      	bx	lr
 80036e4:	f803 1b01 	strb.w	r1, [r3], #1
 80036e8:	e7f9      	b.n	80036de <memset+0x4>
	...

080036ec <__libc_init_array>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4d0d      	ldr	r5, [pc, #52]	@ (8003724 <__libc_init_array+0x38>)
 80036f0:	4c0d      	ldr	r4, [pc, #52]	@ (8003728 <__libc_init_array+0x3c>)
 80036f2:	1b64      	subs	r4, r4, r5
 80036f4:	10a4      	asrs	r4, r4, #2
 80036f6:	2600      	movs	r6, #0
 80036f8:	42a6      	cmp	r6, r4
 80036fa:	d109      	bne.n	8003710 <__libc_init_array+0x24>
 80036fc:	4d0b      	ldr	r5, [pc, #44]	@ (800372c <__libc_init_array+0x40>)
 80036fe:	4c0c      	ldr	r4, [pc, #48]	@ (8003730 <__libc_init_array+0x44>)
 8003700:	f000 f818 	bl	8003734 <_init>
 8003704:	1b64      	subs	r4, r4, r5
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	2600      	movs	r6, #0
 800370a:	42a6      	cmp	r6, r4
 800370c:	d105      	bne.n	800371a <__libc_init_array+0x2e>
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	f855 3b04 	ldr.w	r3, [r5], #4
 8003714:	4798      	blx	r3
 8003716:	3601      	adds	r6, #1
 8003718:	e7ee      	b.n	80036f8 <__libc_init_array+0xc>
 800371a:	f855 3b04 	ldr.w	r3, [r5], #4
 800371e:	4798      	blx	r3
 8003720:	3601      	adds	r6, #1
 8003722:	e7f2      	b.n	800370a <__libc_init_array+0x1e>
 8003724:	08003788 	.word	0x08003788
 8003728:	08003788 	.word	0x08003788
 800372c:	08003788 	.word	0x08003788
 8003730:	0800378c 	.word	0x0800378c

08003734 <_init>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr

08003740 <_fini>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr
